/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAPIResourceListFromDiscriminatorValue, type APIResourceList } from '../../models/apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { ComponentstatusesRequestBuilderNavigationMetadata, ComponentstatusesRequestBuilderRequestsMetadata, type ComponentstatusesRequestBuilder } from './componentstatuses/index.js';
// @ts-ignore
import { ConfigmapsRequestBuilderRequestsMetadata, type ConfigmapsRequestBuilder } from './configmaps/index.js';
// @ts-ignore
import { EndpointsRequestBuilderRequestsMetadata, type EndpointsRequestBuilder } from './endpoints/index.js';
// @ts-ignore
import { EventsRequestBuilderRequestsMetadata, type EventsRequestBuilder } from './events/index.js';
// @ts-ignore
import { LimitrangesRequestBuilderRequestsMetadata, type LimitrangesRequestBuilder } from './limitranges/index.js';
// @ts-ignore
import { NamespacesRequestBuilderNavigationMetadata, NamespacesRequestBuilderRequestsMetadata, type NamespacesRequestBuilder } from './namespaces/index.js';
// @ts-ignore
import { NodesRequestBuilderNavigationMetadata, NodesRequestBuilderRequestsMetadata, type NodesRequestBuilder } from './nodes/index.js';
// @ts-ignore
import { PersistentvolumeclaimsRequestBuilderRequestsMetadata, type PersistentvolumeclaimsRequestBuilder } from './persistentvolumeclaims/index.js';
// @ts-ignore
import { PersistentvolumesRequestBuilderNavigationMetadata, PersistentvolumesRequestBuilderRequestsMetadata, type PersistentvolumesRequestBuilder } from './persistentvolumes/index.js';
// @ts-ignore
import { PodsRequestBuilderRequestsMetadata, type PodsRequestBuilder } from './pods/index.js';
// @ts-ignore
import { PodtemplatesRequestBuilderRequestsMetadata, type PodtemplatesRequestBuilder } from './podtemplates/index.js';
// @ts-ignore
import { ReplicationcontrollersRequestBuilderRequestsMetadata, type ReplicationcontrollersRequestBuilder } from './replicationcontrollers/index.js';
// @ts-ignore
import { ResourcequotasRequestBuilderRequestsMetadata, type ResourcequotasRequestBuilder } from './resourcequotas/index.js';
// @ts-ignore
import { SecretsRequestBuilderRequestsMetadata, type SecretsRequestBuilder } from './secrets/index.js';
// @ts-ignore
import { ServiceaccountsRequestBuilderRequestsMetadata, type ServiceaccountsRequestBuilder } from './serviceaccounts/index.js';
// @ts-ignore
import { ServicesRequestBuilderRequestsMetadata, type ServicesRequestBuilder } from './services/index.js';
// @ts-ignore
import { type WatchRequestBuilder, WatchRequestBuilderNavigationMetadata } from './watch/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v1/
 */
export interface V1RequestBuilder extends BaseRequestBuilder<V1RequestBuilder> {
    /**
     * The componentstatuses property
     */
    get componentstatuses(): ComponentstatusesRequestBuilder;
    /**
     * The configmaps property
     */
    get configmaps(): ConfigmapsRequestBuilder;
    /**
     * The endpoints property
     */
    get endpoints(): EndpointsRequestBuilder;
    /**
     * The events property
     */
    get events(): EventsRequestBuilder;
    /**
     * The limitranges property
     */
    get limitranges(): LimitrangesRequestBuilder;
    /**
     * The namespaces property
     */
    get namespaces(): NamespacesRequestBuilder;
    /**
     * The nodes property
     */
    get nodes(): NodesRequestBuilder;
    /**
     * The persistentvolumeclaims property
     */
    get persistentvolumeclaims(): PersistentvolumeclaimsRequestBuilder;
    /**
     * The persistentvolumes property
     */
    get persistentvolumes(): PersistentvolumesRequestBuilder;
    /**
     * The pods property
     */
    get pods(): PodsRequestBuilder;
    /**
     * The podtemplates property
     */
    get podtemplates(): PodtemplatesRequestBuilder;
    /**
     * The replicationcontrollers property
     */
    get replicationcontrollers(): ReplicationcontrollersRequestBuilder;
    /**
     * The resourcequotas property
     */
    get resourcequotas(): ResourcequotasRequestBuilder;
    /**
     * The secrets property
     */
    get secrets(): SecretsRequestBuilder;
    /**
     * The serviceaccounts property
     */
    get serviceaccounts(): ServiceaccountsRequestBuilder;
    /**
     * The services property
     */
    get services(): ServicesRequestBuilder;
    /**
     * The watch property
     */
    get watch(): WatchRequestBuilder;
    /**
     * get available resources
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<APIResourceList>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<APIResourceList | undefined>;
    /**
     * get available resources
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const V1RequestBuilderUriTemplate = "{+baseurl}/api/v1/";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const V1RequestBuilderNavigationMetadata: Record<Exclude<keyof V1RequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    componentstatuses: {
        requestsMetadata: ComponentstatusesRequestBuilderRequestsMetadata,
        navigationMetadata: ComponentstatusesRequestBuilderNavigationMetadata,
    },
    configmaps: {
        requestsMetadata: ConfigmapsRequestBuilderRequestsMetadata,
    },
    endpoints: {
        requestsMetadata: EndpointsRequestBuilderRequestsMetadata,
    },
    events: {
        requestsMetadata: EventsRequestBuilderRequestsMetadata,
    },
    limitranges: {
        requestsMetadata: LimitrangesRequestBuilderRequestsMetadata,
    },
    namespaces: {
        requestsMetadata: NamespacesRequestBuilderRequestsMetadata,
        navigationMetadata: NamespacesRequestBuilderNavigationMetadata,
    },
    nodes: {
        requestsMetadata: NodesRequestBuilderRequestsMetadata,
        navigationMetadata: NodesRequestBuilderNavigationMetadata,
    },
    persistentvolumeclaims: {
        requestsMetadata: PersistentvolumeclaimsRequestBuilderRequestsMetadata,
    },
    persistentvolumes: {
        requestsMetadata: PersistentvolumesRequestBuilderRequestsMetadata,
        navigationMetadata: PersistentvolumesRequestBuilderNavigationMetadata,
    },
    pods: {
        requestsMetadata: PodsRequestBuilderRequestsMetadata,
    },
    podtemplates: {
        requestsMetadata: PodtemplatesRequestBuilderRequestsMetadata,
    },
    replicationcontrollers: {
        requestsMetadata: ReplicationcontrollersRequestBuilderRequestsMetadata,
    },
    resourcequotas: {
        requestsMetadata: ResourcequotasRequestBuilderRequestsMetadata,
    },
    secrets: {
        requestsMetadata: SecretsRequestBuilderRequestsMetadata,
    },
    serviceaccounts: {
        requestsMetadata: ServiceaccountsRequestBuilderRequestsMetadata,
    },
    services: {
        requestsMetadata: ServicesRequestBuilderRequestsMetadata,
    },
    watch: {
        navigationMetadata: WatchRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const V1RequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: V1RequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createAPIResourceListFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
