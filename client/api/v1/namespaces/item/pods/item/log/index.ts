/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v1/namespaces/{namespace-id}/pods/{name}/log
 */
export interface LogRequestBuilder extends BaseRequestBuilder<LogRequestBuilder> {
    /**
     * read log of the specified Pod
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<string>}
     */
     get(requestConfiguration?: RequestConfiguration<LogRequestBuilderGetQueryParameters> | undefined) : Promise<string | undefined>;
    /**
     * read log of the specified Pod
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<LogRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * read log of the specified Pod
 */
export interface LogRequestBuilderGetQueryParameters {
    /**
     * The container for which to stream logs. Defaults to only container if there is one container in the pod.
     */
    container?: string;
    /**
     * Follow the log stream of the pod. Defaults to false.
     */
    follow?: boolean;
    /**
     * insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
     */
    insecureSkipTLSVerifyBackend?: boolean;
    /**
     * If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     */
    limitBytes?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * Return previous terminated container logs. Defaults to false.
     */
    previous?: boolean;
    /**
     * A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     */
    sinceSeconds?: number;
    /**
     * Specify which container log stream to return to the client. Acceptable values are "All", "Stdout" and "Stderr". If not specified, "All" is used, and both stdout and stderr are returned interleaved. Note that when "TailLines" is specified, "Stream" can only be set to nil or "All".
     */
    stream?: string;
    /**
     * If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime. Note that when "TailLines" is specified, "Stream" can only be set to nil or "All".
     */
    tailLines?: number;
    /**
     * If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     */
    timestamps?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const LogRequestBuilderUriTemplate = "{+baseurl}/api/v1/namespaces/{namespace%2Did}/pods/{name}/log{?container*,follow*,insecureSkipTLSVerifyBackend*,limitBytes*,pretty*,previous*,sinceSeconds*,stream*,tailLines*,timestamps*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const LogRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LogRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "string",
    },
};
/* tslint:enable */
/* eslint-enable */
