/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFieldSelectorRequirementFromDiscriminatorValue, createLabelSelectorRequirementFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeFieldSelectorRequirement, serializeLabelSelectorRequirement, serializeObjectMeta, type FieldSelectorRequirement, type LabelSelectorRequirement, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FieldSelectorAttributes}
 */
// @ts-ignore
export function createFieldSelectorAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFieldSelectorAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelSelectorAttributes}
 */
// @ts-ignore
export function createLabelSelectorAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelSelectorAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocalSubjectAccessReview}
 */
// @ts-ignore
export function createLocalSubjectAccessReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocalSubjectAccessReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NonResourceAttributes}
 */
// @ts-ignore
export function createNonResourceAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNonResourceAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NonResourceRule}
 */
// @ts-ignore
export function createNonResourceRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNonResourceRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceAttributes}
 */
// @ts-ignore
export function createResourceAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceRule}
 */
// @ts-ignore
export function createResourceRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectAccessReview}
 */
// @ts-ignore
export function createSelfSubjectAccessReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectAccessReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectAccessReviewSpec}
 */
// @ts-ignore
export function createSelfSubjectAccessReviewSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectAccessReviewSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectRulesReview}
 */
// @ts-ignore
export function createSelfSubjectRulesReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectRulesReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectRulesReviewSpec}
 */
// @ts-ignore
export function createSelfSubjectRulesReviewSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectRulesReviewSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubjectAccessReview}
 */
// @ts-ignore
export function createSubjectAccessReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubjectAccessReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubjectAccessReviewSpec_extra}
 */
// @ts-ignore
export function createSubjectAccessReviewSpec_extraFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubjectAccessReviewSpec_extra;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubjectAccessReviewSpec}
 */
// @ts-ignore
export function createSubjectAccessReviewSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubjectAccessReviewSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubjectAccessReviewStatus}
 */
// @ts-ignore
export function createSubjectAccessReviewStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubjectAccessReviewStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubjectRulesReviewStatus}
 */
// @ts-ignore
export function createSubjectRulesReviewStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubjectRulesReviewStatus;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFieldSelectorAttributes(fieldSelectorAttributes: Partial<FieldSelectorAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rawSelector": n => { fieldSelectorAttributes.rawSelector = n.getStringValue(); },
        "requirements": n => { fieldSelectorAttributes.requirements = n.getCollectionOfObjectValues<FieldSelectorRequirement>(createFieldSelectorRequirementFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelSelectorAttributes(labelSelectorAttributes: Partial<LabelSelectorAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rawSelector": n => { labelSelectorAttributes.rawSelector = n.getStringValue(); },
        "requirements": n => { labelSelectorAttributes.requirements = n.getCollectionOfObjectValues<LabelSelectorRequirement>(createLabelSelectorRequirementFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocalSubjectAccessReview(localSubjectAccessReview: Partial<LocalSubjectAccessReview> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { localSubjectAccessReview.apiVersion = n.getStringValue(); },
        "kind": n => { localSubjectAccessReview.kind = n.getStringValue(); },
        "metadata": n => { localSubjectAccessReview.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { localSubjectAccessReview.spec = n.getObjectValue<SubjectAccessReviewSpec>(createSubjectAccessReviewSpecFromDiscriminatorValue); },
        "status": n => { localSubjectAccessReview.status = n.getObjectValue<SubjectAccessReviewStatus>(createSubjectAccessReviewStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNonResourceAttributes(nonResourceAttributes: Partial<NonResourceAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "path": n => { nonResourceAttributes.path = n.getStringValue(); },
        "verb": n => { nonResourceAttributes.verb = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNonResourceRule(nonResourceRule: Partial<NonResourceRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nonResourceURLs": n => { nonResourceRule.nonResourceURLs = n.getCollectionOfPrimitiveValues<string>(); },
        "verbs": n => { nonResourceRule.verbs = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceAttributes(resourceAttributes: Partial<ResourceAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fieldSelector": n => { resourceAttributes.fieldSelector = n.getObjectValue<FieldSelectorAttributes>(createFieldSelectorAttributesFromDiscriminatorValue); },
        "group": n => { resourceAttributes.group = n.getStringValue(); },
        "labelSelector": n => { resourceAttributes.labelSelector = n.getObjectValue<LabelSelectorAttributes>(createLabelSelectorAttributesFromDiscriminatorValue); },
        "name": n => { resourceAttributes.name = n.getStringValue(); },
        "namespace": n => { resourceAttributes.namespace = n.getStringValue(); },
        "resource": n => { resourceAttributes.resource = n.getStringValue(); },
        "subresource": n => { resourceAttributes.subresource = n.getStringValue(); },
        "verb": n => { resourceAttributes.verb = n.getStringValue(); },
        "version": n => { resourceAttributes.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceRule(resourceRule: Partial<ResourceRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroups": n => { resourceRule.apiGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "resourceNames": n => { resourceRule.resourceNames = n.getCollectionOfPrimitiveValues<string>(); },
        "resources": n => { resourceRule.resources = n.getCollectionOfPrimitiveValues<string>(); },
        "verbs": n => { resourceRule.verbs = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectAccessReview(selfSubjectAccessReview: Partial<SelfSubjectAccessReview> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { selfSubjectAccessReview.apiVersion = n.getStringValue(); },
        "kind": n => { selfSubjectAccessReview.kind = n.getStringValue(); },
        "metadata": n => { selfSubjectAccessReview.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { selfSubjectAccessReview.spec = n.getObjectValue<SelfSubjectAccessReviewSpec>(createSelfSubjectAccessReviewSpecFromDiscriminatorValue); },
        "status": n => { selfSubjectAccessReview.status = n.getObjectValue<SubjectAccessReviewStatus>(createSubjectAccessReviewStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectAccessReviewSpec(selfSubjectAccessReviewSpec: Partial<SelfSubjectAccessReviewSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nonResourceAttributes": n => { selfSubjectAccessReviewSpec.nonResourceAttributes = n.getObjectValue<NonResourceAttributes>(createNonResourceAttributesFromDiscriminatorValue); },
        "resourceAttributes": n => { selfSubjectAccessReviewSpec.resourceAttributes = n.getObjectValue<ResourceAttributes>(createResourceAttributesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectRulesReview(selfSubjectRulesReview: Partial<SelfSubjectRulesReview> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { selfSubjectRulesReview.apiVersion = n.getStringValue(); },
        "kind": n => { selfSubjectRulesReview.kind = n.getStringValue(); },
        "metadata": n => { selfSubjectRulesReview.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { selfSubjectRulesReview.spec = n.getObjectValue<SelfSubjectRulesReviewSpec>(createSelfSubjectRulesReviewSpecFromDiscriminatorValue); },
        "status": n => { selfSubjectRulesReview.status = n.getObjectValue<SubjectRulesReviewStatus>(createSubjectRulesReviewStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectRulesReviewSpec(selfSubjectRulesReviewSpec: Partial<SelfSubjectRulesReviewSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "namespace": n => { selfSubjectRulesReviewSpec.namespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubjectAccessReview(subjectAccessReview: Partial<SubjectAccessReview> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { subjectAccessReview.apiVersion = n.getStringValue(); },
        "kind": n => { subjectAccessReview.kind = n.getStringValue(); },
        "metadata": n => { subjectAccessReview.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { subjectAccessReview.spec = n.getObjectValue<SubjectAccessReviewSpec>(createSubjectAccessReviewSpecFromDiscriminatorValue); },
        "status": n => { subjectAccessReview.status = n.getObjectValue<SubjectAccessReviewStatus>(createSubjectAccessReviewStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubjectAccessReviewSpec(subjectAccessReviewSpec: Partial<SubjectAccessReviewSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "extra": n => { subjectAccessReviewSpec.extra = n.getObjectValue<SubjectAccessReviewSpec_extra>(createSubjectAccessReviewSpec_extraFromDiscriminatorValue); },
        "groups": n => { subjectAccessReviewSpec.groups = n.getCollectionOfPrimitiveValues<string>(); },
        "nonResourceAttributes": n => { subjectAccessReviewSpec.nonResourceAttributes = n.getObjectValue<NonResourceAttributes>(createNonResourceAttributesFromDiscriminatorValue); },
        "resourceAttributes": n => { subjectAccessReviewSpec.resourceAttributes = n.getObjectValue<ResourceAttributes>(createResourceAttributesFromDiscriminatorValue); },
        "uid": n => { subjectAccessReviewSpec.uid = n.getStringValue(); },
        "user": n => { subjectAccessReviewSpec.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubjectAccessReviewSpec_extra(subjectAccessReviewSpec_extra: Partial<SubjectAccessReviewSpec_extra> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubjectAccessReviewStatus(subjectAccessReviewStatus: Partial<SubjectAccessReviewStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allowed": n => { subjectAccessReviewStatus.allowed = n.getBooleanValue(); },
        "denied": n => { subjectAccessReviewStatus.denied = n.getBooleanValue(); },
        "evaluationError": n => { subjectAccessReviewStatus.evaluationError = n.getStringValue(); },
        "reason": n => { subjectAccessReviewStatus.reason = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubjectRulesReviewStatus(subjectRulesReviewStatus: Partial<SubjectRulesReviewStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "evaluationError": n => { subjectRulesReviewStatus.evaluationError = n.getStringValue(); },
        "incomplete": n => { subjectRulesReviewStatus.incomplete = n.getBooleanValue(); },
        "nonResourceRules": n => { subjectRulesReviewStatus.nonResourceRules = n.getCollectionOfObjectValues<NonResourceRule>(createNonResourceRuleFromDiscriminatorValue); },
        "resourceRules": n => { subjectRulesReviewStatus.resourceRules = n.getCollectionOfObjectValues<ResourceRule>(createResourceRuleFromDiscriminatorValue); },
    }
}
/**
 * FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
 */
export interface FieldSelectorAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
     */
    rawSelector?: string | null;
    /**
     * requirements is the parsed interpretation of a field selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
     */
    requirements?: FieldSelectorRequirement[] | null;
}
/**
 * LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
 */
export interface LabelSelectorAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
     */
    rawSelector?: string | null;
    /**
     * requirements is the parsed interpretation of a label selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
     */
    requirements?: LabelSelectorRequirement[] | null;
}
/**
 * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
 */
export interface LocalSubjectAccessReview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
     */
    spec?: SubjectAccessReviewSpec | null;
    /**
     * SubjectAccessReviewStatus
     */
    status?: SubjectAccessReviewStatus | null;
}
/**
 * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
 */
export interface NonResourceAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Path is the URL path of the request
     */
    path?: string | null;
    /**
     * Verb is the standard HTTP verb
     */
    verb?: string | null;
}
/**
 * NonResourceRule holds information that describes a rule for the non-resource
 */
export interface NonResourceRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
     */
    nonResourceURLs?: string[] | null;
    /**
     * Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
     */
    verbs?: string[] | null;
}
/**
 * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
 */
export interface ResourceAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
     */
    fieldSelector?: FieldSelectorAttributes | null;
    /**
     * Group is the API Group of the Resource.  "*" means all.
     */
    group?: string | null;
    /**
     * LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
     */
    labelSelector?: LabelSelectorAttributes | null;
    /**
     * Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
     */
    name?: string | null;
    /**
     * Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
     */
    namespace?: string | null;
    /**
     * Resource is one of the existing resource types.  "*" means all.
     */
    resource?: string | null;
    /**
     * Subresource is one of the existing resource types.  "" means none.
     */
    subresource?: string | null;
    /**
     * Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
     */
    verb?: string | null;
    /**
     * Version is the API Version of the Resource.  "*" means all.
     */
    version?: string | null;
}
/**
 * ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
 */
export interface ResourceRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
     */
    apiGroups?: string[] | null;
    /**
     * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
     */
    resourceNames?: string[] | null;
    /**
     * Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups. "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
     */
    resources?: string[] | null;
    /**
     * Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
     */
    verbs?: string[] | null;
}
/**
 * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
 */
export interface SelfSubjectAccessReview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
     */
    spec?: SelfSubjectAccessReviewSpec | null;
    /**
     * SubjectAccessReviewStatus
     */
    status?: SubjectAccessReviewStatus | null;
}
/**
 * SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
 */
export interface SelfSubjectAccessReviewSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
     */
    nonResourceAttributes?: NonResourceAttributes | null;
    /**
     * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
     */
    resourceAttributes?: ResourceAttributes | null;
}
/**
 * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
 */
export interface SelfSubjectRulesReview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
     */
    spec?: SelfSubjectRulesReviewSpec | null;
    /**
     * SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
     */
    status?: SubjectRulesReviewStatus | null;
}
/**
 * SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
 */
export interface SelfSubjectRulesReviewSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Namespace to evaluate rules for. Required.
     */
    namespace?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFieldSelectorAttributes(writer: SerializationWriter, fieldSelectorAttributes: Partial<FieldSelectorAttributes> | undefined | null = {}) : void {
    if (fieldSelectorAttributes) {
        writer.writeStringValue("rawSelector", fieldSelectorAttributes.rawSelector);
        writer.writeCollectionOfObjectValues<FieldSelectorRequirement>("requirements", fieldSelectorAttributes.requirements, serializeFieldSelectorRequirement);
        writer.writeAdditionalData(fieldSelectorAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelSelectorAttributes(writer: SerializationWriter, labelSelectorAttributes: Partial<LabelSelectorAttributes> | undefined | null = {}) : void {
    if (labelSelectorAttributes) {
        writer.writeStringValue("rawSelector", labelSelectorAttributes.rawSelector);
        writer.writeCollectionOfObjectValues<LabelSelectorRequirement>("requirements", labelSelectorAttributes.requirements, serializeLabelSelectorRequirement);
        writer.writeAdditionalData(labelSelectorAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocalSubjectAccessReview(writer: SerializationWriter, localSubjectAccessReview: Partial<LocalSubjectAccessReview> | undefined | null = {}) : void {
    if (localSubjectAccessReview) {
        writer.writeStringValue("apiVersion", localSubjectAccessReview.apiVersion);
        writer.writeStringValue("kind", localSubjectAccessReview.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", localSubjectAccessReview.metadata, serializeObjectMeta);
        writer.writeObjectValue<SubjectAccessReviewSpec>("spec", localSubjectAccessReview.spec, serializeSubjectAccessReviewSpec);
        writer.writeObjectValue<SubjectAccessReviewStatus>("status", localSubjectAccessReview.status, serializeSubjectAccessReviewStatus);
        writer.writeAdditionalData(localSubjectAccessReview.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNonResourceAttributes(writer: SerializationWriter, nonResourceAttributes: Partial<NonResourceAttributes> | undefined | null = {}) : void {
    if (nonResourceAttributes) {
        writer.writeStringValue("path", nonResourceAttributes.path);
        writer.writeStringValue("verb", nonResourceAttributes.verb);
        writer.writeAdditionalData(nonResourceAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNonResourceRule(writer: SerializationWriter, nonResourceRule: Partial<NonResourceRule> | undefined | null = {}) : void {
    if (nonResourceRule) {
        writer.writeCollectionOfPrimitiveValues<string>("nonResourceURLs", nonResourceRule.nonResourceURLs);
        writer.writeCollectionOfPrimitiveValues<string>("verbs", nonResourceRule.verbs);
        writer.writeAdditionalData(nonResourceRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceAttributes(writer: SerializationWriter, resourceAttributes: Partial<ResourceAttributes> | undefined | null = {}) : void {
    if (resourceAttributes) {
        writer.writeObjectValue<FieldSelectorAttributes>("fieldSelector", resourceAttributes.fieldSelector, serializeFieldSelectorAttributes);
        writer.writeStringValue("group", resourceAttributes.group);
        writer.writeObjectValue<LabelSelectorAttributes>("labelSelector", resourceAttributes.labelSelector, serializeLabelSelectorAttributes);
        writer.writeStringValue("name", resourceAttributes.name);
        writer.writeStringValue("namespace", resourceAttributes.namespace);
        writer.writeStringValue("resource", resourceAttributes.resource);
        writer.writeStringValue("subresource", resourceAttributes.subresource);
        writer.writeStringValue("verb", resourceAttributes.verb);
        writer.writeStringValue("version", resourceAttributes.version);
        writer.writeAdditionalData(resourceAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceRule(writer: SerializationWriter, resourceRule: Partial<ResourceRule> | undefined | null = {}) : void {
    if (resourceRule) {
        writer.writeCollectionOfPrimitiveValues<string>("apiGroups", resourceRule.apiGroups);
        writer.writeCollectionOfPrimitiveValues<string>("resourceNames", resourceRule.resourceNames);
        writer.writeCollectionOfPrimitiveValues<string>("resources", resourceRule.resources);
        writer.writeCollectionOfPrimitiveValues<string>("verbs", resourceRule.verbs);
        writer.writeAdditionalData(resourceRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectAccessReview(writer: SerializationWriter, selfSubjectAccessReview: Partial<SelfSubjectAccessReview> | undefined | null = {}) : void {
    if (selfSubjectAccessReview) {
        writer.writeStringValue("apiVersion", selfSubjectAccessReview.apiVersion);
        writer.writeStringValue("kind", selfSubjectAccessReview.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", selfSubjectAccessReview.metadata, serializeObjectMeta);
        writer.writeObjectValue<SelfSubjectAccessReviewSpec>("spec", selfSubjectAccessReview.spec, serializeSelfSubjectAccessReviewSpec);
        writer.writeObjectValue<SubjectAccessReviewStatus>("status", selfSubjectAccessReview.status, serializeSubjectAccessReviewStatus);
        writer.writeAdditionalData(selfSubjectAccessReview.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectAccessReviewSpec(writer: SerializationWriter, selfSubjectAccessReviewSpec: Partial<SelfSubjectAccessReviewSpec> | undefined | null = {}) : void {
    if (selfSubjectAccessReviewSpec) {
        writer.writeObjectValue<NonResourceAttributes>("nonResourceAttributes", selfSubjectAccessReviewSpec.nonResourceAttributes, serializeNonResourceAttributes);
        writer.writeObjectValue<ResourceAttributes>("resourceAttributes", selfSubjectAccessReviewSpec.resourceAttributes, serializeResourceAttributes);
        writer.writeAdditionalData(selfSubjectAccessReviewSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectRulesReview(writer: SerializationWriter, selfSubjectRulesReview: Partial<SelfSubjectRulesReview> | undefined | null = {}) : void {
    if (selfSubjectRulesReview) {
        writer.writeStringValue("apiVersion", selfSubjectRulesReview.apiVersion);
        writer.writeStringValue("kind", selfSubjectRulesReview.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", selfSubjectRulesReview.metadata, serializeObjectMeta);
        writer.writeObjectValue<SelfSubjectRulesReviewSpec>("spec", selfSubjectRulesReview.spec, serializeSelfSubjectRulesReviewSpec);
        writer.writeObjectValue<SubjectRulesReviewStatus>("status", selfSubjectRulesReview.status, serializeSubjectRulesReviewStatus);
        writer.writeAdditionalData(selfSubjectRulesReview.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectRulesReviewSpec(writer: SerializationWriter, selfSubjectRulesReviewSpec: Partial<SelfSubjectRulesReviewSpec> | undefined | null = {}) : void {
    if (selfSubjectRulesReviewSpec) {
        writer.writeStringValue("namespace", selfSubjectRulesReviewSpec.namespace);
        writer.writeAdditionalData(selfSubjectRulesReviewSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubjectAccessReview(writer: SerializationWriter, subjectAccessReview: Partial<SubjectAccessReview> | undefined | null = {}) : void {
    if (subjectAccessReview) {
        writer.writeStringValue("apiVersion", subjectAccessReview.apiVersion);
        writer.writeStringValue("kind", subjectAccessReview.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", subjectAccessReview.metadata, serializeObjectMeta);
        writer.writeObjectValue<SubjectAccessReviewSpec>("spec", subjectAccessReview.spec, serializeSubjectAccessReviewSpec);
        writer.writeObjectValue<SubjectAccessReviewStatus>("status", subjectAccessReview.status, serializeSubjectAccessReviewStatus);
        writer.writeAdditionalData(subjectAccessReview.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubjectAccessReviewSpec(writer: SerializationWriter, subjectAccessReviewSpec: Partial<SubjectAccessReviewSpec> | undefined | null = {}) : void {
    if (subjectAccessReviewSpec) {
        writer.writeObjectValue<SubjectAccessReviewSpec_extra>("extra", subjectAccessReviewSpec.extra, serializeSubjectAccessReviewSpec_extra);
        writer.writeCollectionOfPrimitiveValues<string>("groups", subjectAccessReviewSpec.groups);
        writer.writeObjectValue<NonResourceAttributes>("nonResourceAttributes", subjectAccessReviewSpec.nonResourceAttributes, serializeNonResourceAttributes);
        writer.writeObjectValue<ResourceAttributes>("resourceAttributes", subjectAccessReviewSpec.resourceAttributes, serializeResourceAttributes);
        writer.writeStringValue("uid", subjectAccessReviewSpec.uid);
        writer.writeStringValue("user", subjectAccessReviewSpec.user);
        writer.writeAdditionalData(subjectAccessReviewSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubjectAccessReviewSpec_extra(writer: SerializationWriter, subjectAccessReviewSpec_extra: Partial<SubjectAccessReviewSpec_extra> | undefined | null = {}) : void {
    if (subjectAccessReviewSpec_extra) {
        writer.writeAdditionalData(subjectAccessReviewSpec_extra.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubjectAccessReviewStatus(writer: SerializationWriter, subjectAccessReviewStatus: Partial<SubjectAccessReviewStatus> | undefined | null = {}) : void {
    if (subjectAccessReviewStatus) {
        writer.writeBooleanValue("allowed", subjectAccessReviewStatus.allowed);
        writer.writeBooleanValue("denied", subjectAccessReviewStatus.denied);
        writer.writeStringValue("evaluationError", subjectAccessReviewStatus.evaluationError);
        writer.writeStringValue("reason", subjectAccessReviewStatus.reason);
        writer.writeAdditionalData(subjectAccessReviewStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubjectRulesReviewStatus(writer: SerializationWriter, subjectRulesReviewStatus: Partial<SubjectRulesReviewStatus> | undefined | null = {}) : void {
    if (subjectRulesReviewStatus) {
        writer.writeStringValue("evaluationError", subjectRulesReviewStatus.evaluationError);
        writer.writeBooleanValue("incomplete", subjectRulesReviewStatus.incomplete);
        writer.writeCollectionOfObjectValues<NonResourceRule>("nonResourceRules", subjectRulesReviewStatus.nonResourceRules, serializeNonResourceRule);
        writer.writeCollectionOfObjectValues<ResourceRule>("resourceRules", subjectRulesReviewStatus.resourceRules, serializeResourceRule);
        writer.writeAdditionalData(subjectRulesReviewStatus.additionalData);
    }
}
/**
 * SubjectAccessReview checks whether or not a user or group can perform an action.
 */
export interface SubjectAccessReview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
     */
    spec?: SubjectAccessReviewSpec | null;
    /**
     * SubjectAccessReviewStatus
     */
    status?: SubjectAccessReviewStatus | null;
}
/**
 * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
 */
export interface SubjectAccessReviewSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
     */
    extra?: SubjectAccessReviewSpec_extra | null;
    /**
     * Groups is the groups you're testing for.
     */
    groups?: string[] | null;
    /**
     * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
     */
    nonResourceAttributes?: NonResourceAttributes | null;
    /**
     * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
     */
    resourceAttributes?: ResourceAttributes | null;
    /**
     * UID information about the requesting user.
     */
    uid?: string | null;
    /**
     * User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
     */
    user?: string | null;
}
/**
 * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
 */
export interface SubjectAccessReviewSpec_extra extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * SubjectAccessReviewStatus
 */
export interface SubjectAccessReviewStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Allowed is required. True if the action would be allowed, false otherwise.
     */
    allowed?: boolean | null;
    /**
     * Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
     */
    denied?: boolean | null;
    /**
     * EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
     */
    evaluationError?: string | null;
    /**
     * Reason is optional.  It indicates why a request was allowed or denied.
     */
    reason?: string | null;
}
/**
 * SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
 */
export interface SubjectRulesReviewStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
     */
    evaluationError?: string | null;
    /**
     * Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
     */
    incomplete?: boolean | null;
    /**
     * NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
     */
    nonResourceRules?: NonResourceRule[] | null;
    /**
     * ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
     */
    resourceRules?: ResourceRule[] | null;
}
/* tslint:enable */
/* eslint-enable */
