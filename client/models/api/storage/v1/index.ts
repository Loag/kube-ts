/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { createPersistentVolumeSpecFromDiscriminatorValue, createTopologySelectorTermFromDiscriminatorValue, serializePersistentVolumeSpec, serializeTopologySelectorTerm, type PersistentVolumeSpec, type TopologySelectorTerm } from '../../core/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIDriver}
 */
// @ts-ignore
export function createCSIDriverFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIDriver;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIDriverList}
 */
// @ts-ignore
export function createCSIDriverListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIDriverList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIDriverSpec}
 */
// @ts-ignore
export function createCSIDriverSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIDriverSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSINodeDriver}
 */
// @ts-ignore
export function createCSINodeDriverFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSINodeDriver;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSINode}
 */
// @ts-ignore
export function createCSINodeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSINode;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSINodeList}
 */
// @ts-ignore
export function createCSINodeListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSINodeList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSINodeSpec}
 */
// @ts-ignore
export function createCSINodeSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSINodeSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIStorageCapacity}
 */
// @ts-ignore
export function createCSIStorageCapacityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIStorageCapacity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIStorageCapacityList}
 */
// @ts-ignore
export function createCSIStorageCapacityListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIStorageCapacityList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StorageClass_parameters}
 */
// @ts-ignore
export function createStorageClass_parametersFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStorageClass_parameters;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StorageClass}
 */
// @ts-ignore
export function createStorageClassFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStorageClass;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StorageClassList}
 */
// @ts-ignore
export function createStorageClassListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStorageClassList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TokenRequest}
 */
// @ts-ignore
export function createTokenRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTokenRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachment}
 */
// @ts-ignore
export function createVolumeAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachmentList}
 */
// @ts-ignore
export function createVolumeAttachmentListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachmentList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachmentSource}
 */
// @ts-ignore
export function createVolumeAttachmentSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachmentSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachmentSpec}
 */
// @ts-ignore
export function createVolumeAttachmentSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachmentSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachmentStatus_attachmentMetadata}
 */
// @ts-ignore
export function createVolumeAttachmentStatus_attachmentMetadataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachmentStatus_attachmentMetadata;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttachmentStatus}
 */
// @ts-ignore
export function createVolumeAttachmentStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttachmentStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeError}
 */
// @ts-ignore
export function createVolumeErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeNodeResources}
 */
// @ts-ignore
export function createVolumeNodeResourcesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeNodeResources;
}
/**
 * CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
 */
export interface CSIDriver extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * CSIDriverSpec is the specification of a CSIDriver.
     */
    spec?: CSIDriverSpec | null;
}
/**
 * CSIDriverList is a collection of CSIDriver objects.
 */
export interface CSIDriverList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of CSIDriver
     */
    items?: CSIDriver[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * CSIDriverSpec is the specification of a CSIDriver.
 */
export interface CSIDriverSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.This field is immutable.
     */
    attachRequired?: boolean | null;
    /**
     * fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.This field was immutable in Kubernetes < 1.29 and now is mutable.Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
     */
    fsGroupPolicy?: string | null;
    /**
     * podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume                                defined by a CSIVolumeSource, otherwise "false""csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.This field was immutable in Kubernetes < 1.29 and now is mutable.
     */
    podInfoOnMount?: boolean | null;
    /**
     * requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
     */
    requiresRepublish?: boolean | null;
    /**
     * seLinuxMount specifies if the CSI driver supports "-o context" mount option.When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.Default is "false".
     */
    seLinuxMount?: boolean | null;
    /**
     * storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.This field was immutable in Kubernetes <= 1.22 and now is mutable.
     */
    storageCapacity?: boolean | null;
    /**
     * tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {  "<audience>": {    "token": <token>,    "expirationTimestamp": <expiration timestamp in RFC3339>,  },  ...}Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
     */
    tokenRequests?: TokenRequest[] | null;
    /**
     * volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.This field is beta. This field is immutable.
     */
    volumeLifecycleModes?: string[] | null;
}
/**
 * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
 */
export interface CSINode extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * CSINodeSpec holds information about the specification of all CSI drivers installed on a node
     */
    spec?: CSINodeSpec | null;
}
/**
 * CSINodeDriver holds information about the specification of one CSI driver installed on a node
 */
export interface CSINodeDriver extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * VolumeNodeResources is a set of resource limits for scheduling of volumes.
     */
    allocatable?: VolumeNodeResources | null;
    /**
     * name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
     */
    name?: string | null;
    /**
     * nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
     */
    nodeID?: string | null;
    /**
     * topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
     */
    topologyKeys?: string[] | null;
}
/**
 * CSINodeList is a collection of CSINode objects.
 */
export interface CSINodeList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of CSINode
     */
    items?: CSINode[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * CSINodeSpec holds information about the specification of all CSI drivers installed on a node
 */
export interface CSINodeSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
     */
    drivers?: CSINodeDriver[] | null;
}
/**
 * CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zeroThe producer of these objects can decide which approach is more suitable.They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
 */
export interface CSIStorageCapacity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    capacity?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    maximumVolumeSize?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    nodeTopology?: LabelSelector | null;
    /**
     * storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
     */
    storageClassName?: string | null;
}
/**
 * CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
 */
export interface CSIStorageCapacityList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of CSIStorageCapacity objects.
     */
    items?: CSIStorageCapacity[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIDriver(cSIDriver: Partial<CSIDriver> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSIDriver.apiVersion = n.getStringValue(); },
        "kind": n => { cSIDriver.kind = n.getStringValue(); },
        "metadata": n => { cSIDriver.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { cSIDriver.spec = n.getObjectValue<CSIDriverSpec>(createCSIDriverSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIDriverList(cSIDriverList: Partial<CSIDriverList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSIDriverList.apiVersion = n.getStringValue(); },
        "items": n => { cSIDriverList.items = n.getCollectionOfObjectValues<CSIDriver>(createCSIDriverFromDiscriminatorValue); },
        "kind": n => { cSIDriverList.kind = n.getStringValue(); },
        "metadata": n => { cSIDriverList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIDriverSpec(cSIDriverSpec: Partial<CSIDriverSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attachRequired": n => { cSIDriverSpec.attachRequired = n.getBooleanValue(); },
        "fsGroupPolicy": n => { cSIDriverSpec.fsGroupPolicy = n.getStringValue(); },
        "podInfoOnMount": n => { cSIDriverSpec.podInfoOnMount = n.getBooleanValue(); },
        "requiresRepublish": n => { cSIDriverSpec.requiresRepublish = n.getBooleanValue(); },
        "seLinuxMount": n => { cSIDriverSpec.seLinuxMount = n.getBooleanValue(); },
        "storageCapacity": n => { cSIDriverSpec.storageCapacity = n.getBooleanValue(); },
        "tokenRequests": n => { cSIDriverSpec.tokenRequests = n.getCollectionOfObjectValues<TokenRequest>(createTokenRequestFromDiscriminatorValue); },
        "volumeLifecycleModes": n => { cSIDriverSpec.volumeLifecycleModes = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSINode(cSINode: Partial<CSINode> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSINode.apiVersion = n.getStringValue(); },
        "kind": n => { cSINode.kind = n.getStringValue(); },
        "metadata": n => { cSINode.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { cSINode.spec = n.getObjectValue<CSINodeSpec>(createCSINodeSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSINodeDriver(cSINodeDriver: Partial<CSINodeDriver> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allocatable": n => { cSINodeDriver.allocatable = n.getObjectValue<VolumeNodeResources>(createVolumeNodeResourcesFromDiscriminatorValue); },
        "name": n => { cSINodeDriver.name = n.getStringValue(); },
        "nodeID": n => { cSINodeDriver.nodeID = n.getStringValue(); },
        "topologyKeys": n => { cSINodeDriver.topologyKeys = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSINodeList(cSINodeList: Partial<CSINodeList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSINodeList.apiVersion = n.getStringValue(); },
        "items": n => { cSINodeList.items = n.getCollectionOfObjectValues<CSINode>(createCSINodeFromDiscriminatorValue); },
        "kind": n => { cSINodeList.kind = n.getStringValue(); },
        "metadata": n => { cSINodeList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSINodeSpec(cSINodeSpec: Partial<CSINodeSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "drivers": n => { cSINodeSpec.drivers = n.getCollectionOfObjectValues<CSINodeDriver>(createCSINodeDriverFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIStorageCapacity(cSIStorageCapacity: Partial<CSIStorageCapacity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSIStorageCapacity.apiVersion = n.getStringValue(); },
        "capacity": n => { cSIStorageCapacity.capacity = n.getStringValue(); },
        "kind": n => { cSIStorageCapacity.kind = n.getStringValue(); },
        "maximumVolumeSize": n => { cSIStorageCapacity.maximumVolumeSize = n.getStringValue(); },
        "metadata": n => { cSIStorageCapacity.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "nodeTopology": n => { cSIStorageCapacity.nodeTopology = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "storageClassName": n => { cSIStorageCapacity.storageClassName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIStorageCapacityList(cSIStorageCapacityList: Partial<CSIStorageCapacityList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { cSIStorageCapacityList.apiVersion = n.getStringValue(); },
        "items": n => { cSIStorageCapacityList.items = n.getCollectionOfObjectValues<CSIStorageCapacity>(createCSIStorageCapacityFromDiscriminatorValue); },
        "kind": n => { cSIStorageCapacityList.kind = n.getStringValue(); },
        "metadata": n => { cSIStorageCapacityList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStorageClass(storageClass: Partial<StorageClass> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedTopologies": n => { storageClass.allowedTopologies = n.getCollectionOfObjectValues<TopologySelectorTerm>(createTopologySelectorTermFromDiscriminatorValue); },
        "allowVolumeExpansion": n => { storageClass.allowVolumeExpansion = n.getBooleanValue(); },
        "apiVersion": n => { storageClass.apiVersion = n.getStringValue(); },
        "kind": n => { storageClass.kind = n.getStringValue(); },
        "metadata": n => { storageClass.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "mountOptions": n => { storageClass.mountOptions = n.getCollectionOfPrimitiveValues<string>(); },
        "parameters": n => { storageClass.parameters = n.getObjectValue<StorageClass_parameters>(createStorageClass_parametersFromDiscriminatorValue); },
        "provisioner": n => { storageClass.provisioner = n.getStringValue(); },
        "reclaimPolicy": n => { storageClass.reclaimPolicy = n.getStringValue(); },
        "volumeBindingMode": n => { storageClass.volumeBindingMode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStorageClass_parameters(storageClass_parameters: Partial<StorageClass_parameters> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStorageClassList(storageClassList: Partial<StorageClassList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { storageClassList.apiVersion = n.getStringValue(); },
        "items": n => { storageClassList.items = n.getCollectionOfObjectValues<StorageClass>(createStorageClassFromDiscriminatorValue); },
        "kind": n => { storageClassList.kind = n.getStringValue(); },
        "metadata": n => { storageClassList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTokenRequest(tokenRequest: Partial<TokenRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "audience": n => { tokenRequest.audience = n.getStringValue(); },
        "expirationSeconds": n => { tokenRequest.expirationSeconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachment(volumeAttachment: Partial<VolumeAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { volumeAttachment.apiVersion = n.getStringValue(); },
        "kind": n => { volumeAttachment.kind = n.getStringValue(); },
        "metadata": n => { volumeAttachment.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { volumeAttachment.spec = n.getObjectValue<VolumeAttachmentSpec>(createVolumeAttachmentSpecFromDiscriminatorValue); },
        "status": n => { volumeAttachment.status = n.getObjectValue<VolumeAttachmentStatus>(createVolumeAttachmentStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachmentList(volumeAttachmentList: Partial<VolumeAttachmentList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { volumeAttachmentList.apiVersion = n.getStringValue(); },
        "items": n => { volumeAttachmentList.items = n.getCollectionOfObjectValues<VolumeAttachment>(createVolumeAttachmentFromDiscriminatorValue); },
        "kind": n => { volumeAttachmentList.kind = n.getStringValue(); },
        "metadata": n => { volumeAttachmentList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachmentSource(volumeAttachmentSource: Partial<VolumeAttachmentSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "inlineVolumeSpec": n => { volumeAttachmentSource.inlineVolumeSpec = n.getObjectValue<PersistentVolumeSpec>(createPersistentVolumeSpecFromDiscriminatorValue); },
        "persistentVolumeName": n => { volumeAttachmentSource.persistentVolumeName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachmentSpec(volumeAttachmentSpec: Partial<VolumeAttachmentSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attacher": n => { volumeAttachmentSpec.attacher = n.getStringValue(); },
        "nodeName": n => { volumeAttachmentSpec.nodeName = n.getStringValue(); },
        "source": n => { volumeAttachmentSpec.source = n.getObjectValue<VolumeAttachmentSource>(createVolumeAttachmentSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachmentStatus(volumeAttachmentStatus: Partial<VolumeAttachmentStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attached": n => { volumeAttachmentStatus.attached = n.getBooleanValue(); },
        "attachError": n => { volumeAttachmentStatus.attachError = n.getObjectValue<VolumeError>(createVolumeErrorFromDiscriminatorValue); },
        "attachmentMetadata": n => { volumeAttachmentStatus.attachmentMetadata = n.getObjectValue<VolumeAttachmentStatus_attachmentMetadata>(createVolumeAttachmentStatus_attachmentMetadataFromDiscriminatorValue); },
        "detachError": n => { volumeAttachmentStatus.detachError = n.getObjectValue<VolumeError>(createVolumeErrorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttachmentStatus_attachmentMetadata(volumeAttachmentStatus_attachmentMetadata: Partial<VolumeAttachmentStatus_attachmentMetadata> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeError(volumeError: Partial<VolumeError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { volumeError.message = n.getStringValue(); },
        "time": n => { volumeError.time = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeNodeResources(volumeNodeResources: Partial<VolumeNodeResources> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "count": n => { volumeNodeResources.count = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIDriver(writer: SerializationWriter, cSIDriver: Partial<CSIDriver> | undefined | null = {}) : void {
    if (cSIDriver) {
        writer.writeStringValue("apiVersion", cSIDriver.apiVersion);
        writer.writeStringValue("kind", cSIDriver.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", cSIDriver.metadata, serializeObjectMeta);
        writer.writeObjectValue<CSIDriverSpec>("spec", cSIDriver.spec, serializeCSIDriverSpec);
        writer.writeAdditionalData(cSIDriver.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIDriverList(writer: SerializationWriter, cSIDriverList: Partial<CSIDriverList> | undefined | null = {}) : void {
    if (cSIDriverList) {
        writer.writeStringValue("apiVersion", cSIDriverList.apiVersion);
        writer.writeCollectionOfObjectValues<CSIDriver>("items", cSIDriverList.items, serializeCSIDriver);
        writer.writeStringValue("kind", cSIDriverList.kind);
        writer.writeObjectValue<ListMeta>("metadata", cSIDriverList.metadata, serializeListMeta);
        writer.writeAdditionalData(cSIDriverList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIDriverSpec(writer: SerializationWriter, cSIDriverSpec: Partial<CSIDriverSpec> | undefined | null = {}) : void {
    if (cSIDriverSpec) {
        writer.writeBooleanValue("attachRequired", cSIDriverSpec.attachRequired);
        writer.writeStringValue("fsGroupPolicy", cSIDriverSpec.fsGroupPolicy);
        writer.writeBooleanValue("podInfoOnMount", cSIDriverSpec.podInfoOnMount);
        writer.writeBooleanValue("requiresRepublish", cSIDriverSpec.requiresRepublish);
        writer.writeBooleanValue("seLinuxMount", cSIDriverSpec.seLinuxMount);
        writer.writeBooleanValue("storageCapacity", cSIDriverSpec.storageCapacity);
        writer.writeCollectionOfObjectValues<TokenRequest>("tokenRequests", cSIDriverSpec.tokenRequests, serializeTokenRequest);
        writer.writeCollectionOfPrimitiveValues<string>("volumeLifecycleModes", cSIDriverSpec.volumeLifecycleModes);
        writer.writeAdditionalData(cSIDriverSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSINode(writer: SerializationWriter, cSINode: Partial<CSINode> | undefined | null = {}) : void {
    if (cSINode) {
        writer.writeStringValue("apiVersion", cSINode.apiVersion);
        writer.writeStringValue("kind", cSINode.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", cSINode.metadata, serializeObjectMeta);
        writer.writeObjectValue<CSINodeSpec>("spec", cSINode.spec, serializeCSINodeSpec);
        writer.writeAdditionalData(cSINode.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSINodeDriver(writer: SerializationWriter, cSINodeDriver: Partial<CSINodeDriver> | undefined | null = {}) : void {
    if (cSINodeDriver) {
        writer.writeObjectValue<VolumeNodeResources>("allocatable", cSINodeDriver.allocatable, serializeVolumeNodeResources);
        writer.writeStringValue("name", cSINodeDriver.name);
        writer.writeStringValue("nodeID", cSINodeDriver.nodeID);
        writer.writeCollectionOfPrimitiveValues<string>("topologyKeys", cSINodeDriver.topologyKeys);
        writer.writeAdditionalData(cSINodeDriver.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSINodeList(writer: SerializationWriter, cSINodeList: Partial<CSINodeList> | undefined | null = {}) : void {
    if (cSINodeList) {
        writer.writeStringValue("apiVersion", cSINodeList.apiVersion);
        writer.writeCollectionOfObjectValues<CSINode>("items", cSINodeList.items, serializeCSINode);
        writer.writeStringValue("kind", cSINodeList.kind);
        writer.writeObjectValue<ListMeta>("metadata", cSINodeList.metadata, serializeListMeta);
        writer.writeAdditionalData(cSINodeList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSINodeSpec(writer: SerializationWriter, cSINodeSpec: Partial<CSINodeSpec> | undefined | null = {}) : void {
    if (cSINodeSpec) {
        writer.writeCollectionOfObjectValues<CSINodeDriver>("drivers", cSINodeSpec.drivers, serializeCSINodeDriver);
        writer.writeAdditionalData(cSINodeSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIStorageCapacity(writer: SerializationWriter, cSIStorageCapacity: Partial<CSIStorageCapacity> | undefined | null = {}) : void {
    if (cSIStorageCapacity) {
        writer.writeStringValue("apiVersion", cSIStorageCapacity.apiVersion);
        writer.writeStringValue("capacity", cSIStorageCapacity.capacity);
        writer.writeStringValue("kind", cSIStorageCapacity.kind);
        writer.writeStringValue("maximumVolumeSize", cSIStorageCapacity.maximumVolumeSize);
        writer.writeObjectValue<ObjectMeta>("metadata", cSIStorageCapacity.metadata, serializeObjectMeta);
        writer.writeObjectValue<LabelSelector>("nodeTopology", cSIStorageCapacity.nodeTopology, serializeLabelSelector);
        writer.writeStringValue("storageClassName", cSIStorageCapacity.storageClassName);
        writer.writeAdditionalData(cSIStorageCapacity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIStorageCapacityList(writer: SerializationWriter, cSIStorageCapacityList: Partial<CSIStorageCapacityList> | undefined | null = {}) : void {
    if (cSIStorageCapacityList) {
        writer.writeStringValue("apiVersion", cSIStorageCapacityList.apiVersion);
        writer.writeCollectionOfObjectValues<CSIStorageCapacity>("items", cSIStorageCapacityList.items, serializeCSIStorageCapacity);
        writer.writeStringValue("kind", cSIStorageCapacityList.kind);
        writer.writeObjectValue<ListMeta>("metadata", cSIStorageCapacityList.metadata, serializeListMeta);
        writer.writeAdditionalData(cSIStorageCapacityList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStorageClass(writer: SerializationWriter, storageClass: Partial<StorageClass> | undefined | null = {}) : void {
    if (storageClass) {
        writer.writeCollectionOfObjectValues<TopologySelectorTerm>("allowedTopologies", storageClass.allowedTopologies, serializeTopologySelectorTerm);
        writer.writeBooleanValue("allowVolumeExpansion", storageClass.allowVolumeExpansion);
        writer.writeStringValue("apiVersion", storageClass.apiVersion);
        writer.writeStringValue("kind", storageClass.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", storageClass.metadata, serializeObjectMeta);
        writer.writeCollectionOfPrimitiveValues<string>("mountOptions", storageClass.mountOptions);
        writer.writeObjectValue<StorageClass_parameters>("parameters", storageClass.parameters, serializeStorageClass_parameters);
        writer.writeStringValue("provisioner", storageClass.provisioner);
        writer.writeStringValue("reclaimPolicy", storageClass.reclaimPolicy);
        writer.writeStringValue("volumeBindingMode", storageClass.volumeBindingMode);
        writer.writeAdditionalData(storageClass.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStorageClass_parameters(writer: SerializationWriter, storageClass_parameters: Partial<StorageClass_parameters> | undefined | null = {}) : void {
    if (storageClass_parameters) {
        writer.writeAdditionalData(storageClass_parameters.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStorageClassList(writer: SerializationWriter, storageClassList: Partial<StorageClassList> | undefined | null = {}) : void {
    if (storageClassList) {
        writer.writeStringValue("apiVersion", storageClassList.apiVersion);
        writer.writeCollectionOfObjectValues<StorageClass>("items", storageClassList.items, serializeStorageClass);
        writer.writeStringValue("kind", storageClassList.kind);
        writer.writeObjectValue<ListMeta>("metadata", storageClassList.metadata, serializeListMeta);
        writer.writeAdditionalData(storageClassList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTokenRequest(writer: SerializationWriter, tokenRequest: Partial<TokenRequest> | undefined | null = {}) : void {
    if (tokenRequest) {
        writer.writeStringValue("audience", tokenRequest.audience);
        writer.writeNumberValue("expirationSeconds", tokenRequest.expirationSeconds);
        writer.writeAdditionalData(tokenRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachment(writer: SerializationWriter, volumeAttachment: Partial<VolumeAttachment> | undefined | null = {}) : void {
    if (volumeAttachment) {
        writer.writeStringValue("apiVersion", volumeAttachment.apiVersion);
        writer.writeStringValue("kind", volumeAttachment.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", volumeAttachment.metadata, serializeObjectMeta);
        writer.writeObjectValue<VolumeAttachmentSpec>("spec", volumeAttachment.spec, serializeVolumeAttachmentSpec);
        writer.writeObjectValue<VolumeAttachmentStatus>("status", volumeAttachment.status, serializeVolumeAttachmentStatus);
        writer.writeAdditionalData(volumeAttachment.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachmentList(writer: SerializationWriter, volumeAttachmentList: Partial<VolumeAttachmentList> | undefined | null = {}) : void {
    if (volumeAttachmentList) {
        writer.writeStringValue("apiVersion", volumeAttachmentList.apiVersion);
        writer.writeCollectionOfObjectValues<VolumeAttachment>("items", volumeAttachmentList.items, serializeVolumeAttachment);
        writer.writeStringValue("kind", volumeAttachmentList.kind);
        writer.writeObjectValue<ListMeta>("metadata", volumeAttachmentList.metadata, serializeListMeta);
        writer.writeAdditionalData(volumeAttachmentList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachmentSource(writer: SerializationWriter, volumeAttachmentSource: Partial<VolumeAttachmentSource> | undefined | null = {}) : void {
    if (volumeAttachmentSource) {
        writer.writeObjectValue<PersistentVolumeSpec>("inlineVolumeSpec", volumeAttachmentSource.inlineVolumeSpec, serializePersistentVolumeSpec);
        writer.writeStringValue("persistentVolumeName", volumeAttachmentSource.persistentVolumeName);
        writer.writeAdditionalData(volumeAttachmentSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachmentSpec(writer: SerializationWriter, volumeAttachmentSpec: Partial<VolumeAttachmentSpec> | undefined | null = {}) : void {
    if (volumeAttachmentSpec) {
        writer.writeStringValue("attacher", volumeAttachmentSpec.attacher);
        writer.writeStringValue("nodeName", volumeAttachmentSpec.nodeName);
        writer.writeObjectValue<VolumeAttachmentSource>("source", volumeAttachmentSpec.source, serializeVolumeAttachmentSource);
        writer.writeAdditionalData(volumeAttachmentSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachmentStatus(writer: SerializationWriter, volumeAttachmentStatus: Partial<VolumeAttachmentStatus> | undefined | null = {}) : void {
    if (volumeAttachmentStatus) {
        writer.writeBooleanValue("attached", volumeAttachmentStatus.attached);
        writer.writeObjectValue<VolumeError>("attachError", volumeAttachmentStatus.attachError, serializeVolumeError);
        writer.writeObjectValue<VolumeAttachmentStatus_attachmentMetadata>("attachmentMetadata", volumeAttachmentStatus.attachmentMetadata, serializeVolumeAttachmentStatus_attachmentMetadata);
        writer.writeObjectValue<VolumeError>("detachError", volumeAttachmentStatus.detachError, serializeVolumeError);
        writer.writeAdditionalData(volumeAttachmentStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttachmentStatus_attachmentMetadata(writer: SerializationWriter, volumeAttachmentStatus_attachmentMetadata: Partial<VolumeAttachmentStatus_attachmentMetadata> | undefined | null = {}) : void {
    if (volumeAttachmentStatus_attachmentMetadata) {
        writer.writeAdditionalData(volumeAttachmentStatus_attachmentMetadata.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeError(writer: SerializationWriter, volumeError: Partial<VolumeError> | undefined | null = {}) : void {
    if (volumeError) {
        writer.writeStringValue("message", volumeError.message);
        writer.writeDateValue("time", volumeError.time);
        writer.writeAdditionalData(volumeError.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeNodeResources(writer: SerializationWriter, volumeNodeResources: Partial<VolumeNodeResources> | undefined | null = {}) : void {
    if (volumeNodeResources) {
        writer.writeNumberValue("count", volumeNodeResources.count);
        writer.writeAdditionalData(volumeNodeResources.additionalData);
    }
}
/**
 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
 */
export interface StorageClass extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
     */
    allowedTopologies?: TopologySelectorTerm[] | null;
    /**
     * allowVolumeExpansion shows whether the storage class allow volume expand.
     */
    allowVolumeExpansion?: boolean | null;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
     */
    mountOptions?: string[] | null;
    /**
     * parameters holds the parameters for the provisioner that should create volumes of this storage class.
     */
    parameters?: StorageClass_parameters | null;
    /**
     * provisioner indicates the type of the provisioner.
     */
    provisioner?: string | null;
    /**
     * reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
     */
    reclaimPolicy?: string | null;
    /**
     * volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
     */
    volumeBindingMode?: string | null;
}
/**
 * parameters holds the parameters for the provisioner that should create volumes of this storage class.
 */
export interface StorageClass_parameters extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * StorageClassList is a collection of storage classes.
 */
export interface StorageClassList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of StorageClasses
     */
    items?: StorageClass[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * TokenRequest contains parameters of a service account token.
 */
export interface TokenRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
     */
    audience?: string | null;
    /**
     * expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
     */
    expirationSeconds?: number | null;
}
/**
 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.VolumeAttachment objects are non-namespaced.
 */
export interface VolumeAttachment extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * VolumeAttachmentSpec is the specification of a VolumeAttachment request.
     */
    spec?: VolumeAttachmentSpec | null;
    /**
     * VolumeAttachmentStatus is the status of a VolumeAttachment request.
     */
    status?: VolumeAttachmentStatus | null;
}
/**
 * VolumeAttachmentList is a collection of VolumeAttachment objects.
 */
export interface VolumeAttachmentList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of VolumeAttachments
     */
    items?: VolumeAttachment[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * VolumeAttachmentSource represents a volume that should be attached. Right now only PersistentVolumes can be attached via external attacher, in the future we may allow also inline volumes in pods. Exactly one member can be set.
 */
export interface VolumeAttachmentSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * PersistentVolumeSpec is the specification of a persistent volume.
     */
    inlineVolumeSpec?: PersistentVolumeSpec | null;
    /**
     * persistentVolumeName represents the name of the persistent volume to attach.
     */
    persistentVolumeName?: string | null;
}
/**
 * VolumeAttachmentSpec is the specification of a VolumeAttachment request.
 */
export interface VolumeAttachmentSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
     */
    attacher?: string | null;
    /**
     * nodeName represents the node that the volume should be attached to.
     */
    nodeName?: string | null;
    /**
     * VolumeAttachmentSource represents a volume that should be attached. Right now only PersistentVolumes can be attached via external attacher, in the future we may allow also inline volumes in pods. Exactly one member can be set.
     */
    source?: VolumeAttachmentSource | null;
}
/**
 * VolumeAttachmentStatus is the status of a VolumeAttachment request.
 */
export interface VolumeAttachmentStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     */
    attached?: boolean | null;
    /**
     * VolumeError captures an error encountered during a volume operation.
     */
    attachError?: VolumeError | null;
    /**
     * attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     */
    attachmentMetadata?: VolumeAttachmentStatus_attachmentMetadata | null;
    /**
     * VolumeError captures an error encountered during a volume operation.
     */
    detachError?: VolumeError | null;
}
/**
 * attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
 */
export interface VolumeAttachmentStatus_attachmentMetadata extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * VolumeError captures an error encountered during a volume operation.
 */
export interface VolumeError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
     */
    message?: string | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    time?: Date | null;
}
/**
 * VolumeNodeResources is a set of resource limits for scheduling of volumes.
 */
export interface VolumeNodeResources extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
     */
    count?: number | null;
}
/* tslint:enable */
/* eslint-enable */
