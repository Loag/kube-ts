/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeListMeta, serializeObjectMeta, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttributesClass_parameters}
 */
// @ts-ignore
export function createVolumeAttributesClass_parametersFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttributesClass_parameters;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttributesClass}
 */
// @ts-ignore
export function createVolumeAttributesClassFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttributesClass;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeAttributesClassList}
 */
// @ts-ignore
export function createVolumeAttributesClassListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeAttributesClassList;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttributesClass(volumeAttributesClass: Partial<VolumeAttributesClass> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { volumeAttributesClass.apiVersion = n.getStringValue(); },
        "driverName": n => { volumeAttributesClass.driverName = n.getStringValue(); },
        "kind": n => { volumeAttributesClass.kind = n.getStringValue(); },
        "metadata": n => { volumeAttributesClass.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "parameters": n => { volumeAttributesClass.parameters = n.getObjectValue<VolumeAttributesClass_parameters>(createVolumeAttributesClass_parametersFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttributesClass_parameters(volumeAttributesClass_parameters: Partial<VolumeAttributesClass_parameters> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeAttributesClassList(volumeAttributesClassList: Partial<VolumeAttributesClassList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { volumeAttributesClassList.apiVersion = n.getStringValue(); },
        "items": n => { volumeAttributesClassList.items = n.getCollectionOfObjectValues<VolumeAttributesClass>(createVolumeAttributesClassFromDiscriminatorValue); },
        "kind": n => { volumeAttributesClassList.kind = n.getStringValue(); },
        "metadata": n => { volumeAttributesClassList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttributesClass(writer: SerializationWriter, volumeAttributesClass: Partial<VolumeAttributesClass> | undefined | null = {}) : void {
    if (volumeAttributesClass) {
        writer.writeStringValue("apiVersion", volumeAttributesClass.apiVersion);
        writer.writeStringValue("driverName", volumeAttributesClass.driverName);
        writer.writeStringValue("kind", volumeAttributesClass.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", volumeAttributesClass.metadata, serializeObjectMeta);
        writer.writeObjectValue<VolumeAttributesClass_parameters>("parameters", volumeAttributesClass.parameters, serializeVolumeAttributesClass_parameters);
        writer.writeAdditionalData(volumeAttributesClass.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttributesClass_parameters(writer: SerializationWriter, volumeAttributesClass_parameters: Partial<VolumeAttributesClass_parameters> | undefined | null = {}) : void {
    if (volumeAttributesClass_parameters) {
        writer.writeAdditionalData(volumeAttributesClass_parameters.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeAttributesClassList(writer: SerializationWriter, volumeAttributesClassList: Partial<VolumeAttributesClassList> | undefined | null = {}) : void {
    if (volumeAttributesClassList) {
        writer.writeStringValue("apiVersion", volumeAttributesClassList.apiVersion);
        writer.writeCollectionOfObjectValues<VolumeAttributesClass>("items", volumeAttributesClassList.items, serializeVolumeAttributesClass);
        writer.writeStringValue("kind", volumeAttributesClassList.kind);
        writer.writeObjectValue<ListMeta>("metadata", volumeAttributesClassList.metadata, serializeListMeta);
        writer.writeAdditionalData(volumeAttributesClassList.additionalData);
    }
}
/**
 * VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
 */
export interface VolumeAttributesClass extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Name of the CSI driver This field is immutable.
     */
    driverName?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
     */
    parameters?: VolumeAttributesClass_parameters | null;
}
/**
 * parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
 */
export interface VolumeAttributesClass_parameters extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
 */
export interface VolumeAttributesClassList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of VolumeAttributesClass objects.
     */
    items?: VolumeAttributesClass[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/* tslint:enable */
/* eslint-enable */
