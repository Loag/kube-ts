/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConditionFromDiscriminatorValue, createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeCondition, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type Condition, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { createTypedLocalObjectReferenceFromDiscriminatorValue, serializeTypedLocalObjectReference, type TypedLocalObjectReference } from '../../core/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HTTPIngressPath}
 */
// @ts-ignore
export function createHTTPIngressPathFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHTTPIngressPath;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HTTPIngressRuleValue}
 */
// @ts-ignore
export function createHTTPIngressRuleValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHTTPIngressRuleValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressBackend}
 */
// @ts-ignore
export function createIngressBackendFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressBackend;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressClass}
 */
// @ts-ignore
export function createIngressClassFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressClass;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressClassList}
 */
// @ts-ignore
export function createIngressClassListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressClassList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressClassParametersReference}
 */
// @ts-ignore
export function createIngressClassParametersReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressClassParametersReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressClassSpec}
 */
// @ts-ignore
export function createIngressClassSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressClassSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Ingress}
 */
// @ts-ignore
export function createIngressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressList}
 */
// @ts-ignore
export function createIngressListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressLoadBalancerIngress}
 */
// @ts-ignore
export function createIngressLoadBalancerIngressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressLoadBalancerIngress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressLoadBalancerStatus}
 */
// @ts-ignore
export function createIngressLoadBalancerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressLoadBalancerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressPortStatus}
 */
// @ts-ignore
export function createIngressPortStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressPortStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressRule}
 */
// @ts-ignore
export function createIngressRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressServiceBackend}
 */
// @ts-ignore
export function createIngressServiceBackendFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressServiceBackend;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressSpec}
 */
// @ts-ignore
export function createIngressSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressStatus}
 */
// @ts-ignore
export function createIngressStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IngressTLS}
 */
// @ts-ignore
export function createIngressTLSFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIngressTLS;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IPAddress}
 */
// @ts-ignore
export function createIPAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIPAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IPAddressList}
 */
// @ts-ignore
export function createIPAddressListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIPAddressList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IPAddressSpec}
 */
// @ts-ignore
export function createIPAddressSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIPAddressSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IPBlock}
 */
// @ts-ignore
export function createIPBlockFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIPBlock;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicyEgressRule}
 */
// @ts-ignore
export function createNetworkPolicyEgressRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicyEgressRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicy}
 */
// @ts-ignore
export function createNetworkPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicyIngressRule}
 */
// @ts-ignore
export function createNetworkPolicyIngressRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicyIngressRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicyList}
 */
// @ts-ignore
export function createNetworkPolicyListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicyList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicyPeer}
 */
// @ts-ignore
export function createNetworkPolicyPeerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicyPeer;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicyPort}
 */
// @ts-ignore
export function createNetworkPolicyPortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicyPort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkPolicySpec}
 */
// @ts-ignore
export function createNetworkPolicySpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkPolicySpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ParentReference}
 */
// @ts-ignore
export function createParentReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoParentReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceBackendPort}
 */
// @ts-ignore
export function createServiceBackendPortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceBackendPort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceCIDR}
 */
// @ts-ignore
export function createServiceCIDRFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceCIDR;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceCIDRList}
 */
// @ts-ignore
export function createServiceCIDRListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceCIDRList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceCIDRSpec}
 */
// @ts-ignore
export function createServiceCIDRSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceCIDRSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceCIDRStatus}
 */
// @ts-ignore
export function createServiceCIDRStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceCIDRStatus;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHTTPIngressPath(hTTPIngressPath: Partial<HTTPIngressPath> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backend": n => { hTTPIngressPath.backend = n.getObjectValue<IngressBackend>(createIngressBackendFromDiscriminatorValue); },
        "path": n => { hTTPIngressPath.path = n.getStringValue(); },
        "pathType": n => { hTTPIngressPath.pathType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHTTPIngressRuleValue(hTTPIngressRuleValue: Partial<HTTPIngressRuleValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "paths": n => { hTTPIngressRuleValue.paths = n.getCollectionOfObjectValues<HTTPIngressPath>(createHTTPIngressPathFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngress(ingress: Partial<Ingress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { ingress.apiVersion = n.getStringValue(); },
        "kind": n => { ingress.kind = n.getStringValue(); },
        "metadata": n => { ingress.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { ingress.spec = n.getObjectValue<IngressSpec>(createIngressSpecFromDiscriminatorValue); },
        "status": n => { ingress.status = n.getObjectValue<IngressStatus>(createIngressStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressBackend(ingressBackend: Partial<IngressBackend> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "resource": n => { ingressBackend.resource = n.getObjectValue<TypedLocalObjectReference>(createTypedLocalObjectReferenceFromDiscriminatorValue); },
        "service": n => { ingressBackend.service = n.getObjectValue<IngressServiceBackend>(createIngressServiceBackendFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressClass(ingressClass: Partial<IngressClass> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { ingressClass.apiVersion = n.getStringValue(); },
        "kind": n => { ingressClass.kind = n.getStringValue(); },
        "metadata": n => { ingressClass.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { ingressClass.spec = n.getObjectValue<IngressClassSpec>(createIngressClassSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressClassList(ingressClassList: Partial<IngressClassList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { ingressClassList.apiVersion = n.getStringValue(); },
        "items": n => { ingressClassList.items = n.getCollectionOfObjectValues<IngressClass>(createIngressClassFromDiscriminatorValue); },
        "kind": n => { ingressClassList.kind = n.getStringValue(); },
        "metadata": n => { ingressClassList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressClassParametersReference(ingressClassParametersReference: Partial<IngressClassParametersReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroup": n => { ingressClassParametersReference.apiGroup = n.getStringValue(); },
        "kind": n => { ingressClassParametersReference.kind = n.getStringValue(); },
        "name": n => { ingressClassParametersReference.name = n.getStringValue(); },
        "namespace": n => { ingressClassParametersReference.namespace = n.getStringValue(); },
        "scope": n => { ingressClassParametersReference.scope = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressClassSpec(ingressClassSpec: Partial<IngressClassSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "controller": n => { ingressClassSpec.controller = n.getStringValue(); },
        "parameters": n => { ingressClassSpec.parameters = n.getObjectValue<IngressClassParametersReference>(createIngressClassParametersReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressList(ingressList: Partial<IngressList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { ingressList.apiVersion = n.getStringValue(); },
        "items": n => { ingressList.items = n.getCollectionOfObjectValues<Ingress>(createIngressFromDiscriminatorValue); },
        "kind": n => { ingressList.kind = n.getStringValue(); },
        "metadata": n => { ingressList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressLoadBalancerIngress(ingressLoadBalancerIngress: Partial<IngressLoadBalancerIngress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hostname": n => { ingressLoadBalancerIngress.hostname = n.getStringValue(); },
        "ip": n => { ingressLoadBalancerIngress.ip = n.getStringValue(); },
        "ports": n => { ingressLoadBalancerIngress.ports = n.getCollectionOfObjectValues<IngressPortStatus>(createIngressPortStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressLoadBalancerStatus(ingressLoadBalancerStatus: Partial<IngressLoadBalancerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ingress": n => { ingressLoadBalancerStatus.ingress = n.getCollectionOfObjectValues<IngressLoadBalancerIngress>(createIngressLoadBalancerIngressFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressPortStatus(ingressPortStatus: Partial<IngressPortStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { ingressPortStatus.errorEscaped = n.getStringValue(); },
        "port": n => { ingressPortStatus.port = n.getNumberValue(); },
        "protocol": n => { ingressPortStatus.protocol = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressRule(ingressRule: Partial<IngressRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "host": n => { ingressRule.host = n.getStringValue(); },
        "http": n => { ingressRule.http = n.getObjectValue<HTTPIngressRuleValue>(createHTTPIngressRuleValueFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressServiceBackend(ingressServiceBackend: Partial<IngressServiceBackend> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { ingressServiceBackend.name = n.getStringValue(); },
        "port": n => { ingressServiceBackend.port = n.getObjectValue<ServiceBackendPort>(createServiceBackendPortFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressSpec(ingressSpec: Partial<IngressSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultBackend": n => { ingressSpec.defaultBackend = n.getObjectValue<IngressBackend>(createIngressBackendFromDiscriminatorValue); },
        "ingressClassName": n => { ingressSpec.ingressClassName = n.getStringValue(); },
        "rules": n => { ingressSpec.rules = n.getCollectionOfObjectValues<IngressRule>(createIngressRuleFromDiscriminatorValue); },
        "tls": n => { ingressSpec.tls = n.getCollectionOfObjectValues<IngressTLS>(createIngressTLSFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressStatus(ingressStatus: Partial<IngressStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "loadBalancer": n => { ingressStatus.loadBalancer = n.getObjectValue<IngressLoadBalancerStatus>(createIngressLoadBalancerStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIngressTLS(ingressTLS: Partial<IngressTLS> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hosts": n => { ingressTLS.hosts = n.getCollectionOfPrimitiveValues<string>(); },
        "secretName": n => { ingressTLS.secretName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIPAddress(iPAddress: Partial<IPAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { iPAddress.apiVersion = n.getStringValue(); },
        "kind": n => { iPAddress.kind = n.getStringValue(); },
        "metadata": n => { iPAddress.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { iPAddress.spec = n.getObjectValue<IPAddressSpec>(createIPAddressSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIPAddressList(iPAddressList: Partial<IPAddressList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { iPAddressList.apiVersion = n.getStringValue(); },
        "items": n => { iPAddressList.items = n.getCollectionOfObjectValues<IPAddress>(createIPAddressFromDiscriminatorValue); },
        "kind": n => { iPAddressList.kind = n.getStringValue(); },
        "metadata": n => { iPAddressList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIPAddressSpec(iPAddressSpec: Partial<IPAddressSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "parentRef": n => { iPAddressSpec.parentRef = n.getObjectValue<ParentReference>(createParentReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIPBlock(iPBlock: Partial<IPBlock> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cidr": n => { iPBlock.cidr = n.getStringValue(); },
        "except": n => { iPBlock.except = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicy(networkPolicy: Partial<NetworkPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { networkPolicy.apiVersion = n.getStringValue(); },
        "kind": n => { networkPolicy.kind = n.getStringValue(); },
        "metadata": n => { networkPolicy.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { networkPolicy.spec = n.getObjectValue<NetworkPolicySpec>(createNetworkPolicySpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicyEgressRule(networkPolicyEgressRule: Partial<NetworkPolicyEgressRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ports": n => { networkPolicyEgressRule.ports = n.getCollectionOfObjectValues<NetworkPolicyPort>(createNetworkPolicyPortFromDiscriminatorValue); },
        "to": n => { networkPolicyEgressRule.to = n.getCollectionOfObjectValues<NetworkPolicyPeer>(createNetworkPolicyPeerFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicyIngressRule(networkPolicyIngressRule: Partial<NetworkPolicyIngressRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "from": n => { networkPolicyIngressRule.from = n.getCollectionOfObjectValues<NetworkPolicyPeer>(createNetworkPolicyPeerFromDiscriminatorValue); },
        "ports": n => { networkPolicyIngressRule.ports = n.getCollectionOfObjectValues<NetworkPolicyPort>(createNetworkPolicyPortFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicyList(networkPolicyList: Partial<NetworkPolicyList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { networkPolicyList.apiVersion = n.getStringValue(); },
        "items": n => { networkPolicyList.items = n.getCollectionOfObjectValues<NetworkPolicy>(createNetworkPolicyFromDiscriminatorValue); },
        "kind": n => { networkPolicyList.kind = n.getStringValue(); },
        "metadata": n => { networkPolicyList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicyPeer(networkPolicyPeer: Partial<NetworkPolicyPeer> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ipBlock": n => { networkPolicyPeer.ipBlock = n.getObjectValue<IPBlock>(createIPBlockFromDiscriminatorValue); },
        "namespaceSelector": n => { networkPolicyPeer.namespaceSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "podSelector": n => { networkPolicyPeer.podSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicyPort(networkPolicyPort: Partial<NetworkPolicyPort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endPort": n => { networkPolicyPort.endPort = n.getNumberValue(); },
        "port": n => { networkPolicyPort.port = n.getStringValue(); },
        "protocol": n => { networkPolicyPort.protocol = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkPolicySpec(networkPolicySpec: Partial<NetworkPolicySpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "egress": n => { networkPolicySpec.egress = n.getCollectionOfObjectValues<NetworkPolicyEgressRule>(createNetworkPolicyEgressRuleFromDiscriminatorValue); },
        "ingress": n => { networkPolicySpec.ingress = n.getCollectionOfObjectValues<NetworkPolicyIngressRule>(createNetworkPolicyIngressRuleFromDiscriminatorValue); },
        "podSelector": n => { networkPolicySpec.podSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "policyTypes": n => { networkPolicySpec.policyTypes = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoParentReference(parentReference: Partial<ParentReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "group": n => { parentReference.group = n.getStringValue(); },
        "name": n => { parentReference.name = n.getStringValue(); },
        "namespace": n => { parentReference.namespace = n.getStringValue(); },
        "resource": n => { parentReference.resource = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceBackendPort(serviceBackendPort: Partial<ServiceBackendPort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { serviceBackendPort.name = n.getStringValue(); },
        "number": n => { serviceBackendPort.number = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceCIDR(serviceCIDR: Partial<ServiceCIDR> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { serviceCIDR.apiVersion = n.getStringValue(); },
        "kind": n => { serviceCIDR.kind = n.getStringValue(); },
        "metadata": n => { serviceCIDR.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { serviceCIDR.spec = n.getObjectValue<ServiceCIDRSpec>(createServiceCIDRSpecFromDiscriminatorValue); },
        "status": n => { serviceCIDR.status = n.getObjectValue<ServiceCIDRStatus>(createServiceCIDRStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceCIDRList(serviceCIDRList: Partial<ServiceCIDRList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { serviceCIDRList.apiVersion = n.getStringValue(); },
        "items": n => { serviceCIDRList.items = n.getCollectionOfObjectValues<ServiceCIDR>(createServiceCIDRFromDiscriminatorValue); },
        "kind": n => { serviceCIDRList.kind = n.getStringValue(); },
        "metadata": n => { serviceCIDRList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceCIDRSpec(serviceCIDRSpec: Partial<ServiceCIDRSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cidrs": n => { serviceCIDRSpec.cidrs = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceCIDRStatus(serviceCIDRStatus: Partial<ServiceCIDRStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { serviceCIDRStatus.conditions = n.getCollectionOfObjectValues<Condition>(createConditionFromDiscriminatorValue); },
    }
}
/**
 * HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
 */
export interface HTTPIngressPath extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IngressBackend describes all endpoints for a given service and port.
     */
    backend?: IngressBackend | null;
    /**
     * path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
     */
    path?: string | null;
    /**
     * pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is  done on a path element by element basis. A path element refers is the  list of labels in the path split by the '/' separator. A request is a  match for path p if every p is an element-wise prefix of p of the  request path. Note that if the last element of the path is a substring  of the last element in request path, it is not a match (e.g. /foo/bar  matches /foo/bar/baz, but does not match /foo/barbaz).* ImplementationSpecific: Interpretation of the Path matching is up to  the IngressClass. Implementations can treat this as a separate PathType  or treat it identically to Prefix or Exact path types.Implementations are required to support all path types.
     */
    pathType?: string | null;
}
/**
 * HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
 */
export interface HTTPIngressRuleValue extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * paths is a collection of paths that map requests to backends.
     */
    paths?: HTTPIngressPath[] | null;
}
/**
 * Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
 */
export interface Ingress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * IngressSpec describes the Ingress the user wishes to exist.
     */
    spec?: IngressSpec | null;
    /**
     * IngressStatus describe the current state of the Ingress.
     */
    status?: IngressStatus | null;
}
/**
 * IngressBackend describes all endpoints for a given service and port.
 */
export interface IngressBackend extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
     */
    resource?: TypedLocalObjectReference | null;
    /**
     * IngressServiceBackend references a Kubernetes Service as a Backend.
     */
    service?: IngressServiceBackend | null;
}
/**
 * IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
 */
export interface IngressClass extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * IngressClassSpec provides information about the class of an Ingress.
     */
    spec?: IngressClassSpec | null;
}
/**
 * IngressClassList is a collection of IngressClasses.
 */
export interface IngressClassList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of IngressClasses.
     */
    items?: IngressClass[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
 */
export interface IngressClassParametersReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup?: string | null;
    /**
     * kind is the type of resource being referenced.
     */
    kind?: string | null;
    /**
     * name is the name of resource being referenced.
     */
    name?: string | null;
    /**
     * namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
     */
    namespace?: string | null;
    /**
     * scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
     */
    scope?: string | null;
}
/**
 * IngressClassSpec provides information about the class of an Ingress.
 */
export interface IngressClassSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
     */
    controller?: string | null;
    /**
     * IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
     */
    parameters?: IngressClassParametersReference | null;
}
/**
 * IngressList is a collection of Ingress.
 */
export interface IngressList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of Ingress.
     */
    items?: Ingress[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
 */
export interface IngressLoadBalancerIngress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * hostname is set for load-balancer ingress points that are DNS based.
     */
    hostname?: string | null;
    /**
     * ip is set for load-balancer ingress points that are IP based.
     */
    ip?: string | null;
    /**
     * ports provides information about the ports exposed by this LoadBalancer.
     */
    ports?: IngressPortStatus[] | null;
}
/**
 * IngressLoadBalancerStatus represents the status of a load-balancer.
 */
export interface IngressLoadBalancerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ingress is a list containing ingress points for the load-balancer.
     */
    ingress?: IngressLoadBalancerIngress[] | null;
}
/**
 * IngressPortStatus represents the error condition of a service port
 */
export interface IngressPortStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use  CamelCase names- cloud provider specific error values must have names that comply with the  format foo.example.com/CamelCase.
     */
    errorEscaped?: string | null;
    /**
     * port is the port number of the ingress port.
     */
    port?: number | null;
    /**
     * protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
     */
    protocol?: string | null;
}
/**
 * IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
 */
export interface IngressRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to   the IP in the Spec of the parent Ingress.2. The `:` delimiter is not respected because ports are not allowed.  Currently the port of an Ingress is implicitly :80 for http and  :443 for https.Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
     */
    host?: string | null;
    /**
     * HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
     */
    http?: HTTPIngressRuleValue | null;
}
/**
 * IngressServiceBackend references a Kubernetes Service as a Backend.
 */
export interface IngressServiceBackend extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is the referenced service. The service must exist in the same namespace as the Ingress object.
     */
    name?: string | null;
    /**
     * ServiceBackendPort is the service port being referenced.
     */
    port?: ServiceBackendPort | null;
}
/**
 * IngressSpec describes the Ingress the user wishes to exist.
 */
export interface IngressSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IngressBackend describes all endpoints for a given service and port.
     */
    defaultBackend?: IngressBackend | null;
    /**
     * ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
     */
    ingressClassName?: string | null;
    /**
     * rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
     */
    rules?: IngressRule[] | null;
    /**
     * tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     */
    tls?: IngressTLS[] | null;
}
/**
 * IngressStatus describe the current state of the Ingress.
 */
export interface IngressStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IngressLoadBalancerStatus represents the status of a load-balancer.
     */
    loadBalancer?: IngressLoadBalancerStatus | null;
}
/**
 * IngressTLS describes the transport layer security associated with an ingress.
 */
export interface IngressTLS extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
     */
    hosts?: string[] | null;
    /**
     * secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
     */
    secretName?: string | null;
}
/**
 * IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
 */
export interface IPAddress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * IPAddressSpec describe the attributes in an IP Address.
     */
    spec?: IPAddressSpec | null;
}
/**
 * IPAddressList contains a list of IPAddress.
 */
export interface IPAddressList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of IPAddresses.
     */
    items?: IPAddress[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * IPAddressSpec describe the attributes in an IP Address.
 */
export interface IPAddressSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ParentReference describes a reference to a parent object.
     */
    parentRef?: ParentReference | null;
}
/**
 * IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
 */
export interface IPBlock extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
     */
    cidr?: string | null;
    /**
     * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
     */
    except?: string[] | null;
}
/**
 * NetworkPolicy describes what network traffic is allowed for a set of Pods
 */
export interface NetworkPolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * NetworkPolicySpec provides the specification of a NetworkPolicy
     */
    spec?: NetworkPolicySpec | null;
}
/**
 * NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
 */
export interface NetworkPolicyEgressRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: NetworkPolicyPort[] | null;
    /**
     * to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
     */
    to?: NetworkPolicyPeer[] | null;
}
/**
 * NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
 */
export interface NetworkPolicyIngressRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
     */
    from?: NetworkPolicyPeer[] | null;
    /**
     * ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: NetworkPolicyPort[] | null;
}
/**
 * NetworkPolicyList is a list of NetworkPolicy objects.
 */
export interface NetworkPolicyList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is a list of schema objects.
     */
    items?: NetworkPolicy[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
 */
export interface NetworkPolicyPeer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
     */
    ipBlock?: IPBlock | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    namespaceSelector?: LabelSelector | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    podSelector?: LabelSelector | null;
}
/**
 * NetworkPolicyPort describes a port to allow traffic on
 */
export interface NetworkPolicyPort extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     */
    endPort?: number | null;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    port?: string | null;
    /**
     * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     */
    protocol?: string | null;
}
/**
 * NetworkPolicySpec provides the specification of a NetworkPolicy
 */
export interface NetworkPolicySpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
     */
    egress?: NetworkPolicyEgressRule[] | null;
    /**
     * ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
     */
    ingress?: NetworkPolicyIngressRule[] | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    podSelector?: LabelSelector | null;
    /**
     * policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
     */
    policyTypes?: string[] | null;
}
/**
 * ParentReference describes a reference to a parent object.
 */
export interface ParentReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Group is the group of the object being referenced.
     */
    group?: string | null;
    /**
     * Name is the name of the object being referenced.
     */
    name?: string | null;
    /**
     * Namespace is the namespace of the object being referenced.
     */
    namespace?: string | null;
    /**
     * Resource is the resource of the object being referenced.
     */
    resource?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHTTPIngressPath(writer: SerializationWriter, hTTPIngressPath: Partial<HTTPIngressPath> | undefined | null = {}) : void {
    if (hTTPIngressPath) {
        writer.writeObjectValue<IngressBackend>("backend", hTTPIngressPath.backend, serializeIngressBackend);
        writer.writeStringValue("path", hTTPIngressPath.path);
        writer.writeStringValue("pathType", hTTPIngressPath.pathType);
        writer.writeAdditionalData(hTTPIngressPath.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHTTPIngressRuleValue(writer: SerializationWriter, hTTPIngressRuleValue: Partial<HTTPIngressRuleValue> | undefined | null = {}) : void {
    if (hTTPIngressRuleValue) {
        writer.writeCollectionOfObjectValues<HTTPIngressPath>("paths", hTTPIngressRuleValue.paths, serializeHTTPIngressPath);
        writer.writeAdditionalData(hTTPIngressRuleValue.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngress(writer: SerializationWriter, ingress: Partial<Ingress> | undefined | null = {}) : void {
    if (ingress) {
        writer.writeStringValue("apiVersion", ingress.apiVersion);
        writer.writeStringValue("kind", ingress.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", ingress.metadata, serializeObjectMeta);
        writer.writeObjectValue<IngressSpec>("spec", ingress.spec, serializeIngressSpec);
        writer.writeObjectValue<IngressStatus>("status", ingress.status, serializeIngressStatus);
        writer.writeAdditionalData(ingress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressBackend(writer: SerializationWriter, ingressBackend: Partial<IngressBackend> | undefined | null = {}) : void {
    if (ingressBackend) {
        writer.writeObjectValue<TypedLocalObjectReference>("resource", ingressBackend.resource, serializeTypedLocalObjectReference);
        writer.writeObjectValue<IngressServiceBackend>("service", ingressBackend.service, serializeIngressServiceBackend);
        writer.writeAdditionalData(ingressBackend.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressClass(writer: SerializationWriter, ingressClass: Partial<IngressClass> | undefined | null = {}) : void {
    if (ingressClass) {
        writer.writeStringValue("apiVersion", ingressClass.apiVersion);
        writer.writeStringValue("kind", ingressClass.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", ingressClass.metadata, serializeObjectMeta);
        writer.writeObjectValue<IngressClassSpec>("spec", ingressClass.spec, serializeIngressClassSpec);
        writer.writeAdditionalData(ingressClass.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressClassList(writer: SerializationWriter, ingressClassList: Partial<IngressClassList> | undefined | null = {}) : void {
    if (ingressClassList) {
        writer.writeStringValue("apiVersion", ingressClassList.apiVersion);
        writer.writeCollectionOfObjectValues<IngressClass>("items", ingressClassList.items, serializeIngressClass);
        writer.writeStringValue("kind", ingressClassList.kind);
        writer.writeObjectValue<ListMeta>("metadata", ingressClassList.metadata, serializeListMeta);
        writer.writeAdditionalData(ingressClassList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressClassParametersReference(writer: SerializationWriter, ingressClassParametersReference: Partial<IngressClassParametersReference> | undefined | null = {}) : void {
    if (ingressClassParametersReference) {
        writer.writeStringValue("apiGroup", ingressClassParametersReference.apiGroup);
        writer.writeStringValue("kind", ingressClassParametersReference.kind);
        writer.writeStringValue("name", ingressClassParametersReference.name);
        writer.writeStringValue("namespace", ingressClassParametersReference.namespace);
        writer.writeStringValue("scope", ingressClassParametersReference.scope);
        writer.writeAdditionalData(ingressClassParametersReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressClassSpec(writer: SerializationWriter, ingressClassSpec: Partial<IngressClassSpec> | undefined | null = {}) : void {
    if (ingressClassSpec) {
        writer.writeStringValue("controller", ingressClassSpec.controller);
        writer.writeObjectValue<IngressClassParametersReference>("parameters", ingressClassSpec.parameters, serializeIngressClassParametersReference);
        writer.writeAdditionalData(ingressClassSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressList(writer: SerializationWriter, ingressList: Partial<IngressList> | undefined | null = {}) : void {
    if (ingressList) {
        writer.writeStringValue("apiVersion", ingressList.apiVersion);
        writer.writeCollectionOfObjectValues<Ingress>("items", ingressList.items, serializeIngress);
        writer.writeStringValue("kind", ingressList.kind);
        writer.writeObjectValue<ListMeta>("metadata", ingressList.metadata, serializeListMeta);
        writer.writeAdditionalData(ingressList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressLoadBalancerIngress(writer: SerializationWriter, ingressLoadBalancerIngress: Partial<IngressLoadBalancerIngress> | undefined | null = {}) : void {
    if (ingressLoadBalancerIngress) {
        writer.writeStringValue("hostname", ingressLoadBalancerIngress.hostname);
        writer.writeStringValue("ip", ingressLoadBalancerIngress.ip);
        writer.writeCollectionOfObjectValues<IngressPortStatus>("ports", ingressLoadBalancerIngress.ports, serializeIngressPortStatus);
        writer.writeAdditionalData(ingressLoadBalancerIngress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressLoadBalancerStatus(writer: SerializationWriter, ingressLoadBalancerStatus: Partial<IngressLoadBalancerStatus> | undefined | null = {}) : void {
    if (ingressLoadBalancerStatus) {
        writer.writeCollectionOfObjectValues<IngressLoadBalancerIngress>("ingress", ingressLoadBalancerStatus.ingress, serializeIngressLoadBalancerIngress);
        writer.writeAdditionalData(ingressLoadBalancerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressPortStatus(writer: SerializationWriter, ingressPortStatus: Partial<IngressPortStatus> | undefined | null = {}) : void {
    if (ingressPortStatus) {
        writer.writeStringValue("error", ingressPortStatus.errorEscaped);
        writer.writeNumberValue("port", ingressPortStatus.port);
        writer.writeStringValue("protocol", ingressPortStatus.protocol);
        writer.writeAdditionalData(ingressPortStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressRule(writer: SerializationWriter, ingressRule: Partial<IngressRule> | undefined | null = {}) : void {
    if (ingressRule) {
        writer.writeStringValue("host", ingressRule.host);
        writer.writeObjectValue<HTTPIngressRuleValue>("http", ingressRule.http, serializeHTTPIngressRuleValue);
        writer.writeAdditionalData(ingressRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressServiceBackend(writer: SerializationWriter, ingressServiceBackend: Partial<IngressServiceBackend> | undefined | null = {}) : void {
    if (ingressServiceBackend) {
        writer.writeStringValue("name", ingressServiceBackend.name);
        writer.writeObjectValue<ServiceBackendPort>("port", ingressServiceBackend.port, serializeServiceBackendPort);
        writer.writeAdditionalData(ingressServiceBackend.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressSpec(writer: SerializationWriter, ingressSpec: Partial<IngressSpec> | undefined | null = {}) : void {
    if (ingressSpec) {
        writer.writeObjectValue<IngressBackend>("defaultBackend", ingressSpec.defaultBackend, serializeIngressBackend);
        writer.writeStringValue("ingressClassName", ingressSpec.ingressClassName);
        writer.writeCollectionOfObjectValues<IngressRule>("rules", ingressSpec.rules, serializeIngressRule);
        writer.writeCollectionOfObjectValues<IngressTLS>("tls", ingressSpec.tls, serializeIngressTLS);
        writer.writeAdditionalData(ingressSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressStatus(writer: SerializationWriter, ingressStatus: Partial<IngressStatus> | undefined | null = {}) : void {
    if (ingressStatus) {
        writer.writeObjectValue<IngressLoadBalancerStatus>("loadBalancer", ingressStatus.loadBalancer, serializeIngressLoadBalancerStatus);
        writer.writeAdditionalData(ingressStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIngressTLS(writer: SerializationWriter, ingressTLS: Partial<IngressTLS> | undefined | null = {}) : void {
    if (ingressTLS) {
        writer.writeCollectionOfPrimitiveValues<string>("hosts", ingressTLS.hosts);
        writer.writeStringValue("secretName", ingressTLS.secretName);
        writer.writeAdditionalData(ingressTLS.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIPAddress(writer: SerializationWriter, iPAddress: Partial<IPAddress> | undefined | null = {}) : void {
    if (iPAddress) {
        writer.writeStringValue("apiVersion", iPAddress.apiVersion);
        writer.writeStringValue("kind", iPAddress.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", iPAddress.metadata, serializeObjectMeta);
        writer.writeObjectValue<IPAddressSpec>("spec", iPAddress.spec, serializeIPAddressSpec);
        writer.writeAdditionalData(iPAddress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIPAddressList(writer: SerializationWriter, iPAddressList: Partial<IPAddressList> | undefined | null = {}) : void {
    if (iPAddressList) {
        writer.writeStringValue("apiVersion", iPAddressList.apiVersion);
        writer.writeCollectionOfObjectValues<IPAddress>("items", iPAddressList.items, serializeIPAddress);
        writer.writeStringValue("kind", iPAddressList.kind);
        writer.writeObjectValue<ListMeta>("metadata", iPAddressList.metadata, serializeListMeta);
        writer.writeAdditionalData(iPAddressList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIPAddressSpec(writer: SerializationWriter, iPAddressSpec: Partial<IPAddressSpec> | undefined | null = {}) : void {
    if (iPAddressSpec) {
        writer.writeObjectValue<ParentReference>("parentRef", iPAddressSpec.parentRef, serializeParentReference);
        writer.writeAdditionalData(iPAddressSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIPBlock(writer: SerializationWriter, iPBlock: Partial<IPBlock> | undefined | null = {}) : void {
    if (iPBlock) {
        writer.writeStringValue("cidr", iPBlock.cidr);
        writer.writeCollectionOfPrimitiveValues<string>("except", iPBlock.except);
        writer.writeAdditionalData(iPBlock.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicy(writer: SerializationWriter, networkPolicy: Partial<NetworkPolicy> | undefined | null = {}) : void {
    if (networkPolicy) {
        writer.writeStringValue("apiVersion", networkPolicy.apiVersion);
        writer.writeStringValue("kind", networkPolicy.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", networkPolicy.metadata, serializeObjectMeta);
        writer.writeObjectValue<NetworkPolicySpec>("spec", networkPolicy.spec, serializeNetworkPolicySpec);
        writer.writeAdditionalData(networkPolicy.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicyEgressRule(writer: SerializationWriter, networkPolicyEgressRule: Partial<NetworkPolicyEgressRule> | undefined | null = {}) : void {
    if (networkPolicyEgressRule) {
        writer.writeCollectionOfObjectValues<NetworkPolicyPort>("ports", networkPolicyEgressRule.ports, serializeNetworkPolicyPort);
        writer.writeCollectionOfObjectValues<NetworkPolicyPeer>("to", networkPolicyEgressRule.to, serializeNetworkPolicyPeer);
        writer.writeAdditionalData(networkPolicyEgressRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicyIngressRule(writer: SerializationWriter, networkPolicyIngressRule: Partial<NetworkPolicyIngressRule> | undefined | null = {}) : void {
    if (networkPolicyIngressRule) {
        writer.writeCollectionOfObjectValues<NetworkPolicyPeer>("from", networkPolicyIngressRule.from, serializeNetworkPolicyPeer);
        writer.writeCollectionOfObjectValues<NetworkPolicyPort>("ports", networkPolicyIngressRule.ports, serializeNetworkPolicyPort);
        writer.writeAdditionalData(networkPolicyIngressRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicyList(writer: SerializationWriter, networkPolicyList: Partial<NetworkPolicyList> | undefined | null = {}) : void {
    if (networkPolicyList) {
        writer.writeStringValue("apiVersion", networkPolicyList.apiVersion);
        writer.writeCollectionOfObjectValues<NetworkPolicy>("items", networkPolicyList.items, serializeNetworkPolicy);
        writer.writeStringValue("kind", networkPolicyList.kind);
        writer.writeObjectValue<ListMeta>("metadata", networkPolicyList.metadata, serializeListMeta);
        writer.writeAdditionalData(networkPolicyList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicyPeer(writer: SerializationWriter, networkPolicyPeer: Partial<NetworkPolicyPeer> | undefined | null = {}) : void {
    if (networkPolicyPeer) {
        writer.writeObjectValue<IPBlock>("ipBlock", networkPolicyPeer.ipBlock, serializeIPBlock);
        writer.writeObjectValue<LabelSelector>("namespaceSelector", networkPolicyPeer.namespaceSelector, serializeLabelSelector);
        writer.writeObjectValue<LabelSelector>("podSelector", networkPolicyPeer.podSelector, serializeLabelSelector);
        writer.writeAdditionalData(networkPolicyPeer.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicyPort(writer: SerializationWriter, networkPolicyPort: Partial<NetworkPolicyPort> | undefined | null = {}) : void {
    if (networkPolicyPort) {
        writer.writeNumberValue("endPort", networkPolicyPort.endPort);
        writer.writeStringValue("port", networkPolicyPort.port);
        writer.writeStringValue("protocol", networkPolicyPort.protocol);
        writer.writeAdditionalData(networkPolicyPort.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkPolicySpec(writer: SerializationWriter, networkPolicySpec: Partial<NetworkPolicySpec> | undefined | null = {}) : void {
    if (networkPolicySpec) {
        writer.writeCollectionOfObjectValues<NetworkPolicyEgressRule>("egress", networkPolicySpec.egress, serializeNetworkPolicyEgressRule);
        writer.writeCollectionOfObjectValues<NetworkPolicyIngressRule>("ingress", networkPolicySpec.ingress, serializeNetworkPolicyIngressRule);
        writer.writeObjectValue<LabelSelector>("podSelector", networkPolicySpec.podSelector, serializeLabelSelector);
        writer.writeCollectionOfPrimitiveValues<string>("policyTypes", networkPolicySpec.policyTypes);
        writer.writeAdditionalData(networkPolicySpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeParentReference(writer: SerializationWriter, parentReference: Partial<ParentReference> | undefined | null = {}) : void {
    if (parentReference) {
        writer.writeStringValue("group", parentReference.group);
        writer.writeStringValue("name", parentReference.name);
        writer.writeStringValue("namespace", parentReference.namespace);
        writer.writeStringValue("resource", parentReference.resource);
        writer.writeAdditionalData(parentReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceBackendPort(writer: SerializationWriter, serviceBackendPort: Partial<ServiceBackendPort> | undefined | null = {}) : void {
    if (serviceBackendPort) {
        writer.writeStringValue("name", serviceBackendPort.name);
        writer.writeNumberValue("number", serviceBackendPort.number);
        writer.writeAdditionalData(serviceBackendPort.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceCIDR(writer: SerializationWriter, serviceCIDR: Partial<ServiceCIDR> | undefined | null = {}) : void {
    if (serviceCIDR) {
        writer.writeStringValue("apiVersion", serviceCIDR.apiVersion);
        writer.writeStringValue("kind", serviceCIDR.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", serviceCIDR.metadata, serializeObjectMeta);
        writer.writeObjectValue<ServiceCIDRSpec>("spec", serviceCIDR.spec, serializeServiceCIDRSpec);
        writer.writeObjectValue<ServiceCIDRStatus>("status", serviceCIDR.status, serializeServiceCIDRStatus);
        writer.writeAdditionalData(serviceCIDR.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceCIDRList(writer: SerializationWriter, serviceCIDRList: Partial<ServiceCIDRList> | undefined | null = {}) : void {
    if (serviceCIDRList) {
        writer.writeStringValue("apiVersion", serviceCIDRList.apiVersion);
        writer.writeCollectionOfObjectValues<ServiceCIDR>("items", serviceCIDRList.items, serializeServiceCIDR);
        writer.writeStringValue("kind", serviceCIDRList.kind);
        writer.writeObjectValue<ListMeta>("metadata", serviceCIDRList.metadata, serializeListMeta);
        writer.writeAdditionalData(serviceCIDRList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceCIDRSpec(writer: SerializationWriter, serviceCIDRSpec: Partial<ServiceCIDRSpec> | undefined | null = {}) : void {
    if (serviceCIDRSpec) {
        writer.writeCollectionOfPrimitiveValues<string>("cidrs", serviceCIDRSpec.cidrs);
        writer.writeAdditionalData(serviceCIDRSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceCIDRStatus(writer: SerializationWriter, serviceCIDRStatus: Partial<ServiceCIDRStatus> | undefined | null = {}) : void {
    if (serviceCIDRStatus) {
        writer.writeCollectionOfObjectValues<Condition>("conditions", serviceCIDRStatus.conditions, serializeCondition);
        writer.writeAdditionalData(serviceCIDRStatus.additionalData);
    }
}
/**
 * ServiceBackendPort is the service port being referenced.
 */
export interface ServiceBackendPort extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
     */
    name?: string | null;
    /**
     * number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
     */
    number?: number | null;
}
/**
 * ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
 */
export interface ServiceCIDR extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
     */
    spec?: ServiceCIDRSpec | null;
    /**
     * ServiceCIDRStatus describes the current state of the ServiceCIDR.
     */
    status?: ServiceCIDRStatus | null;
}
/**
 * ServiceCIDRList contains a list of ServiceCIDR objects.
 */
export interface ServiceCIDRList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of ServiceCIDRs.
     */
    items?: ServiceCIDR[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
 */
export interface ServiceCIDRSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
     */
    cidrs?: string[] | null;
}
/**
 * ServiceCIDRStatus describes the current state of the ServiceCIDR.
 */
export interface ServiceCIDRStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
     */
    conditions?: Condition[] | null;
}
/* tslint:enable */
/* eslint-enable */
