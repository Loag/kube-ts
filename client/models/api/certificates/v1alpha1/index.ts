/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeListMeta, serializeObjectMeta, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
 */
export interface ClusterTrustBundle extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ClusterTrustBundleSpec contains the signer and trust anchors.
     */
    spec?: ClusterTrustBundleSpec | null;
}
/**
 * ClusterTrustBundleList is a collection of ClusterTrustBundle objects
 */
export interface ClusterTrustBundleList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is a collection of ClusterTrustBundle objects
     */
    items?: ClusterTrustBundle[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ClusterTrustBundleSpec contains the signer and trust anchors.
 */
export interface ClusterTrustBundleSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * signerName indicates the associated signer, if any.In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
     */
    signerName?: string | null;
    /**
     * trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
     */
    trustBundle?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClusterTrustBundle}
 */
// @ts-ignore
export function createClusterTrustBundleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClusterTrustBundle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClusterTrustBundleList}
 */
// @ts-ignore
export function createClusterTrustBundleListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClusterTrustBundleList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClusterTrustBundleSpec}
 */
// @ts-ignore
export function createClusterTrustBundleSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClusterTrustBundleSpec;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClusterTrustBundle(clusterTrustBundle: Partial<ClusterTrustBundle> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { clusterTrustBundle.apiVersion = n.getStringValue(); },
        "kind": n => { clusterTrustBundle.kind = n.getStringValue(); },
        "metadata": n => { clusterTrustBundle.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { clusterTrustBundle.spec = n.getObjectValue<ClusterTrustBundleSpec>(createClusterTrustBundleSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClusterTrustBundleList(clusterTrustBundleList: Partial<ClusterTrustBundleList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { clusterTrustBundleList.apiVersion = n.getStringValue(); },
        "items": n => { clusterTrustBundleList.items = n.getCollectionOfObjectValues<ClusterTrustBundle>(createClusterTrustBundleFromDiscriminatorValue); },
        "kind": n => { clusterTrustBundleList.kind = n.getStringValue(); },
        "metadata": n => { clusterTrustBundleList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClusterTrustBundleSpec(clusterTrustBundleSpec: Partial<ClusterTrustBundleSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "signerName": n => { clusterTrustBundleSpec.signerName = n.getStringValue(); },
        "trustBundle": n => { clusterTrustBundleSpec.trustBundle = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClusterTrustBundle(writer: SerializationWriter, clusterTrustBundle: Partial<ClusterTrustBundle> | undefined | null = {}) : void {
    if (clusterTrustBundle) {
        writer.writeStringValue("apiVersion", clusterTrustBundle.apiVersion);
        writer.writeStringValue("kind", clusterTrustBundle.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", clusterTrustBundle.metadata, serializeObjectMeta);
        writer.writeObjectValue<ClusterTrustBundleSpec>("spec", clusterTrustBundle.spec, serializeClusterTrustBundleSpec);
        writer.writeAdditionalData(clusterTrustBundle.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClusterTrustBundleList(writer: SerializationWriter, clusterTrustBundleList: Partial<ClusterTrustBundleList> | undefined | null = {}) : void {
    if (clusterTrustBundleList) {
        writer.writeStringValue("apiVersion", clusterTrustBundleList.apiVersion);
        writer.writeCollectionOfObjectValues<ClusterTrustBundle>("items", clusterTrustBundleList.items, serializeClusterTrustBundle);
        writer.writeStringValue("kind", clusterTrustBundleList.kind);
        writer.writeObjectValue<ListMeta>("metadata", clusterTrustBundleList.metadata, serializeListMeta);
        writer.writeAdditionalData(clusterTrustBundleList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClusterTrustBundleSpec(writer: SerializationWriter, clusterTrustBundleSpec: Partial<ClusterTrustBundleSpec> | undefined | null = {}) : void {
    if (clusterTrustBundleSpec) {
        writer.writeStringValue("signerName", clusterTrustBundleSpec.signerName);
        writer.writeStringValue("trustBundle", clusterTrustBundleSpec.trustBundle);
        writer.writeAdditionalData(clusterTrustBundleSpec.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
