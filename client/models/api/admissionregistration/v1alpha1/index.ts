/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * ApplyConfiguration defines the desired configuration values of an object.
 */
export interface ApplyConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * expression will be evaluated by CEL to create an apply configuration. ref: https://github.com/google/cel-specApply configurations are declared in CEL using object initialization. For example, this CEL expression returns an apply configuration to set a single field:Object{  spec: Object.spec{    serviceAccountName: "example"  }}Apply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.CEL expressions have access to the object types needed to create apply configurations:- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.  For example, a variable named 'foo' can be accessed as 'variables.foo'.- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the  request resource.The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
     */
    expression?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ApplyConfiguration}
 */
// @ts-ignore
export function createApplyConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApplyConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JSONPatch}
 */
// @ts-ignore
export function createJSONPatchFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJSONPatch;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MatchCondition}
 */
// @ts-ignore
export function createMatchConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMatchCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MatchResources}
 */
// @ts-ignore
export function createMatchResourcesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMatchResources;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicyBinding}
 */
// @ts-ignore
export function createMutatingAdmissionPolicyBindingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicyBinding;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicyBindingList}
 */
// @ts-ignore
export function createMutatingAdmissionPolicyBindingListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicyBindingList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicyBindingSpec}
 */
// @ts-ignore
export function createMutatingAdmissionPolicyBindingSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicyBindingSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicy}
 */
// @ts-ignore
export function createMutatingAdmissionPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicyList}
 */
// @ts-ignore
export function createMutatingAdmissionPolicyListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicyList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutatingAdmissionPolicySpec}
 */
// @ts-ignore
export function createMutatingAdmissionPolicySpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutatingAdmissionPolicySpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Mutation}
 */
// @ts-ignore
export function createMutationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamedRuleWithOperations}
 */
// @ts-ignore
export function createNamedRuleWithOperationsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamedRuleWithOperations;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ParamKind}
 */
// @ts-ignore
export function createParamKindFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoParamKind;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ParamRef}
 */
// @ts-ignore
export function createParamRefFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoParamRef;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Variable}
 */
// @ts-ignore
export function createVariableFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVariable;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoApplyConfiguration(applyConfiguration: Partial<ApplyConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { applyConfiguration.expression = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJSONPatch(jSONPatch: Partial<JSONPatch> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { jSONPatch.expression = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMatchCondition(matchCondition: Partial<MatchCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { matchCondition.expression = n.getStringValue(); },
        "name": n => { matchCondition.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMatchResources(matchResources: Partial<MatchResources> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeResourceRules": n => { matchResources.excludeResourceRules = n.getCollectionOfObjectValues<NamedRuleWithOperations>(createNamedRuleWithOperationsFromDiscriminatorValue); },
        "matchPolicy": n => { matchResources.matchPolicy = n.getStringValue(); },
        "namespaceSelector": n => { matchResources.namespaceSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "objectSelector": n => { matchResources.objectSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "resourceRules": n => { matchResources.resourceRules = n.getCollectionOfObjectValues<NamedRuleWithOperations>(createNamedRuleWithOperationsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicy(mutatingAdmissionPolicy: Partial<MutatingAdmissionPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { mutatingAdmissionPolicy.apiVersion = n.getStringValue(); },
        "kind": n => { mutatingAdmissionPolicy.kind = n.getStringValue(); },
        "metadata": n => { mutatingAdmissionPolicy.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { mutatingAdmissionPolicy.spec = n.getObjectValue<MutatingAdmissionPolicySpec>(createMutatingAdmissionPolicySpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicyBinding(mutatingAdmissionPolicyBinding: Partial<MutatingAdmissionPolicyBinding> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { mutatingAdmissionPolicyBinding.apiVersion = n.getStringValue(); },
        "kind": n => { mutatingAdmissionPolicyBinding.kind = n.getStringValue(); },
        "metadata": n => { mutatingAdmissionPolicyBinding.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { mutatingAdmissionPolicyBinding.spec = n.getObjectValue<MutatingAdmissionPolicyBindingSpec>(createMutatingAdmissionPolicyBindingSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicyBindingList(mutatingAdmissionPolicyBindingList: Partial<MutatingAdmissionPolicyBindingList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { mutatingAdmissionPolicyBindingList.apiVersion = n.getStringValue(); },
        "items": n => { mutatingAdmissionPolicyBindingList.items = n.getCollectionOfObjectValues<MutatingAdmissionPolicyBinding>(createMutatingAdmissionPolicyBindingFromDiscriminatorValue); },
        "kind": n => { mutatingAdmissionPolicyBindingList.kind = n.getStringValue(); },
        "metadata": n => { mutatingAdmissionPolicyBindingList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicyBindingSpec(mutatingAdmissionPolicyBindingSpec: Partial<MutatingAdmissionPolicyBindingSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchResources": n => { mutatingAdmissionPolicyBindingSpec.matchResources = n.getObjectValue<MatchResources>(createMatchResourcesFromDiscriminatorValue); },
        "paramRef": n => { mutatingAdmissionPolicyBindingSpec.paramRef = n.getObjectValue<ParamRef>(createParamRefFromDiscriminatorValue); },
        "policyName": n => { mutatingAdmissionPolicyBindingSpec.policyName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicyList(mutatingAdmissionPolicyList: Partial<MutatingAdmissionPolicyList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { mutatingAdmissionPolicyList.apiVersion = n.getStringValue(); },
        "items": n => { mutatingAdmissionPolicyList.items = n.getCollectionOfObjectValues<MutatingAdmissionPolicy>(createMutatingAdmissionPolicyFromDiscriminatorValue); },
        "kind": n => { mutatingAdmissionPolicyList.kind = n.getStringValue(); },
        "metadata": n => { mutatingAdmissionPolicyList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutatingAdmissionPolicySpec(mutatingAdmissionPolicySpec: Partial<MutatingAdmissionPolicySpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "failurePolicy": n => { mutatingAdmissionPolicySpec.failurePolicy = n.getStringValue(); },
        "matchConditions": n => { mutatingAdmissionPolicySpec.matchConditions = n.getCollectionOfObjectValues<MatchCondition>(createMatchConditionFromDiscriminatorValue); },
        "matchConstraints": n => { mutatingAdmissionPolicySpec.matchConstraints = n.getObjectValue<MatchResources>(createMatchResourcesFromDiscriminatorValue); },
        "mutations": n => { mutatingAdmissionPolicySpec.mutations = n.getCollectionOfObjectValues<Mutation>(createMutationFromDiscriminatorValue); },
        "paramKind": n => { mutatingAdmissionPolicySpec.paramKind = n.getObjectValue<ParamKind>(createParamKindFromDiscriminatorValue); },
        "reinvocationPolicy": n => { mutatingAdmissionPolicySpec.reinvocationPolicy = n.getStringValue(); },
        "variables": n => { mutatingAdmissionPolicySpec.variables = n.getCollectionOfObjectValues<Variable>(createVariableFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMutation(mutation: Partial<Mutation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "applyConfiguration": n => { mutation.applyConfiguration = n.getObjectValue<ApplyConfiguration>(createApplyConfigurationFromDiscriminatorValue); },
        "jsonPatch": n => { mutation.jsonPatch = n.getObjectValue<JSONPatch>(createJSONPatchFromDiscriminatorValue); },
        "patchType": n => { mutation.patchType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamedRuleWithOperations(namedRuleWithOperations: Partial<NamedRuleWithOperations> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroups": n => { namedRuleWithOperations.apiGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "apiVersions": n => { namedRuleWithOperations.apiVersions = n.getCollectionOfPrimitiveValues<string>(); },
        "operations": n => { namedRuleWithOperations.operations = n.getCollectionOfPrimitiveValues<string>(); },
        "resourceNames": n => { namedRuleWithOperations.resourceNames = n.getCollectionOfPrimitiveValues<string>(); },
        "resources": n => { namedRuleWithOperations.resources = n.getCollectionOfPrimitiveValues<string>(); },
        "scope": n => { namedRuleWithOperations.scope = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoParamKind(paramKind: Partial<ParamKind> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { paramKind.apiVersion = n.getStringValue(); },
        "kind": n => { paramKind.kind = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoParamRef(paramRef: Partial<ParamRef> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { paramRef.name = n.getStringValue(); },
        "namespace": n => { paramRef.namespace = n.getStringValue(); },
        "parameterNotFoundAction": n => { paramRef.parameterNotFoundAction = n.getStringValue(); },
        "selector": n => { paramRef.selector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVariable(variable: Partial<Variable> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { variable.expression = n.getStringValue(); },
        "name": n => { variable.name = n.getStringValue(); },
    }
}
/**
 * JSONPatch defines a JSON Patch.
 */
export interface JSONPatch extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * expression will be evaluated by CEL to create a [JSON patch](https://jsonpatch.com/). ref: https://github.com/google/cel-specexpression must return an array of JSONPatch values.For example, this CEL expression returns a JSON patch to conditionally modify a value:  [    JSONPatch{op: "test", path: "/spec/example", value: "Red"},    JSONPatch{op: "replace", path: "/spec/example", value: "Green"}  ]To define an object for the patch value, use Object types. For example:  [    JSONPatch{      op: "add",      path: "/spec/selector",      value: Object.spec.selector{matchLabels: {"environment": "test"}}    }  ]To use strings containing '/' and '~' as JSONPatch path keys, use "jsonpatch.escapeKey". For example:  [    JSONPatch{      op: "add",      path: "/metadata/labels/" + jsonpatch.escapeKey("example.com/environment"),      value: "test"    },  ]CEL expressions have access to the types needed to create JSON patches and objects:- 'JSONPatch' - CEL type of JSON Patch operations. JSONPatch has the fields 'op', 'from', 'path' and 'value'.  See [JSON patch](https://jsonpatch.com/) for more details. The 'value' field may be set to any of: string,  integer, array, map or object.  If set, the 'path' and 'from' fields must be set to a  [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901/) string, where the 'jsonpatch.escapeKey()' CEL  function may be used to escape path keys containing '/' and '~'.- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.  For example, a variable named 'foo' can be accessed as 'variables.foo'.- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the  request resource.CEL expressions have access to [Kubernetes CEL function libraries](https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries) as well as:- 'jsonpatch.escapeKey' - Performs JSONPatch key escaping. '~' and  '/' are escaped as '~0' and `~1' respectively).Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
     */
    expression?: string | null;
}
export interface MatchCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the  request resource.Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/Required.
     */
    expression?: string | null;
    /**
     * Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')Required.
     */
    name?: string | null;
}
/**
 * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
 */
export interface MatchResources extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
     */
    excludeResourceRules?: NamedRuleWithOperations[] | null;
    /**
     * matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.Defaults to "Equivalent"
     */
    matchPolicy?: string | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    namespaceSelector?: LabelSelector | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    objectSelector?: LabelSelector | null;
    /**
     * ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
     */
    resourceRules?: NamedRuleWithOperations[] | null;
}
/**
 * MutatingAdmissionPolicy describes the definition of an admission mutation policy that mutates the object coming into admission chain.
 */
export interface MutatingAdmissionPolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.
     */
    spec?: MutatingAdmissionPolicySpec | null;
}
/**
 * MutatingAdmissionPolicyBinding binds the MutatingAdmissionPolicy with parametrized resources. MutatingAdmissionPolicyBinding and the optional parameter resource together define how cluster administrators configure policies for clusters.For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding. Each evaluation is constrained by a [runtime cost budget](https://kubernetes.io/docs/reference/using-api/cel/#runtime-cost-budget).Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
 */
export interface MutatingAdmissionPolicyBinding extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * MutatingAdmissionPolicyBindingSpec is the specification of the MutatingAdmissionPolicyBinding.
     */
    spec?: MutatingAdmissionPolicyBindingSpec | null;
}
/**
 * MutatingAdmissionPolicyBindingList is a list of MutatingAdmissionPolicyBinding.
 */
export interface MutatingAdmissionPolicyBindingList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of PolicyBinding.
     */
    items?: MutatingAdmissionPolicyBinding[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * MutatingAdmissionPolicyBindingSpec is the specification of the MutatingAdmissionPolicyBinding.
 */
export interface MutatingAdmissionPolicyBindingSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
     */
    matchResources?: MatchResources | null;
    /**
     * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
     */
    paramRef?: ParamRef | null;
    /**
     * policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
     */
    policyName?: string | null;
}
/**
 * MutatingAdmissionPolicyList is a list of MutatingAdmissionPolicy.
 */
export interface MutatingAdmissionPolicyList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of ValidatingAdmissionPolicy.
     */
    items?: MutatingAdmissionPolicy[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.
 */
export interface MutatingAdmissionPolicySpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.A policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.failurePolicy does not define how validations that evaluate to false are handled.Allowed values are Ignore or Fail. Defaults to Fail.
     */
    failurePolicy?: string | null;
    /**
     * matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.The exact matching logic is (in order):  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.  3. If any matchCondition evaluates to an error (but none are FALSE):     - If failurePolicy=Fail, reject the request     - If failurePolicy=Ignore, the policy is skipped
     */
    matchConditions?: MatchCondition[] | null;
    /**
     * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
     */
    matchConstraints?: MatchResources | null;
    /**
     * mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.
     */
    mutations?: Mutation[] | null;
    /**
     * ParamKind is a tuple of Group Kind and Version.
     */
    paramKind?: ParamKind | null;
    /**
     * reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".Never: These mutations will not be called more than once per binding in a single admission evaluation.IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required.
     */
    reinvocationPolicy?: string | null;
    /**
     * variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.
     */
    variables?: Variable[] | null;
}
/**
 * Mutation specifies the CEL expression which is used to apply the Mutation.
 */
export interface Mutation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ApplyConfiguration defines the desired configuration values of an object.
     */
    applyConfiguration?: ApplyConfiguration | null;
    /**
     * JSONPatch defines a JSON Patch.
     */
    jsonPatch?: JSONPatch | null;
    /**
     * patchType indicates the patch strategy used. Allowed values are "ApplyConfiguration" and "JSONPatch". Required.
     */
    patchType?: string | null;
}
/**
 * NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
 */
export interface NamedRuleWithOperations extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
     */
    apiGroups?: string[] | null;
    /**
     * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
     */
    apiVersions?: string[] | null;
    /**
     * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
     */
    operations?: string[] | null;
    /**
     * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
     */
    resourceNames?: string[] | null;
    /**
     * Resources is a list of resources this rule applies to.For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods//*' means all subresources of pods. '*/scale' means all scale subresources. '*//*' means all resources and their subresources.If wildcard is present, the validation rule will ensure resources do not overlap with each other.Depending on the enclosing object, subresources might not be allowed. Required.
     */
    resources?: string[] | null;
    /**
     * scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
     */
    scope?: string | null;
}
/**
 * ParamKind is a tuple of Group Kind and Version.
 */
export interface ParamKind extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion is the API group version the resources belong to. In format of "group/version". Required.
     */
    apiVersion?: string | null;
    /**
     * Kind is the API kind the resources belong to. Required.
     */
    kind?: string | null;
}
/**
 * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
 */
export interface ParamRef extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `name` is the name of the resource being referenced.`name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
     */
    name?: string | null;
    /**
     * namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
     */
    namespace?: string | null;
    /**
     * `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.Allowed values are `Allow` or `Deny` Default to `Deny`
     */
    parameterNotFoundAction?: string | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    selector?: LabelSelector | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeApplyConfiguration(writer: SerializationWriter, applyConfiguration: Partial<ApplyConfiguration> | undefined | null = {}) : void {
    if (applyConfiguration) {
        writer.writeStringValue("expression", applyConfiguration.expression);
        writer.writeAdditionalData(applyConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJSONPatch(writer: SerializationWriter, jSONPatch: Partial<JSONPatch> | undefined | null = {}) : void {
    if (jSONPatch) {
        writer.writeStringValue("expression", jSONPatch.expression);
        writer.writeAdditionalData(jSONPatch.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMatchCondition(writer: SerializationWriter, matchCondition: Partial<MatchCondition> | undefined | null = {}) : void {
    if (matchCondition) {
        writer.writeStringValue("expression", matchCondition.expression);
        writer.writeStringValue("name", matchCondition.name);
        writer.writeAdditionalData(matchCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMatchResources(writer: SerializationWriter, matchResources: Partial<MatchResources> | undefined | null = {}) : void {
    if (matchResources) {
        writer.writeCollectionOfObjectValues<NamedRuleWithOperations>("excludeResourceRules", matchResources.excludeResourceRules, serializeNamedRuleWithOperations);
        writer.writeStringValue("matchPolicy", matchResources.matchPolicy);
        writer.writeObjectValue<LabelSelector>("namespaceSelector", matchResources.namespaceSelector, serializeLabelSelector);
        writer.writeObjectValue<LabelSelector>("objectSelector", matchResources.objectSelector, serializeLabelSelector);
        writer.writeCollectionOfObjectValues<NamedRuleWithOperations>("resourceRules", matchResources.resourceRules, serializeNamedRuleWithOperations);
        writer.writeAdditionalData(matchResources.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicy(writer: SerializationWriter, mutatingAdmissionPolicy: Partial<MutatingAdmissionPolicy> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicy) {
        writer.writeStringValue("apiVersion", mutatingAdmissionPolicy.apiVersion);
        writer.writeStringValue("kind", mutatingAdmissionPolicy.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", mutatingAdmissionPolicy.metadata, serializeObjectMeta);
        writer.writeObjectValue<MutatingAdmissionPolicySpec>("spec", mutatingAdmissionPolicy.spec, serializeMutatingAdmissionPolicySpec);
        writer.writeAdditionalData(mutatingAdmissionPolicy.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicyBinding(writer: SerializationWriter, mutatingAdmissionPolicyBinding: Partial<MutatingAdmissionPolicyBinding> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicyBinding) {
        writer.writeStringValue("apiVersion", mutatingAdmissionPolicyBinding.apiVersion);
        writer.writeStringValue("kind", mutatingAdmissionPolicyBinding.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", mutatingAdmissionPolicyBinding.metadata, serializeObjectMeta);
        writer.writeObjectValue<MutatingAdmissionPolicyBindingSpec>("spec", mutatingAdmissionPolicyBinding.spec, serializeMutatingAdmissionPolicyBindingSpec);
        writer.writeAdditionalData(mutatingAdmissionPolicyBinding.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicyBindingList(writer: SerializationWriter, mutatingAdmissionPolicyBindingList: Partial<MutatingAdmissionPolicyBindingList> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicyBindingList) {
        writer.writeStringValue("apiVersion", mutatingAdmissionPolicyBindingList.apiVersion);
        writer.writeCollectionOfObjectValues<MutatingAdmissionPolicyBinding>("items", mutatingAdmissionPolicyBindingList.items, serializeMutatingAdmissionPolicyBinding);
        writer.writeStringValue("kind", mutatingAdmissionPolicyBindingList.kind);
        writer.writeObjectValue<ListMeta>("metadata", mutatingAdmissionPolicyBindingList.metadata, serializeListMeta);
        writer.writeAdditionalData(mutatingAdmissionPolicyBindingList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicyBindingSpec(writer: SerializationWriter, mutatingAdmissionPolicyBindingSpec: Partial<MutatingAdmissionPolicyBindingSpec> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicyBindingSpec) {
        writer.writeObjectValue<MatchResources>("matchResources", mutatingAdmissionPolicyBindingSpec.matchResources, serializeMatchResources);
        writer.writeObjectValue<ParamRef>("paramRef", mutatingAdmissionPolicyBindingSpec.paramRef, serializeParamRef);
        writer.writeStringValue("policyName", mutatingAdmissionPolicyBindingSpec.policyName);
        writer.writeAdditionalData(mutatingAdmissionPolicyBindingSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicyList(writer: SerializationWriter, mutatingAdmissionPolicyList: Partial<MutatingAdmissionPolicyList> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicyList) {
        writer.writeStringValue("apiVersion", mutatingAdmissionPolicyList.apiVersion);
        writer.writeCollectionOfObjectValues<MutatingAdmissionPolicy>("items", mutatingAdmissionPolicyList.items, serializeMutatingAdmissionPolicy);
        writer.writeStringValue("kind", mutatingAdmissionPolicyList.kind);
        writer.writeObjectValue<ListMeta>("metadata", mutatingAdmissionPolicyList.metadata, serializeListMeta);
        writer.writeAdditionalData(mutatingAdmissionPolicyList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutatingAdmissionPolicySpec(writer: SerializationWriter, mutatingAdmissionPolicySpec: Partial<MutatingAdmissionPolicySpec> | undefined | null = {}) : void {
    if (mutatingAdmissionPolicySpec) {
        writer.writeStringValue("failurePolicy", mutatingAdmissionPolicySpec.failurePolicy);
        writer.writeCollectionOfObjectValues<MatchCondition>("matchConditions", mutatingAdmissionPolicySpec.matchConditions, serializeMatchCondition);
        writer.writeObjectValue<MatchResources>("matchConstraints", mutatingAdmissionPolicySpec.matchConstraints, serializeMatchResources);
        writer.writeCollectionOfObjectValues<Mutation>("mutations", mutatingAdmissionPolicySpec.mutations, serializeMutation);
        writer.writeObjectValue<ParamKind>("paramKind", mutatingAdmissionPolicySpec.paramKind, serializeParamKind);
        writer.writeStringValue("reinvocationPolicy", mutatingAdmissionPolicySpec.reinvocationPolicy);
        writer.writeCollectionOfObjectValues<Variable>("variables", mutatingAdmissionPolicySpec.variables, serializeVariable);
        writer.writeAdditionalData(mutatingAdmissionPolicySpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMutation(writer: SerializationWriter, mutation: Partial<Mutation> | undefined | null = {}) : void {
    if (mutation) {
        writer.writeObjectValue<ApplyConfiguration>("applyConfiguration", mutation.applyConfiguration, serializeApplyConfiguration);
        writer.writeObjectValue<JSONPatch>("jsonPatch", mutation.jsonPatch, serializeJSONPatch);
        writer.writeStringValue("patchType", mutation.patchType);
        writer.writeAdditionalData(mutation.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamedRuleWithOperations(writer: SerializationWriter, namedRuleWithOperations: Partial<NamedRuleWithOperations> | undefined | null = {}) : void {
    if (namedRuleWithOperations) {
        writer.writeCollectionOfPrimitiveValues<string>("apiGroups", namedRuleWithOperations.apiGroups);
        writer.writeCollectionOfPrimitiveValues<string>("apiVersions", namedRuleWithOperations.apiVersions);
        writer.writeCollectionOfPrimitiveValues<string>("operations", namedRuleWithOperations.operations);
        writer.writeCollectionOfPrimitiveValues<string>("resourceNames", namedRuleWithOperations.resourceNames);
        writer.writeCollectionOfPrimitiveValues<string>("resources", namedRuleWithOperations.resources);
        writer.writeStringValue("scope", namedRuleWithOperations.scope);
        writer.writeAdditionalData(namedRuleWithOperations.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeParamKind(writer: SerializationWriter, paramKind: Partial<ParamKind> | undefined | null = {}) : void {
    if (paramKind) {
        writer.writeStringValue("apiVersion", paramKind.apiVersion);
        writer.writeStringValue("kind", paramKind.kind);
        writer.writeAdditionalData(paramKind.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeParamRef(writer: SerializationWriter, paramRef: Partial<ParamRef> | undefined | null = {}) : void {
    if (paramRef) {
        writer.writeStringValue("name", paramRef.name);
        writer.writeStringValue("namespace", paramRef.namespace);
        writer.writeStringValue("parameterNotFoundAction", paramRef.parameterNotFoundAction);
        writer.writeObjectValue<LabelSelector>("selector", paramRef.selector, serializeLabelSelector);
        writer.writeAdditionalData(paramRef.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVariable(writer: SerializationWriter, variable: Partial<Variable> | undefined | null = {}) : void {
    if (variable) {
        writer.writeStringValue("expression", variable.expression);
        writer.writeStringValue("name", variable.name);
        writer.writeAdditionalData(variable.additionalData);
    }
}
/**
 * Variable is the definition of a variable that is used for composition.
 */
export interface Variable extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
     */
    expression?: string | null;
    /**
     * Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
     */
    name?: string | null;
}
/* tslint:enable */
/* eslint-enable */
