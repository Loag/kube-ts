/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConditionFromDiscriminatorValue, createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeCondition, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type Condition, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Affinity is a group of affinity scheduling rules.
 */
export interface Affinity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Node affinity is a group of node affinity scheduling rules.
     */
    nodeAffinity?: NodeAffinity | null;
    /**
     * Pod affinity is a group of inter pod affinity scheduling rules.
     */
    podAffinity?: PodAffinity | null;
    /**
     * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
     */
    podAntiAffinity?: PodAntiAffinity | null;
}
/**
 * AppArmorProfile defines a pod or container's AppArmor settings.
 */
export interface AppArmorProfile extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
     */
    localhostProfile?: string | null;
    /**
     * type indicates which kind of AppArmor profile will be applied. Valid options are:  Localhost - a profile pre-loaded on the node.  RuntimeDefault - the container runtime's default profile.  Unconfined - no AppArmor enforcement.
     */
    type?: string | null;
}
/**
 * AttachedVolume describes a volume attached to a node
 */
export interface AttachedVolume extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * DevicePath represents the device path where the volume should be available
     */
    devicePath?: string | null;
    /**
     * Name of the attached volume
     */
    name?: string | null;
}
/**
 * Represents a Persistent Disk resource in AWS.An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
 */
export interface AWSElasticBlockStoreVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string | null;
    /**
     * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number | null;
    /**
     * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean | null;
    /**
     * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeID?: string | null;
}
/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 */
export interface AzureDiskVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * cachingMode is the Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode?: string | null;
    /**
     * diskName is the Name of the data disk in the blob storage
     */
    diskName?: string | null;
    /**
     * diskURI is the URI of data disk in the blob storage
     */
    diskURI?: string | null;
    /**
     * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     */
    kind?: string | null;
    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
}
/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 */
export interface AzureFilePersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * secretName is the name of secret that contains Azure Storage Account Name and Key
     */
    secretName?: string | null;
    /**
     * secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
     */
    secretNamespace?: string | null;
    /**
     * shareName is the azure Share Name
     */
    shareName?: string | null;
}
/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 */
export interface AzureFileVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * secretName is the  name of secret that contains Azure Storage Account Name and Key
     */
    secretName?: string | null;
    /**
     * shareName is the azure share Name
     */
    shareName?: string | null;
}
/**
 * Binding ties one object to another; for example, a pod is bound to a node by a scheduler.
 */
export interface Binding extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    target?: ObjectReference | null;
}
/**
 * Adds and removes POSIX capabilities from running containers.
 */
export interface Capabilities extends AdditionalDataHolder, Parsable {
    /**
     * Added capabilities
     */
    add?: string[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Removed capabilities
     */
    drop?: string[] | null;
}
/**
 * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
 */
export interface CephFSPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors?: string[] | null;
    /**
     * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string | null;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean | null;
    /**
     * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
    /**
     * user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string | null;
}
/**
 * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
 */
export interface CephFSVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors?: string[] | null;
    /**
     * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string | null;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean | null;
    /**
     * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string | null;
}
/**
 * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
 */
export interface CinderPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string | null;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
    /**
     * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeID?: string | null;
}
/**
 * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
 */
export interface CinderVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string | null;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeID?: string | null;
}
/**
 * ClientIPConfig represents the configurations of Client IP based session affinity.
 */
export interface ClientIPConfig extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
     */
    timeoutSeconds?: number | null;
}
/**
 * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
 */
export interface ClusterTrustBundleProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    labelSelector?: LabelSelector | null;
    /**
     * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
     */
    name?: string | null;
    /**
     * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
     */
    optional?: boolean | null;
    /**
     * Relative path from the volume root to write the bundle.
     */
    path?: string | null;
    /**
     * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
     */
    signerName?: string | null;
}
/**
 * Information about the condition of a component.
 */
export interface ComponentCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Condition error code for a component. For example, a health check error code.
     */
    errorEscaped?: string | null;
    /**
     * Message about the condition for a component. For example, information about a health check.
     */
    message?: string | null;
    /**
     * Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
     */
    status?: string | null;
    /**
     * Type of condition for a component. Valid value: "Healthy"
     */
    type?: string | null;
}
/**
 * ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
 */
export interface ComponentStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of component conditions observed
     */
    conditions?: ComponentCondition[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
}
/**
 * Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
 */
export interface ComponentStatusList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of ComponentStatus objects.
     */
    items?: ComponentStatus[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ConfigMap holds configuration data for pods to consume.
 */
export interface ConfigMap extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
     */
    binaryData?: ConfigMap_binaryData | null;
    /**
     * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
     */
    data?: ConfigMap_data | null;
    /**
     * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     */
    immutable?: boolean | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
}
/**
 * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
 */
export interface ConfigMap_binaryData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
 */
export interface ConfigMap_data extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
 */
export interface ConfigMapEnvSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean | null;
}
/**
 * Selects a key from a ConfigMap.
 */
export interface ConfigMapKeySelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The key to select.
     */
    key?: string | null;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Specify whether the ConfigMap or its key must be defined
     */
    optional?: boolean | null;
}
/**
 * ConfigMapList is a resource containing a list of ConfigMap objects.
 */
export interface ConfigMapList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of ConfigMaps.
     */
    items?: ConfigMap[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
 */
export interface ConfigMapNodeConfigSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     */
    kubeletConfigKey?: string | null;
    /**
     * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     */
    name?: string | null;
    /**
     * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     */
    namespace?: string | null;
    /**
     * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    resourceVersion?: string | null;
    /**
     * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    uid?: string | null;
}
/**
 * Adapts a ConfigMap into a projected volume.The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
 */
export interface ConfigMapProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: KeyToPath[] | null;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * optional specify whether the ConfigMap or its keys must be defined
     */
    optional?: boolean | null;
}
/**
 * Adapts a ConfigMap into a volume.The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
 */
export interface ConfigMapVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: number | null;
    /**
     * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: KeyToPath[] | null;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * optional specify whether the ConfigMap or its keys must be defined
     */
    optional?: boolean | null;
}
/**
 * A single application container that you want to run within a pod.
 */
export interface Container extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[] | null;
    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    command?: string[] | null;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    env?: EnvVar[] | null;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFrom?: EnvFromSource[] | null;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     */
    image?: string | null;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     */
    imagePullPolicy?: string | null;
    /**
     * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
     */
    lifecycle?: Lifecycle | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    livenessProbe?: Probe | null;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name?: string | null;
    /**
     * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
     */
    ports?: ContainerPort[] | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    readinessProbe?: Probe | null;
    /**
     * Resources resize policy for the container.
     */
    resizePolicy?: ContainerResizePolicy[] | null;
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    resources?: ResourceRequirements | null;
    /**
     * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
     */
    restartPolicy?: string | null;
    /**
     * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
     */
    securityContext?: SecurityContext | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    startupProbe?: Probe | null;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     */
    stdin?: boolean | null;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     */
    stdinOnce?: boolean | null;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string | null;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy?: string | null;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     */
    tty?: boolean | null;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     */
    volumeDevices?: VolumeDevice[] | null;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: VolumeMount[] | null;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string | null;
}
/**
 * Describe a container image
 */
export interface ContainerImage extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
     */
    names?: string[] | null;
    /**
     * The size of the image in bytes.
     */
    sizeBytes?: number | null;
}
/**
 * ContainerPort represents a network port in a single container.
 */
export interface ContainerPort extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort?: number | null;
    /**
     * What host IP to bind the external port to.
     */
    hostIP?: string | null;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number | null;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
     */
    name?: string | null;
    /**
     * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
     */
    protocol?: string | null;
}
/**
 * ContainerResizePolicy represents resource resize policy for the container.
 */
export interface ContainerResizePolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
     */
    resourceName?: string | null;
    /**
     * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
     */
    restartPolicy?: string | null;
}
/**
 * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
 */
export interface ContainerState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ContainerStateRunning is a running state of a container.
     */
    running?: ContainerStateRunning | null;
    /**
     * ContainerStateTerminated is a terminated state of a container.
     */
    terminated?: ContainerStateTerminated | null;
    /**
     * ContainerStateWaiting is a waiting state of a container.
     */
    waiting?: ContainerStateWaiting | null;
}
/**
 * ContainerStateRunning is a running state of a container.
 */
export interface ContainerStateRunning extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    startedAt?: Date | null;
}
/**
 * ContainerStateTerminated is a terminated state of a container.
 */
export interface ContainerStateTerminated extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Container's ID in the format '<type>://<container_id>'
     */
    containerID?: string | null;
    /**
     * Exit status from the last termination of the container
     */
    exitCode?: number | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    finishedAt?: Date | null;
    /**
     * Message regarding the last termination of the container
     */
    message?: string | null;
    /**
     * (brief) reason from the last termination of the container
     */
    reason?: string | null;
    /**
     * Signal from the last termination of the container
     */
    signal?: number | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    startedAt?: Date | null;
}
/**
 * ContainerStateWaiting is a waiting state of a container.
 */
export interface ContainerStateWaiting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Message regarding why the container is not yet running.
     */
    message?: string | null;
    /**
     * (brief) reason the container is not yet running.
     */
    reason?: string | null;
}
/**
 * ContainerStatus contains details for the current status of this container.
 */
export interface ContainerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
     */
    allocatedResources?: ContainerStatus_allocatedResources | null;
    /**
     * AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
     */
    allocatedResourcesStatus?: ResourceStatus[] | null;
    /**
     * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
     */
    containerID?: string | null;
    /**
     * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
     */
    image?: string | null;
    /**
     * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
     */
    imageID?: string | null;
    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    lastState?: ContainerState | null;
    /**
     * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
     */
    name?: string | null;
    /**
     * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).The value is typically used to determine whether a container is ready to accept traffic.
     */
    ready?: boolean | null;
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    resources?: ResourceRequirements | null;
    /**
     * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
     */
    restartCount?: number | null;
    /**
     * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
     */
    started?: boolean | null;
    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    state?: ContainerState | null;
    /**
     * ContainerUser represents user identity information
     */
    user?: ContainerUser | null;
    /**
     * Status of volume mounts.
     */
    volumeMounts?: VolumeMountStatus[] | null;
}
/**
 * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
 */
export interface ContainerStatus_allocatedResources extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ContainerUser represents user identity information
 */
export interface ContainerUser extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * LinuxContainerUser represents user identity information in Linux containers
     */
    linux?: LinuxContainerUser | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Affinity}
 */
// @ts-ignore
export function createAffinityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAffinity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AppArmorProfile}
 */
// @ts-ignore
export function createAppArmorProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAppArmorProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachedVolume}
 */
// @ts-ignore
export function createAttachedVolumeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachedVolume;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AWSElasticBlockStoreVolumeSource}
 */
// @ts-ignore
export function createAWSElasticBlockStoreVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAWSElasticBlockStoreVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureDiskVolumeSource}
 */
// @ts-ignore
export function createAzureDiskVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureDiskVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureFilePersistentVolumeSource}
 */
// @ts-ignore
export function createAzureFilePersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureFilePersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureFileVolumeSource}
 */
// @ts-ignore
export function createAzureFileVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureFileVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Binding}
 */
// @ts-ignore
export function createBindingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBinding;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Capabilities}
 */
// @ts-ignore
export function createCapabilitiesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCapabilities;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CephFSPersistentVolumeSource}
 */
// @ts-ignore
export function createCephFSPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCephFSPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CephFSVolumeSource}
 */
// @ts-ignore
export function createCephFSVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCephFSVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CinderPersistentVolumeSource}
 */
// @ts-ignore
export function createCinderPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCinderPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CinderVolumeSource}
 */
// @ts-ignore
export function createCinderVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCinderVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClientIPConfig}
 */
// @ts-ignore
export function createClientIPConfigFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClientIPConfig;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClusterTrustBundleProjection}
 */
// @ts-ignore
export function createClusterTrustBundleProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClusterTrustBundleProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComponentCondition}
 */
// @ts-ignore
export function createComponentConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComponentCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComponentStatus}
 */
// @ts-ignore
export function createComponentStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComponentStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComponentStatusList}
 */
// @ts-ignore
export function createComponentStatusListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComponentStatusList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMap_binaryData}
 */
// @ts-ignore
export function createConfigMap_binaryDataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMap_binaryData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMap_data}
 */
// @ts-ignore
export function createConfigMap_dataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMap_data;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapEnvSource}
 */
// @ts-ignore
export function createConfigMapEnvSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapEnvSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMap}
 */
// @ts-ignore
export function createConfigMapFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMap;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapKeySelector}
 */
// @ts-ignore
export function createConfigMapKeySelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapKeySelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapList}
 */
// @ts-ignore
export function createConfigMapListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapNodeConfigSource}
 */
// @ts-ignore
export function createConfigMapNodeConfigSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapNodeConfigSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapProjection}
 */
// @ts-ignore
export function createConfigMapProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigMapVolumeSource}
 */
// @ts-ignore
export function createConfigMapVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigMapVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Container}
 */
// @ts-ignore
export function createContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainer;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerImage}
 */
// @ts-ignore
export function createContainerImageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerImage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerPort}
 */
// @ts-ignore
export function createContainerPortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerPort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerResizePolicy}
 */
// @ts-ignore
export function createContainerResizePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerResizePolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerState}
 */
// @ts-ignore
export function createContainerStateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerState;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerStateRunning}
 */
// @ts-ignore
export function createContainerStateRunningFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerStateRunning;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerStateTerminated}
 */
// @ts-ignore
export function createContainerStateTerminatedFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerStateTerminated;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerStateWaiting}
 */
// @ts-ignore
export function createContainerStateWaitingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerStateWaiting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerStatus_allocatedResources}
 */
// @ts-ignore
export function createContainerStatus_allocatedResourcesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerStatus_allocatedResources;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerStatus}
 */
// @ts-ignore
export function createContainerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerUser}
 */
// @ts-ignore
export function createContainerUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIPersistentVolumeSource_volumeAttributes}
 */
// @ts-ignore
export function createCSIPersistentVolumeSource_volumeAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIPersistentVolumeSource_volumeAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIPersistentVolumeSource}
 */
// @ts-ignore
export function createCSIPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIVolumeSource_volumeAttributes}
 */
// @ts-ignore
export function createCSIVolumeSource_volumeAttributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIVolumeSource_volumeAttributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CSIVolumeSource}
 */
// @ts-ignore
export function createCSIVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCSIVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DaemonEndpoint}
 */
// @ts-ignore
export function createDaemonEndpointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDaemonEndpoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DownwardAPIProjection}
 */
// @ts-ignore
export function createDownwardAPIProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDownwardAPIProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DownwardAPIVolumeFile}
 */
// @ts-ignore
export function createDownwardAPIVolumeFileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDownwardAPIVolumeFile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DownwardAPIVolumeSource}
 */
// @ts-ignore
export function createDownwardAPIVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDownwardAPIVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmptyDirVolumeSource}
 */
// @ts-ignore
export function createEmptyDirVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmptyDirVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointAddress}
 */
// @ts-ignore
export function createEndpointAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointPort}
 */
// @ts-ignore
export function createEndpointPortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointPort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Endpoints}
 */
// @ts-ignore
export function createEndpointsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpoints;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointsList}
 */
// @ts-ignore
export function createEndpointsListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointsList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointSubset}
 */
// @ts-ignore
export function createEndpointSubsetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointSubset;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnvFromSource}
 */
// @ts-ignore
export function createEnvFromSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnvFromSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnvVar}
 */
// @ts-ignore
export function createEnvVarFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnvVar;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnvVarSource}
 */
// @ts-ignore
export function createEnvVarSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnvVarSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EphemeralContainer}
 */
// @ts-ignore
export function createEphemeralContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEphemeralContainer;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EphemeralVolumeSource}
 */
// @ts-ignore
export function createEphemeralVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEphemeralVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Event}
 */
// @ts-ignore
export function createEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventList}
 */
// @ts-ignore
export function createEventListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventSeries}
 */
// @ts-ignore
export function createEventSeriesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventSeries;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventSource}
 */
// @ts-ignore
export function createEventSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExecAction}
 */
// @ts-ignore
export function createExecActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExecAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FCVolumeSource}
 */
// @ts-ignore
export function createFCVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFCVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlexPersistentVolumeSource_options}
 */
// @ts-ignore
export function createFlexPersistentVolumeSource_optionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlexPersistentVolumeSource_options;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlexPersistentVolumeSource}
 */
// @ts-ignore
export function createFlexPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlexPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlexVolumeSource_options}
 */
// @ts-ignore
export function createFlexVolumeSource_optionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlexVolumeSource_options;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlexVolumeSource}
 */
// @ts-ignore
export function createFlexVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlexVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlockerVolumeSource}
 */
// @ts-ignore
export function createFlockerVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlockerVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GCEPersistentDiskVolumeSource}
 */
// @ts-ignore
export function createGCEPersistentDiskVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGCEPersistentDiskVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GitRepoVolumeSource}
 */
// @ts-ignore
export function createGitRepoVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGitRepoVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GlusterfsPersistentVolumeSource}
 */
// @ts-ignore
export function createGlusterfsPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGlusterfsPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GlusterfsVolumeSource}
 */
// @ts-ignore
export function createGlusterfsVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGlusterfsVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GRPCAction}
 */
// @ts-ignore
export function createGRPCActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGRPCAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HostAlias}
 */
// @ts-ignore
export function createHostAliasFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHostAlias;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HostIP}
 */
// @ts-ignore
export function createHostIPFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHostIP;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HostPathVolumeSource}
 */
// @ts-ignore
export function createHostPathVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHostPathVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HTTPGetAction}
 */
// @ts-ignore
export function createHTTPGetActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHTTPGetAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HTTPHeader}
 */
// @ts-ignore
export function createHTTPHeaderFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHTTPHeader;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImageVolumeSource}
 */
// @ts-ignore
export function createImageVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImageVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ISCSIPersistentVolumeSource}
 */
// @ts-ignore
export function createISCSIPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoISCSIPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ISCSIVolumeSource}
 */
// @ts-ignore
export function createISCSIVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoISCSIVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyToPath}
 */
// @ts-ignore
export function createKeyToPathFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyToPath;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Lifecycle}
 */
// @ts-ignore
export function createLifecycleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLifecycle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LifecycleHandler}
 */
// @ts-ignore
export function createLifecycleHandlerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLifecycleHandler;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRange}
 */
// @ts-ignore
export function createLimitRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRange;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem_default}
 */
// @ts-ignore
export function createLimitRangeItem_defaultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem_default;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem_defaultRequest}
 */
// @ts-ignore
export function createLimitRangeItem_defaultRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem_defaultRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem_max}
 */
// @ts-ignore
export function createLimitRangeItem_maxFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem_max;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem_maxLimitRequestRatio}
 */
// @ts-ignore
export function createLimitRangeItem_maxLimitRequestRatioFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem_maxLimitRequestRatio;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem_min}
 */
// @ts-ignore
export function createLimitRangeItem_minFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem_min;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeItem}
 */
// @ts-ignore
export function createLimitRangeItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeList}
 */
// @ts-ignore
export function createLimitRangeListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitRangeSpec}
 */
// @ts-ignore
export function createLimitRangeSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitRangeSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LinuxContainerUser}
 */
// @ts-ignore
export function createLinuxContainerUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLinuxContainerUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoadBalancerIngress}
 */
// @ts-ignore
export function createLoadBalancerIngressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoadBalancerIngress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoadBalancerStatus}
 */
// @ts-ignore
export function createLoadBalancerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoadBalancerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocalObjectReference}
 */
// @ts-ignore
export function createLocalObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocalObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocalVolumeSource}
 */
// @ts-ignore
export function createLocalVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocalVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ModifyVolumeStatus}
 */
// @ts-ignore
export function createModifyVolumeStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoModifyVolumeStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespaceCondition}
 */
// @ts-ignore
export function createNamespaceConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespaceCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Namespace}
 */
// @ts-ignore
export function createNamespaceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespace;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespaceList}
 */
// @ts-ignore
export function createNamespaceListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespaceList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespaceSpec}
 */
// @ts-ignore
export function createNamespaceSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespaceSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespaceStatus}
 */
// @ts-ignore
export function createNamespaceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespaceStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NFSVolumeSource}
 */
// @ts-ignore
export function createNFSVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNFSVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeAddress}
 */
// @ts-ignore
export function createNodeAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeAffinity}
 */
// @ts-ignore
export function createNodeAffinityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeAffinity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeCondition}
 */
// @ts-ignore
export function createNodeConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeConfigSource}
 */
// @ts-ignore
export function createNodeConfigSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeConfigSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeConfigStatus}
 */
// @ts-ignore
export function createNodeConfigStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeConfigStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeDaemonEndpoints}
 */
// @ts-ignore
export function createNodeDaemonEndpointsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeDaemonEndpoints;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeFeatures}
 */
// @ts-ignore
export function createNodeFeaturesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeFeatures;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Node}
 */
// @ts-ignore
export function createNodeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNode;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeList}
 */
// @ts-ignore
export function createNodeListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeRuntimeHandlerFeatures}
 */
// @ts-ignore
export function createNodeRuntimeHandlerFeaturesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeRuntimeHandlerFeatures;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeRuntimeHandler}
 */
// @ts-ignore
export function createNodeRuntimeHandlerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeRuntimeHandler;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeSelector}
 */
// @ts-ignore
export function createNodeSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeSelectorRequirement}
 */
// @ts-ignore
export function createNodeSelectorRequirementFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeSelectorRequirement;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeSelectorTerm}
 */
// @ts-ignore
export function createNodeSelectorTermFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeSelectorTerm;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeSpec}
 */
// @ts-ignore
export function createNodeSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeStatus_allocatable}
 */
// @ts-ignore
export function createNodeStatus_allocatableFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeStatus_allocatable;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeStatus_capacity}
 */
// @ts-ignore
export function createNodeStatus_capacityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeStatus_capacity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeStatus}
 */
// @ts-ignore
export function createNodeStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NodeSystemInfo}
 */
// @ts-ignore
export function createNodeSystemInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNodeSystemInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectFieldSelector}
 */
// @ts-ignore
export function createObjectFieldSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectFieldSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectReference}
 */
// @ts-ignore
export function createObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimCondition}
 */
// @ts-ignore
export function createPersistentVolumeClaimConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaim}
 */
// @ts-ignore
export function createPersistentVolumeClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaim;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimList}
 */
// @ts-ignore
export function createPersistentVolumeClaimListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimSpec}
 */
// @ts-ignore
export function createPersistentVolumeClaimSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimStatus_allocatedResources}
 */
// @ts-ignore
export function createPersistentVolumeClaimStatus_allocatedResourcesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimStatus_allocatedResources;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimStatus_allocatedResourceStatuses}
 */
// @ts-ignore
export function createPersistentVolumeClaimStatus_allocatedResourceStatusesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimStatus_allocatedResourceStatuses;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimStatus_capacity}
 */
// @ts-ignore
export function createPersistentVolumeClaimStatus_capacityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimStatus_capacity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimStatus}
 */
// @ts-ignore
export function createPersistentVolumeClaimStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimTemplate}
 */
// @ts-ignore
export function createPersistentVolumeClaimTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeClaimVolumeSource}
 */
// @ts-ignore
export function createPersistentVolumeClaimVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeClaimVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolume}
 */
// @ts-ignore
export function createPersistentVolumeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolume;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeList}
 */
// @ts-ignore
export function createPersistentVolumeListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeSpec_capacity}
 */
// @ts-ignore
export function createPersistentVolumeSpec_capacityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeSpec_capacity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeSpec}
 */
// @ts-ignore
export function createPersistentVolumeSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PersistentVolumeStatus}
 */
// @ts-ignore
export function createPersistentVolumeStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPersistentVolumeStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PhotonPersistentDiskVolumeSource}
 */
// @ts-ignore
export function createPhotonPersistentDiskVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPhotonPersistentDiskVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodAffinity}
 */
// @ts-ignore
export function createPodAffinityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodAffinity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodAffinityTerm}
 */
// @ts-ignore
export function createPodAffinityTermFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodAffinityTerm;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodAntiAffinity}
 */
// @ts-ignore
export function createPodAntiAffinityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodAntiAffinity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodCondition}
 */
// @ts-ignore
export function createPodConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDNSConfig}
 */
// @ts-ignore
export function createPodDNSConfigFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDNSConfig;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDNSConfigOption}
 */
// @ts-ignore
export function createPodDNSConfigOptionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDNSConfigOption;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Pod}
 */
// @ts-ignore
export function createPodFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPod;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodIP}
 */
// @ts-ignore
export function createPodIPFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodIP;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodList}
 */
// @ts-ignore
export function createPodListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodOS}
 */
// @ts-ignore
export function createPodOSFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodOS;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodReadinessGate}
 */
// @ts-ignore
export function createPodReadinessGateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodReadinessGate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodResourceClaim}
 */
// @ts-ignore
export function createPodResourceClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodResourceClaim;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodResourceClaimStatus}
 */
// @ts-ignore
export function createPodResourceClaimStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodResourceClaimStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodSchedulingGate}
 */
// @ts-ignore
export function createPodSchedulingGateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodSchedulingGate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodSecurityContext}
 */
// @ts-ignore
export function createPodSecurityContextFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodSecurityContext;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodSpec_nodeSelector}
 */
// @ts-ignore
export function createPodSpec_nodeSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodSpec_nodeSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodSpec_overhead}
 */
// @ts-ignore
export function createPodSpec_overheadFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodSpec_overhead;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodSpec}
 */
// @ts-ignore
export function createPodSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodStatus}
 */
// @ts-ignore
export function createPodStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodTemplate}
 */
// @ts-ignore
export function createPodTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodTemplateList}
 */
// @ts-ignore
export function createPodTemplateListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodTemplateList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodTemplateSpec}
 */
// @ts-ignore
export function createPodTemplateSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodTemplateSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PortStatus}
 */
// @ts-ignore
export function createPortStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPortStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PortworxVolumeSource}
 */
// @ts-ignore
export function createPortworxVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPortworxVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PreferredSchedulingTerm}
 */
// @ts-ignore
export function createPreferredSchedulingTermFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreferredSchedulingTerm;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Probe}
 */
// @ts-ignore
export function createProbeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProbe;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectedVolumeSource}
 */
// @ts-ignore
export function createProjectedVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectedVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QuobyteVolumeSource}
 */
// @ts-ignore
export function createQuobyteVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQuobyteVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RBDPersistentVolumeSource}
 */
// @ts-ignore
export function createRBDPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRBDPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RBDVolumeSource}
 */
// @ts-ignore
export function createRBDVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRBDVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationControllerCondition}
 */
// @ts-ignore
export function createReplicationControllerConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationControllerCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationController}
 */
// @ts-ignore
export function createReplicationControllerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationController;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationControllerList}
 */
// @ts-ignore
export function createReplicationControllerListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationControllerList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationControllerSpec_selector}
 */
// @ts-ignore
export function createReplicationControllerSpec_selectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationControllerSpec_selector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationControllerSpec}
 */
// @ts-ignore
export function createReplicationControllerSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationControllerSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicationControllerStatus}
 */
// @ts-ignore
export function createReplicationControllerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicationControllerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaim}
 */
// @ts-ignore
export function createResourceClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaim;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceFieldSelector}
 */
// @ts-ignore
export function createResourceFieldSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceFieldSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceHealth}
 */
// @ts-ignore
export function createResourceHealthFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceHealth;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuota}
 */
// @ts-ignore
export function createResourceQuotaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuota;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaList}
 */
// @ts-ignore
export function createResourceQuotaListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaSpec_hard}
 */
// @ts-ignore
export function createResourceQuotaSpec_hardFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaSpec_hard;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaSpec}
 */
// @ts-ignore
export function createResourceQuotaSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaStatus_hard}
 */
// @ts-ignore
export function createResourceQuotaStatus_hardFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaStatus_hard;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaStatus_used}
 */
// @ts-ignore
export function createResourceQuotaStatus_usedFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaStatus_used;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceQuotaStatus}
 */
// @ts-ignore
export function createResourceQuotaStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceQuotaStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceRequirements_limits}
 */
// @ts-ignore
export function createResourceRequirements_limitsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceRequirements_limits;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceRequirements_requests}
 */
// @ts-ignore
export function createResourceRequirements_requestsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceRequirements_requests;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceRequirements}
 */
// @ts-ignore
export function createResourceRequirementsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceRequirements;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceStatus}
 */
// @ts-ignore
export function createResourceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScaleIOPersistentVolumeSource}
 */
// @ts-ignore
export function createScaleIOPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScaleIOPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScaleIOVolumeSource}
 */
// @ts-ignore
export function createScaleIOVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScaleIOVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScopedResourceSelectorRequirement}
 */
// @ts-ignore
export function createScopedResourceSelectorRequirementFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScopedResourceSelectorRequirement;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScopeSelector}
 */
// @ts-ignore
export function createScopeSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScopeSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SeccompProfile}
 */
// @ts-ignore
export function createSeccompProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSeccompProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Secret_data}
 */
// @ts-ignore
export function createSecret_dataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecret_data;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Secret_stringData}
 */
// @ts-ignore
export function createSecret_stringDataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecret_stringData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretEnvSource}
 */
// @ts-ignore
export function createSecretEnvSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretEnvSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Secret}
 */
// @ts-ignore
export function createSecretFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecret;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretKeySelector}
 */
// @ts-ignore
export function createSecretKeySelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretKeySelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretList}
 */
// @ts-ignore
export function createSecretListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretProjection}
 */
// @ts-ignore
export function createSecretProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretReference}
 */
// @ts-ignore
export function createSecretReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecretVolumeSource}
 */
// @ts-ignore
export function createSecretVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecretVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SecurityContext}
 */
// @ts-ignore
export function createSecurityContextFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSecurityContext;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SELinuxOptions}
 */
// @ts-ignore
export function createSELinuxOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSELinuxOptions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccount}
 */
// @ts-ignore
export function createServiceAccountFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountList}
 */
// @ts-ignore
export function createServiceAccountListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountTokenProjection}
 */
// @ts-ignore
export function createServiceAccountTokenProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountTokenProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Service}
 */
// @ts-ignore
export function createServiceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoService;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceList}
 */
// @ts-ignore
export function createServiceListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServicePort}
 */
// @ts-ignore
export function createServicePortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServicePort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceSpec_selector}
 */
// @ts-ignore
export function createServiceSpec_selectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceSpec_selector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceSpec}
 */
// @ts-ignore
export function createServiceSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceStatus}
 */
// @ts-ignore
export function createServiceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SessionAffinityConfig}
 */
// @ts-ignore
export function createSessionAffinityConfigFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSessionAffinityConfig;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SleepAction}
 */
// @ts-ignore
export function createSleepActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSleepAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StorageOSPersistentVolumeSource}
 */
// @ts-ignore
export function createStorageOSPersistentVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStorageOSPersistentVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StorageOSVolumeSource}
 */
// @ts-ignore
export function createStorageOSVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStorageOSVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Sysctl}
 */
// @ts-ignore
export function createSysctlFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSysctl;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Taint}
 */
// @ts-ignore
export function createTaintFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTaint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TCPSocketAction}
 */
// @ts-ignore
export function createTCPSocketActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTCPSocketAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Toleration}
 */
// @ts-ignore
export function createTolerationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoToleration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopologySelectorLabelRequirement}
 */
// @ts-ignore
export function createTopologySelectorLabelRequirementFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTopologySelectorLabelRequirement;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopologySelectorTerm}
 */
// @ts-ignore
export function createTopologySelectorTermFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTopologySelectorTerm;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopologySpreadConstraint}
 */
// @ts-ignore
export function createTopologySpreadConstraintFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTopologySpreadConstraint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TypedLocalObjectReference}
 */
// @ts-ignore
export function createTypedLocalObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTypedLocalObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TypedObjectReference}
 */
// @ts-ignore
export function createTypedObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTypedObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeDevice}
 */
// @ts-ignore
export function createVolumeDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeDevice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volume}
 */
// @ts-ignore
export function createVolumeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolume;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeMount}
 */
// @ts-ignore
export function createVolumeMountFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeMount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeMountStatus}
 */
// @ts-ignore
export function createVolumeMountStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeMountStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeNodeAffinity}
 */
// @ts-ignore
export function createVolumeNodeAffinityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeNodeAffinity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeProjection}
 */
// @ts-ignore
export function createVolumeProjectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeProjection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeResourceRequirements_limits}
 */
// @ts-ignore
export function createVolumeResourceRequirements_limitsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeResourceRequirements_limits;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeResourceRequirements_requests}
 */
// @ts-ignore
export function createVolumeResourceRequirements_requestsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeResourceRequirements_requests;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumeResourceRequirements}
 */
// @ts-ignore
export function createVolumeResourceRequirementsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumeResourceRequirements;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VsphereVirtualDiskVolumeSource}
 */
// @ts-ignore
export function createVsphereVirtualDiskVolumeSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVsphereVirtualDiskVolumeSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WeightedPodAffinityTerm}
 */
// @ts-ignore
export function createWeightedPodAffinityTermFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWeightedPodAffinityTerm;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WindowsSecurityContextOptions}
 */
// @ts-ignore
export function createWindowsSecurityContextOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWindowsSecurityContextOptions;
}
/**
 * Represents storage that is managed by an external CSI volume driver
 */
export interface CSIPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    controllerExpandSecretRef?: SecretReference | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    controllerPublishSecretRef?: SecretReference | null;
    /**
     * driver is the name of the driver to use for this volume. Required.
     */
    driver?: string | null;
    /**
     * fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
     */
    fsType?: string | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    nodeExpandSecretRef?: SecretReference | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    nodePublishSecretRef?: SecretReference | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    nodeStageSecretRef?: SecretReference | null;
    /**
     * readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     */
    readOnly?: boolean | null;
    /**
     * volumeAttributes of the volume to publish.
     */
    volumeAttributes?: CSIPersistentVolumeSource_volumeAttributes | null;
    /**
     * volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
     */
    volumeHandle?: string | null;
}
/**
 * volumeAttributes of the volume to publish.
 */
export interface CSIPersistentVolumeSource_volumeAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Represents a source location of a volume to mount, managed by an external CSI driver
 */
export interface CSIVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
     */
    driver?: string | null;
    /**
     * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
     */
    fsType?: string | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    nodePublishSecretRef?: LocalObjectReference | null;
    /**
     * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
     */
    readOnly?: boolean | null;
    /**
     * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
     */
    volumeAttributes?: CSIVolumeSource_volumeAttributes | null;
}
/**
 * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
 */
export interface CSIVolumeSource_volumeAttributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * DaemonEndpoint contains information about a single Daemon endpoint.
 */
export interface DaemonEndpoint extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Port number of the given endpoint.
     */
    port?: number | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAffinity(affinity: Partial<Affinity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nodeAffinity": n => { affinity.nodeAffinity = n.getObjectValue<NodeAffinity>(createNodeAffinityFromDiscriminatorValue); },
        "podAffinity": n => { affinity.podAffinity = n.getObjectValue<PodAffinity>(createPodAffinityFromDiscriminatorValue); },
        "podAntiAffinity": n => { affinity.podAntiAffinity = n.getObjectValue<PodAntiAffinity>(createPodAntiAffinityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAppArmorProfile(appArmorProfile: Partial<AppArmorProfile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "localhostProfile": n => { appArmorProfile.localhostProfile = n.getStringValue(); },
        "type": n => { appArmorProfile.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachedVolume(attachedVolume: Partial<AttachedVolume> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "devicePath": n => { attachedVolume.devicePath = n.getStringValue(); },
        "name": n => { attachedVolume.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAWSElasticBlockStoreVolumeSource(aWSElasticBlockStoreVolumeSource: Partial<AWSElasticBlockStoreVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { aWSElasticBlockStoreVolumeSource.fsType = n.getStringValue(); },
        "partition": n => { aWSElasticBlockStoreVolumeSource.partition = n.getNumberValue(); },
        "readOnly": n => { aWSElasticBlockStoreVolumeSource.readOnly = n.getBooleanValue(); },
        "volumeID": n => { aWSElasticBlockStoreVolumeSource.volumeID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureDiskVolumeSource(azureDiskVolumeSource: Partial<AzureDiskVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cachingMode": n => { azureDiskVolumeSource.cachingMode = n.getStringValue(); },
        "diskName": n => { azureDiskVolumeSource.diskName = n.getStringValue(); },
        "diskURI": n => { azureDiskVolumeSource.diskURI = n.getStringValue(); },
        "fsType": n => { azureDiskVolumeSource.fsType = n.getStringValue(); },
        "kind": n => { azureDiskVolumeSource.kind = n.getStringValue(); },
        "readOnly": n => { azureDiskVolumeSource.readOnly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureFilePersistentVolumeSource(azureFilePersistentVolumeSource: Partial<AzureFilePersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "readOnly": n => { azureFilePersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretName": n => { azureFilePersistentVolumeSource.secretName = n.getStringValue(); },
        "secretNamespace": n => { azureFilePersistentVolumeSource.secretNamespace = n.getStringValue(); },
        "shareName": n => { azureFilePersistentVolumeSource.shareName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureFileVolumeSource(azureFileVolumeSource: Partial<AzureFileVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "readOnly": n => { azureFileVolumeSource.readOnly = n.getBooleanValue(); },
        "secretName": n => { azureFileVolumeSource.secretName = n.getStringValue(); },
        "shareName": n => { azureFileVolumeSource.shareName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBinding(binding: Partial<Binding> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { binding.apiVersion = n.getStringValue(); },
        "kind": n => { binding.kind = n.getStringValue(); },
        "metadata": n => { binding.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "target": n => { binding.target = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCapabilities(capabilities: Partial<Capabilities> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "add": n => { capabilities.add = n.getCollectionOfPrimitiveValues<string>(); },
        "drop": n => { capabilities.drop = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCephFSPersistentVolumeSource(cephFSPersistentVolumeSource: Partial<CephFSPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "monitors": n => { cephFSPersistentVolumeSource.monitors = n.getCollectionOfPrimitiveValues<string>(); },
        "path": n => { cephFSPersistentVolumeSource.path = n.getStringValue(); },
        "readOnly": n => { cephFSPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretFile": n => { cephFSPersistentVolumeSource.secretFile = n.getStringValue(); },
        "secretRef": n => { cephFSPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "user": n => { cephFSPersistentVolumeSource.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCephFSVolumeSource(cephFSVolumeSource: Partial<CephFSVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "monitors": n => { cephFSVolumeSource.monitors = n.getCollectionOfPrimitiveValues<string>(); },
        "path": n => { cephFSVolumeSource.path = n.getStringValue(); },
        "readOnly": n => { cephFSVolumeSource.readOnly = n.getBooleanValue(); },
        "secretFile": n => { cephFSVolumeSource.secretFile = n.getStringValue(); },
        "secretRef": n => { cephFSVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "user": n => { cephFSVolumeSource.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCinderPersistentVolumeSource(cinderPersistentVolumeSource: Partial<CinderPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { cinderPersistentVolumeSource.fsType = n.getStringValue(); },
        "readOnly": n => { cinderPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { cinderPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "volumeID": n => { cinderPersistentVolumeSource.volumeID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCinderVolumeSource(cinderVolumeSource: Partial<CinderVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { cinderVolumeSource.fsType = n.getStringValue(); },
        "readOnly": n => { cinderVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { cinderVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "volumeID": n => { cinderVolumeSource.volumeID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClientIPConfig(clientIPConfig: Partial<ClientIPConfig> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "timeoutSeconds": n => { clientIPConfig.timeoutSeconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClusterTrustBundleProjection(clusterTrustBundleProjection: Partial<ClusterTrustBundleProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "labelSelector": n => { clusterTrustBundleProjection.labelSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "name": n => { clusterTrustBundleProjection.name = n.getStringValue(); },
        "optional": n => { clusterTrustBundleProjection.optional = n.getBooleanValue(); },
        "path": n => { clusterTrustBundleProjection.path = n.getStringValue(); },
        "signerName": n => { clusterTrustBundleProjection.signerName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComponentCondition(componentCondition: Partial<ComponentCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { componentCondition.errorEscaped = n.getStringValue(); },
        "message": n => { componentCondition.message = n.getStringValue(); },
        "status": n => { componentCondition.status = n.getStringValue(); },
        "type": n => { componentCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComponentStatus(componentStatus: Partial<ComponentStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { componentStatus.apiVersion = n.getStringValue(); },
        "conditions": n => { componentStatus.conditions = n.getCollectionOfObjectValues<ComponentCondition>(createComponentConditionFromDiscriminatorValue); },
        "kind": n => { componentStatus.kind = n.getStringValue(); },
        "metadata": n => { componentStatus.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComponentStatusList(componentStatusList: Partial<ComponentStatusList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { componentStatusList.apiVersion = n.getStringValue(); },
        "items": n => { componentStatusList.items = n.getCollectionOfObjectValues<ComponentStatus>(createComponentStatusFromDiscriminatorValue); },
        "kind": n => { componentStatusList.kind = n.getStringValue(); },
        "metadata": n => { componentStatusList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMap(configMap: Partial<ConfigMap> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { configMap.apiVersion = n.getStringValue(); },
        "binaryData": n => { configMap.binaryData = n.getObjectValue<ConfigMap_binaryData>(createConfigMap_binaryDataFromDiscriminatorValue); },
        "data": n => { configMap.data = n.getObjectValue<ConfigMap_data>(createConfigMap_dataFromDiscriminatorValue); },
        "immutable": n => { configMap.immutable = n.getBooleanValue(); },
        "kind": n => { configMap.kind = n.getStringValue(); },
        "metadata": n => { configMap.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMap_binaryData(configMap_binaryData: Partial<ConfigMap_binaryData> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMap_data(configMap_data: Partial<ConfigMap_data> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapEnvSource(configMapEnvSource: Partial<ConfigMapEnvSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { configMapEnvSource.name = n.getStringValue(); },
        "optional": n => { configMapEnvSource.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapKeySelector(configMapKeySelector: Partial<ConfigMapKeySelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { configMapKeySelector.key = n.getStringValue(); },
        "name": n => { configMapKeySelector.name = n.getStringValue(); },
        "optional": n => { configMapKeySelector.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapList(configMapList: Partial<ConfigMapList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { configMapList.apiVersion = n.getStringValue(); },
        "items": n => { configMapList.items = n.getCollectionOfObjectValues<ConfigMap>(createConfigMapFromDiscriminatorValue); },
        "kind": n => { configMapList.kind = n.getStringValue(); },
        "metadata": n => { configMapList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapNodeConfigSource(configMapNodeConfigSource: Partial<ConfigMapNodeConfigSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "kubeletConfigKey": n => { configMapNodeConfigSource.kubeletConfigKey = n.getStringValue(); },
        "name": n => { configMapNodeConfigSource.name = n.getStringValue(); },
        "namespace": n => { configMapNodeConfigSource.namespace = n.getStringValue(); },
        "resourceVersion": n => { configMapNodeConfigSource.resourceVersion = n.getStringValue(); },
        "uid": n => { configMapNodeConfigSource.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapProjection(configMapProjection: Partial<ConfigMapProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { configMapProjection.items = n.getCollectionOfObjectValues<KeyToPath>(createKeyToPathFromDiscriminatorValue); },
        "name": n => { configMapProjection.name = n.getStringValue(); },
        "optional": n => { configMapProjection.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigMapVolumeSource(configMapVolumeSource: Partial<ConfigMapVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultMode": n => { configMapVolumeSource.defaultMode = n.getNumberValue(); },
        "items": n => { configMapVolumeSource.items = n.getCollectionOfObjectValues<KeyToPath>(createKeyToPathFromDiscriminatorValue); },
        "name": n => { configMapVolumeSource.name = n.getStringValue(); },
        "optional": n => { configMapVolumeSource.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainer(container: Partial<Container> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "args": n => { container.args = n.getCollectionOfPrimitiveValues<string>(); },
        "command": n => { container.command = n.getCollectionOfPrimitiveValues<string>(); },
        "env": n => { container.env = n.getCollectionOfObjectValues<EnvVar>(createEnvVarFromDiscriminatorValue); },
        "envFrom": n => { container.envFrom = n.getCollectionOfObjectValues<EnvFromSource>(createEnvFromSourceFromDiscriminatorValue); },
        "image": n => { container.image = n.getStringValue(); },
        "imagePullPolicy": n => { container.imagePullPolicy = n.getStringValue(); },
        "lifecycle": n => { container.lifecycle = n.getObjectValue<Lifecycle>(createLifecycleFromDiscriminatorValue); },
        "livenessProbe": n => { container.livenessProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "name": n => { container.name = n.getStringValue(); },
        "ports": n => { container.ports = n.getCollectionOfObjectValues<ContainerPort>(createContainerPortFromDiscriminatorValue); },
        "readinessProbe": n => { container.readinessProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "resizePolicy": n => { container.resizePolicy = n.getCollectionOfObjectValues<ContainerResizePolicy>(createContainerResizePolicyFromDiscriminatorValue); },
        "resources": n => { container.resources = n.getObjectValue<ResourceRequirements>(createResourceRequirementsFromDiscriminatorValue); },
        "restartPolicy": n => { container.restartPolicy = n.getStringValue(); },
        "securityContext": n => { container.securityContext = n.getObjectValue<SecurityContext>(createSecurityContextFromDiscriminatorValue); },
        "startupProbe": n => { container.startupProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "stdin": n => { container.stdin = n.getBooleanValue(); },
        "stdinOnce": n => { container.stdinOnce = n.getBooleanValue(); },
        "terminationMessagePath": n => { container.terminationMessagePath = n.getStringValue(); },
        "terminationMessagePolicy": n => { container.terminationMessagePolicy = n.getStringValue(); },
        "tty": n => { container.tty = n.getBooleanValue(); },
        "volumeDevices": n => { container.volumeDevices = n.getCollectionOfObjectValues<VolumeDevice>(createVolumeDeviceFromDiscriminatorValue); },
        "volumeMounts": n => { container.volumeMounts = n.getCollectionOfObjectValues<VolumeMount>(createVolumeMountFromDiscriminatorValue); },
        "workingDir": n => { container.workingDir = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerImage(containerImage: Partial<ContainerImage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "names": n => { containerImage.names = n.getCollectionOfPrimitiveValues<string>(); },
        "sizeBytes": n => { containerImage.sizeBytes = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerPort(containerPort: Partial<ContainerPort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "containerPort": n => { containerPort.containerPort = n.getNumberValue(); },
        "hostIP": n => { containerPort.hostIP = n.getStringValue(); },
        "hostPort": n => { containerPort.hostPort = n.getNumberValue(); },
        "name": n => { containerPort.name = n.getStringValue(); },
        "protocol": n => { containerPort.protocol = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerResizePolicy(containerResizePolicy: Partial<ContainerResizePolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "resourceName": n => { containerResizePolicy.resourceName = n.getStringValue(); },
        "restartPolicy": n => { containerResizePolicy.restartPolicy = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerState(containerState: Partial<ContainerState> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "running": n => { containerState.running = n.getObjectValue<ContainerStateRunning>(createContainerStateRunningFromDiscriminatorValue); },
        "terminated": n => { containerState.terminated = n.getObjectValue<ContainerStateTerminated>(createContainerStateTerminatedFromDiscriminatorValue); },
        "waiting": n => { containerState.waiting = n.getObjectValue<ContainerStateWaiting>(createContainerStateWaitingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerStateRunning(containerStateRunning: Partial<ContainerStateRunning> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "startedAt": n => { containerStateRunning.startedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerStateTerminated(containerStateTerminated: Partial<ContainerStateTerminated> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "containerID": n => { containerStateTerminated.containerID = n.getStringValue(); },
        "exitCode": n => { containerStateTerminated.exitCode = n.getNumberValue(); },
        "finishedAt": n => { containerStateTerminated.finishedAt = n.getDateValue(); },
        "message": n => { containerStateTerminated.message = n.getStringValue(); },
        "reason": n => { containerStateTerminated.reason = n.getStringValue(); },
        "signal": n => { containerStateTerminated.signal = n.getNumberValue(); },
        "startedAt": n => { containerStateTerminated.startedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerStateWaiting(containerStateWaiting: Partial<ContainerStateWaiting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { containerStateWaiting.message = n.getStringValue(); },
        "reason": n => { containerStateWaiting.reason = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerStatus(containerStatus: Partial<ContainerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allocatedResources": n => { containerStatus.allocatedResources = n.getObjectValue<ContainerStatus_allocatedResources>(createContainerStatus_allocatedResourcesFromDiscriminatorValue); },
        "allocatedResourcesStatus": n => { containerStatus.allocatedResourcesStatus = n.getCollectionOfObjectValues<ResourceStatus>(createResourceStatusFromDiscriminatorValue); },
        "containerID": n => { containerStatus.containerID = n.getStringValue(); },
        "image": n => { containerStatus.image = n.getStringValue(); },
        "imageID": n => { containerStatus.imageID = n.getStringValue(); },
        "lastState": n => { containerStatus.lastState = n.getObjectValue<ContainerState>(createContainerStateFromDiscriminatorValue); },
        "name": n => { containerStatus.name = n.getStringValue(); },
        "ready": n => { containerStatus.ready = n.getBooleanValue(); },
        "resources": n => { containerStatus.resources = n.getObjectValue<ResourceRequirements>(createResourceRequirementsFromDiscriminatorValue); },
        "restartCount": n => { containerStatus.restartCount = n.getNumberValue(); },
        "started": n => { containerStatus.started = n.getBooleanValue(); },
        "state": n => { containerStatus.state = n.getObjectValue<ContainerState>(createContainerStateFromDiscriminatorValue); },
        "user": n => { containerStatus.user = n.getObjectValue<ContainerUser>(createContainerUserFromDiscriminatorValue); },
        "volumeMounts": n => { containerStatus.volumeMounts = n.getCollectionOfObjectValues<VolumeMountStatus>(createVolumeMountStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerStatus_allocatedResources(containerStatus_allocatedResources: Partial<ContainerStatus_allocatedResources> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerUser(containerUser: Partial<ContainerUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "linux": n => { containerUser.linux = n.getObjectValue<LinuxContainerUser>(createLinuxContainerUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIPersistentVolumeSource(cSIPersistentVolumeSource: Partial<CSIPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "controllerExpandSecretRef": n => { cSIPersistentVolumeSource.controllerExpandSecretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "controllerPublishSecretRef": n => { cSIPersistentVolumeSource.controllerPublishSecretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "driver": n => { cSIPersistentVolumeSource.driver = n.getStringValue(); },
        "fsType": n => { cSIPersistentVolumeSource.fsType = n.getStringValue(); },
        "nodeExpandSecretRef": n => { cSIPersistentVolumeSource.nodeExpandSecretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "nodePublishSecretRef": n => { cSIPersistentVolumeSource.nodePublishSecretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "nodeStageSecretRef": n => { cSIPersistentVolumeSource.nodeStageSecretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "readOnly": n => { cSIPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "volumeAttributes": n => { cSIPersistentVolumeSource.volumeAttributes = n.getObjectValue<CSIPersistentVolumeSource_volumeAttributes>(createCSIPersistentVolumeSource_volumeAttributesFromDiscriminatorValue); },
        "volumeHandle": n => { cSIPersistentVolumeSource.volumeHandle = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIPersistentVolumeSource_volumeAttributes(cSIPersistentVolumeSource_volumeAttributes: Partial<CSIPersistentVolumeSource_volumeAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIVolumeSource(cSIVolumeSource: Partial<CSIVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "driver": n => { cSIVolumeSource.driver = n.getStringValue(); },
        "fsType": n => { cSIVolumeSource.fsType = n.getStringValue(); },
        "nodePublishSecretRef": n => { cSIVolumeSource.nodePublishSecretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "readOnly": n => { cSIVolumeSource.readOnly = n.getBooleanValue(); },
        "volumeAttributes": n => { cSIVolumeSource.volumeAttributes = n.getObjectValue<CSIVolumeSource_volumeAttributes>(createCSIVolumeSource_volumeAttributesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCSIVolumeSource_volumeAttributes(cSIVolumeSource_volumeAttributes: Partial<CSIVolumeSource_volumeAttributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDaemonEndpoint(daemonEndpoint: Partial<DaemonEndpoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "Port": n => { daemonEndpoint.port = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDownwardAPIProjection(downwardAPIProjection: Partial<DownwardAPIProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { downwardAPIProjection.items = n.getCollectionOfObjectValues<DownwardAPIVolumeFile>(createDownwardAPIVolumeFileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDownwardAPIVolumeFile(downwardAPIVolumeFile: Partial<DownwardAPIVolumeFile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fieldRef": n => { downwardAPIVolumeFile.fieldRef = n.getObjectValue<ObjectFieldSelector>(createObjectFieldSelectorFromDiscriminatorValue); },
        "mode": n => { downwardAPIVolumeFile.mode = n.getNumberValue(); },
        "path": n => { downwardAPIVolumeFile.path = n.getStringValue(); },
        "resourceFieldRef": n => { downwardAPIVolumeFile.resourceFieldRef = n.getObjectValue<ResourceFieldSelector>(createResourceFieldSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDownwardAPIVolumeSource(downwardAPIVolumeSource: Partial<DownwardAPIVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultMode": n => { downwardAPIVolumeSource.defaultMode = n.getNumberValue(); },
        "items": n => { downwardAPIVolumeSource.items = n.getCollectionOfObjectValues<DownwardAPIVolumeFile>(createDownwardAPIVolumeFileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmptyDirVolumeSource(emptyDirVolumeSource: Partial<EmptyDirVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "medium": n => { emptyDirVolumeSource.medium = n.getStringValue(); },
        "sizeLimit": n => { emptyDirVolumeSource.sizeLimit = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointAddress(endpointAddress: Partial<EndpointAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hostname": n => { endpointAddress.hostname = n.getStringValue(); },
        "ip": n => { endpointAddress.ip = n.getStringValue(); },
        "nodeName": n => { endpointAddress.nodeName = n.getStringValue(); },
        "targetRef": n => { endpointAddress.targetRef = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointPort(endpointPort: Partial<EndpointPort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "appProtocol": n => { endpointPort.appProtocol = n.getStringValue(); },
        "name": n => { endpointPort.name = n.getStringValue(); },
        "port": n => { endpointPort.port = n.getNumberValue(); },
        "protocol": n => { endpointPort.protocol = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpoints(endpoints: Partial<Endpoints> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { endpoints.apiVersion = n.getStringValue(); },
        "kind": n => { endpoints.kind = n.getStringValue(); },
        "metadata": n => { endpoints.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "subsets": n => { endpoints.subsets = n.getCollectionOfObjectValues<EndpointSubset>(createEndpointSubsetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointsList(endpointsList: Partial<EndpointsList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { endpointsList.apiVersion = n.getStringValue(); },
        "items": n => { endpointsList.items = n.getCollectionOfObjectValues<Endpoints>(createEndpointsFromDiscriminatorValue); },
        "kind": n => { endpointsList.kind = n.getStringValue(); },
        "metadata": n => { endpointsList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointSubset(endpointSubset: Partial<EndpointSubset> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "addresses": n => { endpointSubset.addresses = n.getCollectionOfObjectValues<EndpointAddress>(createEndpointAddressFromDiscriminatorValue); },
        "notReadyAddresses": n => { endpointSubset.notReadyAddresses = n.getCollectionOfObjectValues<EndpointAddress>(createEndpointAddressFromDiscriminatorValue); },
        "ports": n => { endpointSubset.ports = n.getCollectionOfObjectValues<EndpointPort>(createEndpointPortFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEnvFromSource(envFromSource: Partial<EnvFromSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "configMapRef": n => { envFromSource.configMapRef = n.getObjectValue<ConfigMapEnvSource>(createConfigMapEnvSourceFromDiscriminatorValue); },
        "prefix": n => { envFromSource.prefix = n.getStringValue(); },
        "secretRef": n => { envFromSource.secretRef = n.getObjectValue<SecretEnvSource>(createSecretEnvSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEnvVar(envVar: Partial<EnvVar> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { envVar.name = n.getStringValue(); },
        "value": n => { envVar.value = n.getStringValue(); },
        "valueFrom": n => { envVar.valueFrom = n.getObjectValue<EnvVarSource>(createEnvVarSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEnvVarSource(envVarSource: Partial<EnvVarSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "configMapKeyRef": n => { envVarSource.configMapKeyRef = n.getObjectValue<ConfigMapKeySelector>(createConfigMapKeySelectorFromDiscriminatorValue); },
        "fieldRef": n => { envVarSource.fieldRef = n.getObjectValue<ObjectFieldSelector>(createObjectFieldSelectorFromDiscriminatorValue); },
        "resourceFieldRef": n => { envVarSource.resourceFieldRef = n.getObjectValue<ResourceFieldSelector>(createResourceFieldSelectorFromDiscriminatorValue); },
        "secretKeyRef": n => { envVarSource.secretKeyRef = n.getObjectValue<SecretKeySelector>(createSecretKeySelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEphemeralContainer(ephemeralContainer: Partial<EphemeralContainer> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "args": n => { ephemeralContainer.args = n.getCollectionOfPrimitiveValues<string>(); },
        "command": n => { ephemeralContainer.command = n.getCollectionOfPrimitiveValues<string>(); },
        "env": n => { ephemeralContainer.env = n.getCollectionOfObjectValues<EnvVar>(createEnvVarFromDiscriminatorValue); },
        "envFrom": n => { ephemeralContainer.envFrom = n.getCollectionOfObjectValues<EnvFromSource>(createEnvFromSourceFromDiscriminatorValue); },
        "image": n => { ephemeralContainer.image = n.getStringValue(); },
        "imagePullPolicy": n => { ephemeralContainer.imagePullPolicy = n.getStringValue(); },
        "lifecycle": n => { ephemeralContainer.lifecycle = n.getObjectValue<Lifecycle>(createLifecycleFromDiscriminatorValue); },
        "livenessProbe": n => { ephemeralContainer.livenessProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "name": n => { ephemeralContainer.name = n.getStringValue(); },
        "ports": n => { ephemeralContainer.ports = n.getCollectionOfObjectValues<ContainerPort>(createContainerPortFromDiscriminatorValue); },
        "readinessProbe": n => { ephemeralContainer.readinessProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "resizePolicy": n => { ephemeralContainer.resizePolicy = n.getCollectionOfObjectValues<ContainerResizePolicy>(createContainerResizePolicyFromDiscriminatorValue); },
        "resources": n => { ephemeralContainer.resources = n.getObjectValue<ResourceRequirements>(createResourceRequirementsFromDiscriminatorValue); },
        "restartPolicy": n => { ephemeralContainer.restartPolicy = n.getStringValue(); },
        "securityContext": n => { ephemeralContainer.securityContext = n.getObjectValue<SecurityContext>(createSecurityContextFromDiscriminatorValue); },
        "startupProbe": n => { ephemeralContainer.startupProbe = n.getObjectValue<Probe>(createProbeFromDiscriminatorValue); },
        "stdin": n => { ephemeralContainer.stdin = n.getBooleanValue(); },
        "stdinOnce": n => { ephemeralContainer.stdinOnce = n.getBooleanValue(); },
        "targetContainerName": n => { ephemeralContainer.targetContainerName = n.getStringValue(); },
        "terminationMessagePath": n => { ephemeralContainer.terminationMessagePath = n.getStringValue(); },
        "terminationMessagePolicy": n => { ephemeralContainer.terminationMessagePolicy = n.getStringValue(); },
        "tty": n => { ephemeralContainer.tty = n.getBooleanValue(); },
        "volumeDevices": n => { ephemeralContainer.volumeDevices = n.getCollectionOfObjectValues<VolumeDevice>(createVolumeDeviceFromDiscriminatorValue); },
        "volumeMounts": n => { ephemeralContainer.volumeMounts = n.getCollectionOfObjectValues<VolumeMount>(createVolumeMountFromDiscriminatorValue); },
        "workingDir": n => { ephemeralContainer.workingDir = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEphemeralVolumeSource(ephemeralVolumeSource: Partial<EphemeralVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "volumeClaimTemplate": n => { ephemeralVolumeSource.volumeClaimTemplate = n.getObjectValue<PersistentVolumeClaimTemplate>(createPersistentVolumeClaimTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEvent(event: Partial<Event> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { event.action = n.getStringValue(); },
        "apiVersion": n => { event.apiVersion = n.getStringValue(); },
        "count": n => { event.count = n.getNumberValue(); },
        "eventTime": n => { event.eventTime = n.getDateValue(); },
        "firstTimestamp": n => { event.firstTimestamp = n.getDateValue(); },
        "involvedObject": n => { event.involvedObject = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
        "kind": n => { event.kind = n.getStringValue(); },
        "lastTimestamp": n => { event.lastTimestamp = n.getDateValue(); },
        "message": n => { event.message = n.getStringValue(); },
        "metadata": n => { event.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "reason": n => { event.reason = n.getStringValue(); },
        "related": n => { event.related = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
        "reportingComponent": n => { event.reportingComponent = n.getStringValue(); },
        "reportingInstance": n => { event.reportingInstance = n.getStringValue(); },
        "series": n => { event.series = n.getObjectValue<EventSeries>(createEventSeriesFromDiscriminatorValue); },
        "source": n => { event.source = n.getObjectValue<EventSource>(createEventSourceFromDiscriminatorValue); },
        "type": n => { event.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventList(eventList: Partial<EventList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { eventList.apiVersion = n.getStringValue(); },
        "items": n => { eventList.items = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
        "kind": n => { eventList.kind = n.getStringValue(); },
        "metadata": n => { eventList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventSeries(eventSeries: Partial<EventSeries> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "count": n => { eventSeries.count = n.getNumberValue(); },
        "lastObservedTime": n => { eventSeries.lastObservedTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventSource(eventSource: Partial<EventSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "component": n => { eventSource.component = n.getStringValue(); },
        "host": n => { eventSource.host = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExecAction(execAction: Partial<ExecAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "command": n => { execAction.command = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFCVolumeSource(fCVolumeSource: Partial<FCVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { fCVolumeSource.fsType = n.getStringValue(); },
        "lun": n => { fCVolumeSource.lun = n.getNumberValue(); },
        "readOnly": n => { fCVolumeSource.readOnly = n.getBooleanValue(); },
        "targetWWNs": n => { fCVolumeSource.targetWWNs = n.getCollectionOfPrimitiveValues<string>(); },
        "wwids": n => { fCVolumeSource.wwids = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlexPersistentVolumeSource(flexPersistentVolumeSource: Partial<FlexPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "driver": n => { flexPersistentVolumeSource.driver = n.getStringValue(); },
        "fsType": n => { flexPersistentVolumeSource.fsType = n.getStringValue(); },
        "options": n => { flexPersistentVolumeSource.options = n.getObjectValue<FlexPersistentVolumeSource_options>(createFlexPersistentVolumeSource_optionsFromDiscriminatorValue); },
        "readOnly": n => { flexPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { flexPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlexPersistentVolumeSource_options(flexPersistentVolumeSource_options: Partial<FlexPersistentVolumeSource_options> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlexVolumeSource(flexVolumeSource: Partial<FlexVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "driver": n => { flexVolumeSource.driver = n.getStringValue(); },
        "fsType": n => { flexVolumeSource.fsType = n.getStringValue(); },
        "options": n => { flexVolumeSource.options = n.getObjectValue<FlexVolumeSource_options>(createFlexVolumeSource_optionsFromDiscriminatorValue); },
        "readOnly": n => { flexVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { flexVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlexVolumeSource_options(flexVolumeSource_options: Partial<FlexVolumeSource_options> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlockerVolumeSource(flockerVolumeSource: Partial<FlockerVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "datasetName": n => { flockerVolumeSource.datasetName = n.getStringValue(); },
        "datasetUUID": n => { flockerVolumeSource.datasetUUID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGCEPersistentDiskVolumeSource(gCEPersistentDiskVolumeSource: Partial<GCEPersistentDiskVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { gCEPersistentDiskVolumeSource.fsType = n.getStringValue(); },
        "partition": n => { gCEPersistentDiskVolumeSource.partition = n.getNumberValue(); },
        "pdName": n => { gCEPersistentDiskVolumeSource.pdName = n.getStringValue(); },
        "readOnly": n => { gCEPersistentDiskVolumeSource.readOnly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGitRepoVolumeSource(gitRepoVolumeSource: Partial<GitRepoVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "directory": n => { gitRepoVolumeSource.directory = n.getStringValue(); },
        "repository": n => { gitRepoVolumeSource.repository = n.getStringValue(); },
        "revision": n => { gitRepoVolumeSource.revision = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGlusterfsPersistentVolumeSource(glusterfsPersistentVolumeSource: Partial<GlusterfsPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoints": n => { glusterfsPersistentVolumeSource.endpoints = n.getStringValue(); },
        "endpointsNamespace": n => { glusterfsPersistentVolumeSource.endpointsNamespace = n.getStringValue(); },
        "path": n => { glusterfsPersistentVolumeSource.path = n.getStringValue(); },
        "readOnly": n => { glusterfsPersistentVolumeSource.readOnly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGlusterfsVolumeSource(glusterfsVolumeSource: Partial<GlusterfsVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoints": n => { glusterfsVolumeSource.endpoints = n.getStringValue(); },
        "path": n => { glusterfsVolumeSource.path = n.getStringValue(); },
        "readOnly": n => { glusterfsVolumeSource.readOnly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGRPCAction(gRPCAction: Partial<GRPCAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "port": n => { gRPCAction.port = n.getNumberValue(); },
        "service": n => { gRPCAction.service = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHostAlias(hostAlias: Partial<HostAlias> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hostnames": n => { hostAlias.hostnames = n.getCollectionOfPrimitiveValues<string>(); },
        "ip": n => { hostAlias.ip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHostIP(hostIP: Partial<HostIP> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ip": n => { hostIP.ip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHostPathVolumeSource(hostPathVolumeSource: Partial<HostPathVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "path": n => { hostPathVolumeSource.path = n.getStringValue(); },
        "type": n => { hostPathVolumeSource.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHTTPGetAction(hTTPGetAction: Partial<HTTPGetAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "host": n => { hTTPGetAction.host = n.getStringValue(); },
        "httpHeaders": n => { hTTPGetAction.httpHeaders = n.getCollectionOfObjectValues<HTTPHeader>(createHTTPHeaderFromDiscriminatorValue); },
        "path": n => { hTTPGetAction.path = n.getStringValue(); },
        "port": n => { hTTPGetAction.port = n.getStringValue(); },
        "scheme": n => { hTTPGetAction.scheme = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHTTPHeader(hTTPHeader: Partial<HTTPHeader> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { hTTPHeader.name = n.getStringValue(); },
        "value": n => { hTTPHeader.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImageVolumeSource(imageVolumeSource: Partial<ImageVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pullPolicy": n => { imageVolumeSource.pullPolicy = n.getStringValue(); },
        "reference": n => { imageVolumeSource.reference = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoISCSIPersistentVolumeSource(iSCSIPersistentVolumeSource: Partial<ISCSIPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chapAuthDiscovery": n => { iSCSIPersistentVolumeSource.chapAuthDiscovery = n.getBooleanValue(); },
        "chapAuthSession": n => { iSCSIPersistentVolumeSource.chapAuthSession = n.getBooleanValue(); },
        "fsType": n => { iSCSIPersistentVolumeSource.fsType = n.getStringValue(); },
        "initiatorName": n => { iSCSIPersistentVolumeSource.initiatorName = n.getStringValue(); },
        "iqn": n => { iSCSIPersistentVolumeSource.iqn = n.getStringValue(); },
        "iscsiInterface": n => { iSCSIPersistentVolumeSource.iscsiInterface = n.getStringValue(); },
        "lun": n => { iSCSIPersistentVolumeSource.lun = n.getNumberValue(); },
        "portals": n => { iSCSIPersistentVolumeSource.portals = n.getCollectionOfPrimitiveValues<string>(); },
        "readOnly": n => { iSCSIPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { iSCSIPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "targetPortal": n => { iSCSIPersistentVolumeSource.targetPortal = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoISCSIVolumeSource(iSCSIVolumeSource: Partial<ISCSIVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chapAuthDiscovery": n => { iSCSIVolumeSource.chapAuthDiscovery = n.getBooleanValue(); },
        "chapAuthSession": n => { iSCSIVolumeSource.chapAuthSession = n.getBooleanValue(); },
        "fsType": n => { iSCSIVolumeSource.fsType = n.getStringValue(); },
        "initiatorName": n => { iSCSIVolumeSource.initiatorName = n.getStringValue(); },
        "iqn": n => { iSCSIVolumeSource.iqn = n.getStringValue(); },
        "iscsiInterface": n => { iSCSIVolumeSource.iscsiInterface = n.getStringValue(); },
        "lun": n => { iSCSIVolumeSource.lun = n.getNumberValue(); },
        "portals": n => { iSCSIVolumeSource.portals = n.getCollectionOfPrimitiveValues<string>(); },
        "readOnly": n => { iSCSIVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { iSCSIVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "targetPortal": n => { iSCSIVolumeSource.targetPortal = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyToPath(keyToPath: Partial<KeyToPath> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { keyToPath.key = n.getStringValue(); },
        "mode": n => { keyToPath.mode = n.getNumberValue(); },
        "path": n => { keyToPath.path = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLifecycle(lifecycle: Partial<Lifecycle> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "postStart": n => { lifecycle.postStart = n.getObjectValue<LifecycleHandler>(createLifecycleHandlerFromDiscriminatorValue); },
        "preStop": n => { lifecycle.preStop = n.getObjectValue<LifecycleHandler>(createLifecycleHandlerFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLifecycleHandler(lifecycleHandler: Partial<LifecycleHandler> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "exec": n => { lifecycleHandler.exec = n.getObjectValue<ExecAction>(createExecActionFromDiscriminatorValue); },
        "httpGet": n => { lifecycleHandler.httpGet = n.getObjectValue<HTTPGetAction>(createHTTPGetActionFromDiscriminatorValue); },
        "sleep": n => { lifecycleHandler.sleep = n.getObjectValue<SleepAction>(createSleepActionFromDiscriminatorValue); },
        "tcpSocket": n => { lifecycleHandler.tcpSocket = n.getObjectValue<TCPSocketAction>(createTCPSocketActionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRange(limitRange: Partial<LimitRange> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { limitRange.apiVersion = n.getStringValue(); },
        "kind": n => { limitRange.kind = n.getStringValue(); },
        "metadata": n => { limitRange.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { limitRange.spec = n.getObjectValue<LimitRangeSpec>(createLimitRangeSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem(limitRangeItem: Partial<LimitRangeItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "default": n => { limitRangeItem.defaultEscaped = n.getObjectValue<LimitRangeItem_default>(createLimitRangeItem_defaultFromDiscriminatorValue); },
        "defaultRequest": n => { limitRangeItem.defaultRequest = n.getObjectValue<LimitRangeItem_defaultRequest>(createLimitRangeItem_defaultRequestFromDiscriminatorValue); },
        "max": n => { limitRangeItem.max = n.getObjectValue<LimitRangeItem_max>(createLimitRangeItem_maxFromDiscriminatorValue); },
        "maxLimitRequestRatio": n => { limitRangeItem.maxLimitRequestRatio = n.getObjectValue<LimitRangeItem_maxLimitRequestRatio>(createLimitRangeItem_maxLimitRequestRatioFromDiscriminatorValue); },
        "min": n => { limitRangeItem.min = n.getObjectValue<LimitRangeItem_min>(createLimitRangeItem_minFromDiscriminatorValue); },
        "type": n => { limitRangeItem.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem_default(limitRangeItem_default: Partial<LimitRangeItem_default> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem_defaultRequest(limitRangeItem_defaultRequest: Partial<LimitRangeItem_defaultRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem_max(limitRangeItem_max: Partial<LimitRangeItem_max> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem_maxLimitRequestRatio(limitRangeItem_maxLimitRequestRatio: Partial<LimitRangeItem_maxLimitRequestRatio> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeItem_min(limitRangeItem_min: Partial<LimitRangeItem_min> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeList(limitRangeList: Partial<LimitRangeList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { limitRangeList.apiVersion = n.getStringValue(); },
        "items": n => { limitRangeList.items = n.getCollectionOfObjectValues<LimitRange>(createLimitRangeFromDiscriminatorValue); },
        "kind": n => { limitRangeList.kind = n.getStringValue(); },
        "metadata": n => { limitRangeList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitRangeSpec(limitRangeSpec: Partial<LimitRangeSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "limits": n => { limitRangeSpec.limits = n.getCollectionOfObjectValues<LimitRangeItem>(createLimitRangeItemFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLinuxContainerUser(linuxContainerUser: Partial<LinuxContainerUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "gid": n => { linuxContainerUser.gid = n.getNumberValue(); },
        "supplementalGroups": n => { linuxContainerUser.supplementalGroups = n.getCollectionOfPrimitiveValues<number>(); },
        "uid": n => { linuxContainerUser.uid = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoadBalancerIngress(loadBalancerIngress: Partial<LoadBalancerIngress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hostname": n => { loadBalancerIngress.hostname = n.getStringValue(); },
        "ip": n => { loadBalancerIngress.ip = n.getStringValue(); },
        "ipMode": n => { loadBalancerIngress.ipMode = n.getStringValue(); },
        "ports": n => { loadBalancerIngress.ports = n.getCollectionOfObjectValues<PortStatus>(createPortStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoadBalancerStatus(loadBalancerStatus: Partial<LoadBalancerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ingress": n => { loadBalancerStatus.ingress = n.getCollectionOfObjectValues<LoadBalancerIngress>(createLoadBalancerIngressFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocalObjectReference(localObjectReference: Partial<LocalObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { localObjectReference.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocalVolumeSource(localVolumeSource: Partial<LocalVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { localVolumeSource.fsType = n.getStringValue(); },
        "path": n => { localVolumeSource.path = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoModifyVolumeStatus(modifyVolumeStatus: Partial<ModifyVolumeStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "status": n => { modifyVolumeStatus.status = n.getStringValue(); },
        "targetVolumeAttributesClassName": n => { modifyVolumeStatus.targetVolumeAttributesClassName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespace(namespace: Partial<Namespace> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { namespace.apiVersion = n.getStringValue(); },
        "kind": n => { namespace.kind = n.getStringValue(); },
        "metadata": n => { namespace.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { namespace.spec = n.getObjectValue<NamespaceSpec>(createNamespaceSpecFromDiscriminatorValue); },
        "status": n => { namespace.status = n.getObjectValue<NamespaceStatus>(createNamespaceStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespaceCondition(namespaceCondition: Partial<NamespaceCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { namespaceCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { namespaceCondition.message = n.getStringValue(); },
        "reason": n => { namespaceCondition.reason = n.getStringValue(); },
        "status": n => { namespaceCondition.status = n.getStringValue(); },
        "type": n => { namespaceCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespaceList(namespaceList: Partial<NamespaceList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { namespaceList.apiVersion = n.getStringValue(); },
        "items": n => { namespaceList.items = n.getCollectionOfObjectValues<Namespace>(createNamespaceFromDiscriminatorValue); },
        "kind": n => { namespaceList.kind = n.getStringValue(); },
        "metadata": n => { namespaceList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespaceSpec(namespaceSpec: Partial<NamespaceSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "finalizers": n => { namespaceSpec.finalizers = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespaceStatus(namespaceStatus: Partial<NamespaceStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { namespaceStatus.conditions = n.getCollectionOfObjectValues<NamespaceCondition>(createNamespaceConditionFromDiscriminatorValue); },
        "phase": n => { namespaceStatus.phase = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNFSVolumeSource(nFSVolumeSource: Partial<NFSVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "path": n => { nFSVolumeSource.path = n.getStringValue(); },
        "readOnly": n => { nFSVolumeSource.readOnly = n.getBooleanValue(); },
        "server": n => { nFSVolumeSource.server = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNode(node: Partial<Node> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { node.apiVersion = n.getStringValue(); },
        "kind": n => { node.kind = n.getStringValue(); },
        "metadata": n => { node.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { node.spec = n.getObjectValue<NodeSpec>(createNodeSpecFromDiscriminatorValue); },
        "status": n => { node.status = n.getObjectValue<NodeStatus>(createNodeStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeAddress(nodeAddress: Partial<NodeAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { nodeAddress.address = n.getStringValue(); },
        "type": n => { nodeAddress.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeAffinity(nodeAffinity: Partial<NodeAffinity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "preferredDuringSchedulingIgnoredDuringExecution": n => { nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution = n.getCollectionOfObjectValues<PreferredSchedulingTerm>(createPreferredSchedulingTermFromDiscriminatorValue); },
        "requiredDuringSchedulingIgnoredDuringExecution": n => { nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution = n.getObjectValue<NodeSelector>(createNodeSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeCondition(nodeCondition: Partial<NodeCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastHeartbeatTime": n => { nodeCondition.lastHeartbeatTime = n.getDateValue(); },
        "lastTransitionTime": n => { nodeCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { nodeCondition.message = n.getStringValue(); },
        "reason": n => { nodeCondition.reason = n.getStringValue(); },
        "status": n => { nodeCondition.status = n.getStringValue(); },
        "type": n => { nodeCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeConfigSource(nodeConfigSource: Partial<NodeConfigSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "configMap": n => { nodeConfigSource.configMap = n.getObjectValue<ConfigMapNodeConfigSource>(createConfigMapNodeConfigSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeConfigStatus(nodeConfigStatus: Partial<NodeConfigStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { nodeConfigStatus.active = n.getObjectValue<NodeConfigSource>(createNodeConfigSourceFromDiscriminatorValue); },
        "assigned": n => { nodeConfigStatus.assigned = n.getObjectValue<NodeConfigSource>(createNodeConfigSourceFromDiscriminatorValue); },
        "error": n => { nodeConfigStatus.errorEscaped = n.getStringValue(); },
        "lastKnownGood": n => { nodeConfigStatus.lastKnownGood = n.getObjectValue<NodeConfigSource>(createNodeConfigSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeDaemonEndpoints(nodeDaemonEndpoints: Partial<NodeDaemonEndpoints> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "kubeletEndpoint": n => { nodeDaemonEndpoints.kubeletEndpoint = n.getObjectValue<DaemonEndpoint>(createDaemonEndpointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeFeatures(nodeFeatures: Partial<NodeFeatures> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "supplementalGroupsPolicy": n => { nodeFeatures.supplementalGroupsPolicy = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeList(nodeList: Partial<NodeList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { nodeList.apiVersion = n.getStringValue(); },
        "items": n => { nodeList.items = n.getCollectionOfObjectValues<Node>(createNodeFromDiscriminatorValue); },
        "kind": n => { nodeList.kind = n.getStringValue(); },
        "metadata": n => { nodeList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeRuntimeHandler(nodeRuntimeHandler: Partial<NodeRuntimeHandler> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "features": n => { nodeRuntimeHandler.features = n.getObjectValue<NodeRuntimeHandlerFeatures>(createNodeRuntimeHandlerFeaturesFromDiscriminatorValue); },
        "name": n => { nodeRuntimeHandler.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeRuntimeHandlerFeatures(nodeRuntimeHandlerFeatures: Partial<NodeRuntimeHandlerFeatures> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "recursiveReadOnlyMounts": n => { nodeRuntimeHandlerFeatures.recursiveReadOnlyMounts = n.getBooleanValue(); },
        "userNamespaces": n => { nodeRuntimeHandlerFeatures.userNamespaces = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeSelector(nodeSelector: Partial<NodeSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nodeSelectorTerms": n => { nodeSelector.nodeSelectorTerms = n.getCollectionOfObjectValues<NodeSelectorTerm>(createNodeSelectorTermFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeSelectorRequirement(nodeSelectorRequirement: Partial<NodeSelectorRequirement> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { nodeSelectorRequirement.key = n.getStringValue(); },
        "operator": n => { nodeSelectorRequirement.operator = n.getStringValue(); },
        "values": n => { nodeSelectorRequirement.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeSelectorTerm(nodeSelectorTerm: Partial<NodeSelectorTerm> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchExpressions": n => { nodeSelectorTerm.matchExpressions = n.getCollectionOfObjectValues<NodeSelectorRequirement>(createNodeSelectorRequirementFromDiscriminatorValue); },
        "matchFields": n => { nodeSelectorTerm.matchFields = n.getCollectionOfObjectValues<NodeSelectorRequirement>(createNodeSelectorRequirementFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeSpec(nodeSpec: Partial<NodeSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "configSource": n => { nodeSpec.configSource = n.getObjectValue<NodeConfigSource>(createNodeConfigSourceFromDiscriminatorValue); },
        "externalID": n => { nodeSpec.externalID = n.getStringValue(); },
        "podCIDR": n => { nodeSpec.podCIDR = n.getStringValue(); },
        "podCIDRs": n => { nodeSpec.podCIDRs = n.getCollectionOfPrimitiveValues<string>(); },
        "providerID": n => { nodeSpec.providerID = n.getStringValue(); },
        "taints": n => { nodeSpec.taints = n.getCollectionOfObjectValues<Taint>(createTaintFromDiscriminatorValue); },
        "unschedulable": n => { nodeSpec.unschedulable = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeStatus(nodeStatus: Partial<NodeStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "addresses": n => { nodeStatus.addresses = n.getCollectionOfObjectValues<NodeAddress>(createNodeAddressFromDiscriminatorValue); },
        "allocatable": n => { nodeStatus.allocatable = n.getObjectValue<NodeStatus_allocatable>(createNodeStatus_allocatableFromDiscriminatorValue); },
        "capacity": n => { nodeStatus.capacity = n.getObjectValue<NodeStatus_capacity>(createNodeStatus_capacityFromDiscriminatorValue); },
        "conditions": n => { nodeStatus.conditions = n.getCollectionOfObjectValues<NodeCondition>(createNodeConditionFromDiscriminatorValue); },
        "config": n => { nodeStatus.config = n.getObjectValue<NodeConfigStatus>(createNodeConfigStatusFromDiscriminatorValue); },
        "daemonEndpoints": n => { nodeStatus.daemonEndpoints = n.getObjectValue<NodeDaemonEndpoints>(createNodeDaemonEndpointsFromDiscriminatorValue); },
        "features": n => { nodeStatus.features = n.getObjectValue<NodeFeatures>(createNodeFeaturesFromDiscriminatorValue); },
        "images": n => { nodeStatus.images = n.getCollectionOfObjectValues<ContainerImage>(createContainerImageFromDiscriminatorValue); },
        "nodeInfo": n => { nodeStatus.nodeInfo = n.getObjectValue<NodeSystemInfo>(createNodeSystemInfoFromDiscriminatorValue); },
        "phase": n => { nodeStatus.phase = n.getStringValue(); },
        "runtimeHandlers": n => { nodeStatus.runtimeHandlers = n.getCollectionOfObjectValues<NodeRuntimeHandler>(createNodeRuntimeHandlerFromDiscriminatorValue); },
        "volumesAttached": n => { nodeStatus.volumesAttached = n.getCollectionOfObjectValues<AttachedVolume>(createAttachedVolumeFromDiscriminatorValue); },
        "volumesInUse": n => { nodeStatus.volumesInUse = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeStatus_allocatable(nodeStatus_allocatable: Partial<NodeStatus_allocatable> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeStatus_capacity(nodeStatus_capacity: Partial<NodeStatus_capacity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNodeSystemInfo(nodeSystemInfo: Partial<NodeSystemInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "architecture": n => { nodeSystemInfo.architecture = n.getStringValue(); },
        "bootID": n => { nodeSystemInfo.bootID = n.getStringValue(); },
        "containerRuntimeVersion": n => { nodeSystemInfo.containerRuntimeVersion = n.getStringValue(); },
        "kernelVersion": n => { nodeSystemInfo.kernelVersion = n.getStringValue(); },
        "kubeletVersion": n => { nodeSystemInfo.kubeletVersion = n.getStringValue(); },
        "kubeProxyVersion": n => { nodeSystemInfo.kubeProxyVersion = n.getStringValue(); },
        "machineID": n => { nodeSystemInfo.machineID = n.getStringValue(); },
        "operatingSystem": n => { nodeSystemInfo.operatingSystem = n.getStringValue(); },
        "osImage": n => { nodeSystemInfo.osImage = n.getStringValue(); },
        "systemUUID": n => { nodeSystemInfo.systemUUID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectFieldSelector(objectFieldSelector: Partial<ObjectFieldSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { objectFieldSelector.apiVersion = n.getStringValue(); },
        "fieldPath": n => { objectFieldSelector.fieldPath = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectReference(objectReference: Partial<ObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { objectReference.apiVersion = n.getStringValue(); },
        "fieldPath": n => { objectReference.fieldPath = n.getStringValue(); },
        "kind": n => { objectReference.kind = n.getStringValue(); },
        "name": n => { objectReference.name = n.getStringValue(); },
        "namespace": n => { objectReference.namespace = n.getStringValue(); },
        "resourceVersion": n => { objectReference.resourceVersion = n.getStringValue(); },
        "uid": n => { objectReference.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolume(persistentVolume: Partial<PersistentVolume> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { persistentVolume.apiVersion = n.getStringValue(); },
        "kind": n => { persistentVolume.kind = n.getStringValue(); },
        "metadata": n => { persistentVolume.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { persistentVolume.spec = n.getObjectValue<PersistentVolumeSpec>(createPersistentVolumeSpecFromDiscriminatorValue); },
        "status": n => { persistentVolume.status = n.getObjectValue<PersistentVolumeStatus>(createPersistentVolumeStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaim(persistentVolumeClaim: Partial<PersistentVolumeClaim> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { persistentVolumeClaim.apiVersion = n.getStringValue(); },
        "kind": n => { persistentVolumeClaim.kind = n.getStringValue(); },
        "metadata": n => { persistentVolumeClaim.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { persistentVolumeClaim.spec = n.getObjectValue<PersistentVolumeClaimSpec>(createPersistentVolumeClaimSpecFromDiscriminatorValue); },
        "status": n => { persistentVolumeClaim.status = n.getObjectValue<PersistentVolumeClaimStatus>(createPersistentVolumeClaimStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimCondition(persistentVolumeClaimCondition: Partial<PersistentVolumeClaimCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastProbeTime": n => { persistentVolumeClaimCondition.lastProbeTime = n.getDateValue(); },
        "lastTransitionTime": n => { persistentVolumeClaimCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { persistentVolumeClaimCondition.message = n.getStringValue(); },
        "reason": n => { persistentVolumeClaimCondition.reason = n.getStringValue(); },
        "status": n => { persistentVolumeClaimCondition.status = n.getStringValue(); },
        "type": n => { persistentVolumeClaimCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimList(persistentVolumeClaimList: Partial<PersistentVolumeClaimList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { persistentVolumeClaimList.apiVersion = n.getStringValue(); },
        "items": n => { persistentVolumeClaimList.items = n.getCollectionOfObjectValues<PersistentVolumeClaim>(createPersistentVolumeClaimFromDiscriminatorValue); },
        "kind": n => { persistentVolumeClaimList.kind = n.getStringValue(); },
        "metadata": n => { persistentVolumeClaimList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimSpec(persistentVolumeClaimSpec: Partial<PersistentVolumeClaimSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessModes": n => { persistentVolumeClaimSpec.accessModes = n.getCollectionOfPrimitiveValues<string>(); },
        "dataSource": n => { persistentVolumeClaimSpec.dataSource = n.getObjectValue<TypedLocalObjectReference>(createTypedLocalObjectReferenceFromDiscriminatorValue); },
        "dataSourceRef": n => { persistentVolumeClaimSpec.dataSourceRef = n.getObjectValue<TypedObjectReference>(createTypedObjectReferenceFromDiscriminatorValue); },
        "resources": n => { persistentVolumeClaimSpec.resources = n.getObjectValue<VolumeResourceRequirements>(createVolumeResourceRequirementsFromDiscriminatorValue); },
        "selector": n => { persistentVolumeClaimSpec.selector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "storageClassName": n => { persistentVolumeClaimSpec.storageClassName = n.getStringValue(); },
        "volumeAttributesClassName": n => { persistentVolumeClaimSpec.volumeAttributesClassName = n.getStringValue(); },
        "volumeMode": n => { persistentVolumeClaimSpec.volumeMode = n.getStringValue(); },
        "volumeName": n => { persistentVolumeClaimSpec.volumeName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimStatus(persistentVolumeClaimStatus: Partial<PersistentVolumeClaimStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessModes": n => { persistentVolumeClaimStatus.accessModes = n.getCollectionOfPrimitiveValues<string>(); },
        "allocatedResources": n => { persistentVolumeClaimStatus.allocatedResources = n.getObjectValue<PersistentVolumeClaimStatus_allocatedResources>(createPersistentVolumeClaimStatus_allocatedResourcesFromDiscriminatorValue); },
        "allocatedResourceStatuses": n => { persistentVolumeClaimStatus.allocatedResourceStatuses = n.getObjectValue<PersistentVolumeClaimStatus_allocatedResourceStatuses>(createPersistentVolumeClaimStatus_allocatedResourceStatusesFromDiscriminatorValue); },
        "capacity": n => { persistentVolumeClaimStatus.capacity = n.getObjectValue<PersistentVolumeClaimStatus_capacity>(createPersistentVolumeClaimStatus_capacityFromDiscriminatorValue); },
        "conditions": n => { persistentVolumeClaimStatus.conditions = n.getCollectionOfObjectValues<PersistentVolumeClaimCondition>(createPersistentVolumeClaimConditionFromDiscriminatorValue); },
        "currentVolumeAttributesClassName": n => { persistentVolumeClaimStatus.currentVolumeAttributesClassName = n.getStringValue(); },
        "modifyVolumeStatus": n => { persistentVolumeClaimStatus.modifyVolumeStatus = n.getObjectValue<ModifyVolumeStatus>(createModifyVolumeStatusFromDiscriminatorValue); },
        "phase": n => { persistentVolumeClaimStatus.phase = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimStatus_allocatedResources(persistentVolumeClaimStatus_allocatedResources: Partial<PersistentVolumeClaimStatus_allocatedResources> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimStatus_allocatedResourceStatuses(persistentVolumeClaimStatus_allocatedResourceStatuses: Partial<PersistentVolumeClaimStatus_allocatedResourceStatuses> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimStatus_capacity(persistentVolumeClaimStatus_capacity: Partial<PersistentVolumeClaimStatus_capacity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimTemplate(persistentVolumeClaimTemplate: Partial<PersistentVolumeClaimTemplate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "metadata": n => { persistentVolumeClaimTemplate.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { persistentVolumeClaimTemplate.spec = n.getObjectValue<PersistentVolumeClaimSpec>(createPersistentVolumeClaimSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeClaimVolumeSource(persistentVolumeClaimVolumeSource: Partial<PersistentVolumeClaimVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "claimName": n => { persistentVolumeClaimVolumeSource.claimName = n.getStringValue(); },
        "readOnly": n => { persistentVolumeClaimVolumeSource.readOnly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeList(persistentVolumeList: Partial<PersistentVolumeList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { persistentVolumeList.apiVersion = n.getStringValue(); },
        "items": n => { persistentVolumeList.items = n.getCollectionOfObjectValues<PersistentVolume>(createPersistentVolumeFromDiscriminatorValue); },
        "kind": n => { persistentVolumeList.kind = n.getStringValue(); },
        "metadata": n => { persistentVolumeList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeSpec(persistentVolumeSpec: Partial<PersistentVolumeSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessModes": n => { persistentVolumeSpec.accessModes = n.getCollectionOfPrimitiveValues<string>(); },
        "awsElasticBlockStore": n => { persistentVolumeSpec.awsElasticBlockStore = n.getObjectValue<AWSElasticBlockStoreVolumeSource>(createAWSElasticBlockStoreVolumeSourceFromDiscriminatorValue); },
        "azureDisk": n => { persistentVolumeSpec.azureDisk = n.getObjectValue<AzureDiskVolumeSource>(createAzureDiskVolumeSourceFromDiscriminatorValue); },
        "azureFile": n => { persistentVolumeSpec.azureFile = n.getObjectValue<AzureFilePersistentVolumeSource>(createAzureFilePersistentVolumeSourceFromDiscriminatorValue); },
        "capacity": n => { persistentVolumeSpec.capacity = n.getObjectValue<PersistentVolumeSpec_capacity>(createPersistentVolumeSpec_capacityFromDiscriminatorValue); },
        "cephfs": n => { persistentVolumeSpec.cephfs = n.getObjectValue<CephFSPersistentVolumeSource>(createCephFSPersistentVolumeSourceFromDiscriminatorValue); },
        "cinder": n => { persistentVolumeSpec.cinder = n.getObjectValue<CinderPersistentVolumeSource>(createCinderPersistentVolumeSourceFromDiscriminatorValue); },
        "claimRef": n => { persistentVolumeSpec.claimRef = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
        "csi": n => { persistentVolumeSpec.csi = n.getObjectValue<CSIPersistentVolumeSource>(createCSIPersistentVolumeSourceFromDiscriminatorValue); },
        "fc": n => { persistentVolumeSpec.fc = n.getObjectValue<FCVolumeSource>(createFCVolumeSourceFromDiscriminatorValue); },
        "flexVolume": n => { persistentVolumeSpec.flexVolume = n.getObjectValue<FlexPersistentVolumeSource>(createFlexPersistentVolumeSourceFromDiscriminatorValue); },
        "flocker": n => { persistentVolumeSpec.flocker = n.getObjectValue<FlockerVolumeSource>(createFlockerVolumeSourceFromDiscriminatorValue); },
        "gcePersistentDisk": n => { persistentVolumeSpec.gcePersistentDisk = n.getObjectValue<GCEPersistentDiskVolumeSource>(createGCEPersistentDiskVolumeSourceFromDiscriminatorValue); },
        "glusterfs": n => { persistentVolumeSpec.glusterfs = n.getObjectValue<GlusterfsPersistentVolumeSource>(createGlusterfsPersistentVolumeSourceFromDiscriminatorValue); },
        "hostPath": n => { persistentVolumeSpec.hostPath = n.getObjectValue<HostPathVolumeSource>(createHostPathVolumeSourceFromDiscriminatorValue); },
        "iscsi": n => { persistentVolumeSpec.iscsi = n.getObjectValue<ISCSIPersistentVolumeSource>(createISCSIPersistentVolumeSourceFromDiscriminatorValue); },
        "local": n => { persistentVolumeSpec.local = n.getObjectValue<LocalVolumeSource>(createLocalVolumeSourceFromDiscriminatorValue); },
        "mountOptions": n => { persistentVolumeSpec.mountOptions = n.getCollectionOfPrimitiveValues<string>(); },
        "nfs": n => { persistentVolumeSpec.nfs = n.getObjectValue<NFSVolumeSource>(createNFSVolumeSourceFromDiscriminatorValue); },
        "nodeAffinity": n => { persistentVolumeSpec.nodeAffinity = n.getObjectValue<VolumeNodeAffinity>(createVolumeNodeAffinityFromDiscriminatorValue); },
        "persistentVolumeReclaimPolicy": n => { persistentVolumeSpec.persistentVolumeReclaimPolicy = n.getStringValue(); },
        "photonPersistentDisk": n => { persistentVolumeSpec.photonPersistentDisk = n.getObjectValue<PhotonPersistentDiskVolumeSource>(createPhotonPersistentDiskVolumeSourceFromDiscriminatorValue); },
        "portworxVolume": n => { persistentVolumeSpec.portworxVolume = n.getObjectValue<PortworxVolumeSource>(createPortworxVolumeSourceFromDiscriminatorValue); },
        "quobyte": n => { persistentVolumeSpec.quobyte = n.getObjectValue<QuobyteVolumeSource>(createQuobyteVolumeSourceFromDiscriminatorValue); },
        "rbd": n => { persistentVolumeSpec.rbd = n.getObjectValue<RBDPersistentVolumeSource>(createRBDPersistentVolumeSourceFromDiscriminatorValue); },
        "scaleIO": n => { persistentVolumeSpec.scaleIO = n.getObjectValue<ScaleIOPersistentVolumeSource>(createScaleIOPersistentVolumeSourceFromDiscriminatorValue); },
        "storageClassName": n => { persistentVolumeSpec.storageClassName = n.getStringValue(); },
        "storageos": n => { persistentVolumeSpec.storageos = n.getObjectValue<StorageOSPersistentVolumeSource>(createStorageOSPersistentVolumeSourceFromDiscriminatorValue); },
        "volumeAttributesClassName": n => { persistentVolumeSpec.volumeAttributesClassName = n.getStringValue(); },
        "volumeMode": n => { persistentVolumeSpec.volumeMode = n.getStringValue(); },
        "vsphereVolume": n => { persistentVolumeSpec.vsphereVolume = n.getObjectValue<VsphereVirtualDiskVolumeSource>(createVsphereVirtualDiskVolumeSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeSpec_capacity(persistentVolumeSpec_capacity: Partial<PersistentVolumeSpec_capacity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPersistentVolumeStatus(persistentVolumeStatus: Partial<PersistentVolumeStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastPhaseTransitionTime": n => { persistentVolumeStatus.lastPhaseTransitionTime = n.getDateValue(); },
        "message": n => { persistentVolumeStatus.message = n.getStringValue(); },
        "phase": n => { persistentVolumeStatus.phase = n.getStringValue(); },
        "reason": n => { persistentVolumeStatus.reason = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPhotonPersistentDiskVolumeSource(photonPersistentDiskVolumeSource: Partial<PhotonPersistentDiskVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { photonPersistentDiskVolumeSource.fsType = n.getStringValue(); },
        "pdID": n => { photonPersistentDiskVolumeSource.pdID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPod(pod: Partial<Pod> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { pod.apiVersion = n.getStringValue(); },
        "kind": n => { pod.kind = n.getStringValue(); },
        "metadata": n => { pod.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { pod.spec = n.getObjectValue<PodSpec>(createPodSpecFromDiscriminatorValue); },
        "status": n => { pod.status = n.getObjectValue<PodStatus>(createPodStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodAffinity(podAffinity: Partial<PodAffinity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "preferredDuringSchedulingIgnoredDuringExecution": n => { podAffinity.preferredDuringSchedulingIgnoredDuringExecution = n.getCollectionOfObjectValues<WeightedPodAffinityTerm>(createWeightedPodAffinityTermFromDiscriminatorValue); },
        "requiredDuringSchedulingIgnoredDuringExecution": n => { podAffinity.requiredDuringSchedulingIgnoredDuringExecution = n.getCollectionOfObjectValues<PodAffinityTerm>(createPodAffinityTermFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodAffinityTerm(podAffinityTerm: Partial<PodAffinityTerm> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "labelSelector": n => { podAffinityTerm.labelSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "matchLabelKeys": n => { podAffinityTerm.matchLabelKeys = n.getCollectionOfPrimitiveValues<string>(); },
        "mismatchLabelKeys": n => { podAffinityTerm.mismatchLabelKeys = n.getCollectionOfPrimitiveValues<string>(); },
        "namespaces": n => { podAffinityTerm.namespaces = n.getCollectionOfPrimitiveValues<string>(); },
        "namespaceSelector": n => { podAffinityTerm.namespaceSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "topologyKey": n => { podAffinityTerm.topologyKey = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodAntiAffinity(podAntiAffinity: Partial<PodAntiAffinity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "preferredDuringSchedulingIgnoredDuringExecution": n => { podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution = n.getCollectionOfObjectValues<WeightedPodAffinityTerm>(createWeightedPodAffinityTermFromDiscriminatorValue); },
        "requiredDuringSchedulingIgnoredDuringExecution": n => { podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution = n.getCollectionOfObjectValues<PodAffinityTerm>(createPodAffinityTermFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodCondition(podCondition: Partial<PodCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastProbeTime": n => { podCondition.lastProbeTime = n.getDateValue(); },
        "lastTransitionTime": n => { podCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { podCondition.message = n.getStringValue(); },
        "reason": n => { podCondition.reason = n.getStringValue(); },
        "status": n => { podCondition.status = n.getStringValue(); },
        "type": n => { podCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDNSConfig(podDNSConfig: Partial<PodDNSConfig> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nameservers": n => { podDNSConfig.nameservers = n.getCollectionOfPrimitiveValues<string>(); },
        "options": n => { podDNSConfig.options = n.getCollectionOfObjectValues<PodDNSConfigOption>(createPodDNSConfigOptionFromDiscriminatorValue); },
        "searches": n => { podDNSConfig.searches = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDNSConfigOption(podDNSConfigOption: Partial<PodDNSConfigOption> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { podDNSConfigOption.name = n.getStringValue(); },
        "value": n => { podDNSConfigOption.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodIP(podIP: Partial<PodIP> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ip": n => { podIP.ip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodList(podList: Partial<PodList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { podList.apiVersion = n.getStringValue(); },
        "items": n => { podList.items = n.getCollectionOfObjectValues<Pod>(createPodFromDiscriminatorValue); },
        "kind": n => { podList.kind = n.getStringValue(); },
        "metadata": n => { podList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodOS(podOS: Partial<PodOS> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { podOS.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodReadinessGate(podReadinessGate: Partial<PodReadinessGate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditionType": n => { podReadinessGate.conditionType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodResourceClaim(podResourceClaim: Partial<PodResourceClaim> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { podResourceClaim.name = n.getStringValue(); },
        "resourceClaimName": n => { podResourceClaim.resourceClaimName = n.getStringValue(); },
        "resourceClaimTemplateName": n => { podResourceClaim.resourceClaimTemplateName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodResourceClaimStatus(podResourceClaimStatus: Partial<PodResourceClaimStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { podResourceClaimStatus.name = n.getStringValue(); },
        "resourceClaimName": n => { podResourceClaimStatus.resourceClaimName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodSchedulingGate(podSchedulingGate: Partial<PodSchedulingGate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { podSchedulingGate.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodSecurityContext(podSecurityContext: Partial<PodSecurityContext> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "appArmorProfile": n => { podSecurityContext.appArmorProfile = n.getObjectValue<AppArmorProfile>(createAppArmorProfileFromDiscriminatorValue); },
        "fsGroup": n => { podSecurityContext.fsGroup = n.getNumberValue(); },
        "fsGroupChangePolicy": n => { podSecurityContext.fsGroupChangePolicy = n.getStringValue(); },
        "runAsGroup": n => { podSecurityContext.runAsGroup = n.getNumberValue(); },
        "runAsNonRoot": n => { podSecurityContext.runAsNonRoot = n.getBooleanValue(); },
        "runAsUser": n => { podSecurityContext.runAsUser = n.getNumberValue(); },
        "seccompProfile": n => { podSecurityContext.seccompProfile = n.getObjectValue<SeccompProfile>(createSeccompProfileFromDiscriminatorValue); },
        "seLinuxChangePolicy": n => { podSecurityContext.seLinuxChangePolicy = n.getStringValue(); },
        "seLinuxOptions": n => { podSecurityContext.seLinuxOptions = n.getObjectValue<SELinuxOptions>(createSELinuxOptionsFromDiscriminatorValue); },
        "supplementalGroups": n => { podSecurityContext.supplementalGroups = n.getCollectionOfPrimitiveValues<number>(); },
        "supplementalGroupsPolicy": n => { podSecurityContext.supplementalGroupsPolicy = n.getStringValue(); },
        "sysctls": n => { podSecurityContext.sysctls = n.getCollectionOfObjectValues<Sysctl>(createSysctlFromDiscriminatorValue); },
        "windowsOptions": n => { podSecurityContext.windowsOptions = n.getObjectValue<WindowsSecurityContextOptions>(createWindowsSecurityContextOptionsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodSpec(podSpec: Partial<PodSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "activeDeadlineSeconds": n => { podSpec.activeDeadlineSeconds = n.getNumberValue(); },
        "affinity": n => { podSpec.affinity = n.getObjectValue<Affinity>(createAffinityFromDiscriminatorValue); },
        "automountServiceAccountToken": n => { podSpec.automountServiceAccountToken = n.getBooleanValue(); },
        "containers": n => { podSpec.containers = n.getCollectionOfObjectValues<Container>(createContainerFromDiscriminatorValue); },
        "dnsConfig": n => { podSpec.dnsConfig = n.getObjectValue<PodDNSConfig>(createPodDNSConfigFromDiscriminatorValue); },
        "dnsPolicy": n => { podSpec.dnsPolicy = n.getStringValue(); },
        "enableServiceLinks": n => { podSpec.enableServiceLinks = n.getBooleanValue(); },
        "ephemeralContainers": n => { podSpec.ephemeralContainers = n.getCollectionOfObjectValues<EphemeralContainer>(createEphemeralContainerFromDiscriminatorValue); },
        "hostAliases": n => { podSpec.hostAliases = n.getCollectionOfObjectValues<HostAlias>(createHostAliasFromDiscriminatorValue); },
        "hostIPC": n => { podSpec.hostIPC = n.getBooleanValue(); },
        "hostname": n => { podSpec.hostname = n.getStringValue(); },
        "hostNetwork": n => { podSpec.hostNetwork = n.getBooleanValue(); },
        "hostPID": n => { podSpec.hostPID = n.getBooleanValue(); },
        "hostUsers": n => { podSpec.hostUsers = n.getBooleanValue(); },
        "imagePullSecrets": n => { podSpec.imagePullSecrets = n.getCollectionOfObjectValues<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "initContainers": n => { podSpec.initContainers = n.getCollectionOfObjectValues<Container>(createContainerFromDiscriminatorValue); },
        "nodeName": n => { podSpec.nodeName = n.getStringValue(); },
        "nodeSelector": n => { podSpec.nodeSelector = n.getObjectValue<PodSpec_nodeSelector>(createPodSpec_nodeSelectorFromDiscriminatorValue); },
        "os": n => { podSpec.os = n.getObjectValue<PodOS>(createPodOSFromDiscriminatorValue); },
        "overhead": n => { podSpec.overhead = n.getObjectValue<PodSpec_overhead>(createPodSpec_overheadFromDiscriminatorValue); },
        "preemptionPolicy": n => { podSpec.preemptionPolicy = n.getStringValue(); },
        "priority": n => { podSpec.priority = n.getNumberValue(); },
        "priorityClassName": n => { podSpec.priorityClassName = n.getStringValue(); },
        "readinessGates": n => { podSpec.readinessGates = n.getCollectionOfObjectValues<PodReadinessGate>(createPodReadinessGateFromDiscriminatorValue); },
        "resourceClaims": n => { podSpec.resourceClaims = n.getCollectionOfObjectValues<PodResourceClaim>(createPodResourceClaimFromDiscriminatorValue); },
        "resources": n => { podSpec.resources = n.getObjectValue<ResourceRequirements>(createResourceRequirementsFromDiscriminatorValue); },
        "restartPolicy": n => { podSpec.restartPolicy = n.getStringValue(); },
        "runtimeClassName": n => { podSpec.runtimeClassName = n.getStringValue(); },
        "schedulerName": n => { podSpec.schedulerName = n.getStringValue(); },
        "schedulingGates": n => { podSpec.schedulingGates = n.getCollectionOfObjectValues<PodSchedulingGate>(createPodSchedulingGateFromDiscriminatorValue); },
        "securityContext": n => { podSpec.securityContext = n.getObjectValue<PodSecurityContext>(createPodSecurityContextFromDiscriminatorValue); },
        "serviceAccount": n => { podSpec.serviceAccount = n.getStringValue(); },
        "serviceAccountName": n => { podSpec.serviceAccountName = n.getStringValue(); },
        "setHostnameAsFQDN": n => { podSpec.setHostnameAsFQDN = n.getBooleanValue(); },
        "shareProcessNamespace": n => { podSpec.shareProcessNamespace = n.getBooleanValue(); },
        "subdomain": n => { podSpec.subdomain = n.getStringValue(); },
        "terminationGracePeriodSeconds": n => { podSpec.terminationGracePeriodSeconds = n.getNumberValue(); },
        "tolerations": n => { podSpec.tolerations = n.getCollectionOfObjectValues<Toleration>(createTolerationFromDiscriminatorValue); },
        "topologySpreadConstraints": n => { podSpec.topologySpreadConstraints = n.getCollectionOfObjectValues<TopologySpreadConstraint>(createTopologySpreadConstraintFromDiscriminatorValue); },
        "volumes": n => { podSpec.volumes = n.getCollectionOfObjectValues<Volume>(createVolumeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodSpec_nodeSelector(podSpec_nodeSelector: Partial<PodSpec_nodeSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodSpec_overhead(podSpec_overhead: Partial<PodSpec_overhead> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodStatus(podStatus: Partial<PodStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { podStatus.conditions = n.getCollectionOfObjectValues<PodCondition>(createPodConditionFromDiscriminatorValue); },
        "containerStatuses": n => { podStatus.containerStatuses = n.getCollectionOfObjectValues<ContainerStatus>(createContainerStatusFromDiscriminatorValue); },
        "ephemeralContainerStatuses": n => { podStatus.ephemeralContainerStatuses = n.getCollectionOfObjectValues<ContainerStatus>(createContainerStatusFromDiscriminatorValue); },
        "hostIP": n => { podStatus.hostIP = n.getStringValue(); },
        "hostIPs": n => { podStatus.hostIPs = n.getCollectionOfObjectValues<HostIP>(createHostIPFromDiscriminatorValue); },
        "initContainerStatuses": n => { podStatus.initContainerStatuses = n.getCollectionOfObjectValues<ContainerStatus>(createContainerStatusFromDiscriminatorValue); },
        "message": n => { podStatus.message = n.getStringValue(); },
        "nominatedNodeName": n => { podStatus.nominatedNodeName = n.getStringValue(); },
        "phase": n => { podStatus.phase = n.getStringValue(); },
        "podIP": n => { podStatus.podIP = n.getStringValue(); },
        "podIPs": n => { podStatus.podIPs = n.getCollectionOfObjectValues<PodIP>(createPodIPFromDiscriminatorValue); },
        "qosClass": n => { podStatus.qosClass = n.getStringValue(); },
        "reason": n => { podStatus.reason = n.getStringValue(); },
        "resize": n => { podStatus.resize = n.getStringValue(); },
        "resourceClaimStatuses": n => { podStatus.resourceClaimStatuses = n.getCollectionOfObjectValues<PodResourceClaimStatus>(createPodResourceClaimStatusFromDiscriminatorValue); },
        "startTime": n => { podStatus.startTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodTemplate(podTemplate: Partial<PodTemplate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { podTemplate.apiVersion = n.getStringValue(); },
        "kind": n => { podTemplate.kind = n.getStringValue(); },
        "metadata": n => { podTemplate.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "template": n => { podTemplate.template = n.getObjectValue<PodTemplateSpec>(createPodTemplateSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodTemplateList(podTemplateList: Partial<PodTemplateList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { podTemplateList.apiVersion = n.getStringValue(); },
        "items": n => { podTemplateList.items = n.getCollectionOfObjectValues<PodTemplate>(createPodTemplateFromDiscriminatorValue); },
        "kind": n => { podTemplateList.kind = n.getStringValue(); },
        "metadata": n => { podTemplateList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodTemplateSpec(podTemplateSpec: Partial<PodTemplateSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "metadata": n => { podTemplateSpec.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { podTemplateSpec.spec = n.getObjectValue<PodSpec>(createPodSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPortStatus(portStatus: Partial<PortStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { portStatus.errorEscaped = n.getStringValue(); },
        "port": n => { portStatus.port = n.getNumberValue(); },
        "protocol": n => { portStatus.protocol = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPortworxVolumeSource(portworxVolumeSource: Partial<PortworxVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { portworxVolumeSource.fsType = n.getStringValue(); },
        "readOnly": n => { portworxVolumeSource.readOnly = n.getBooleanValue(); },
        "volumeID": n => { portworxVolumeSource.volumeID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreferredSchedulingTerm(preferredSchedulingTerm: Partial<PreferredSchedulingTerm> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "preference": n => { preferredSchedulingTerm.preference = n.getObjectValue<NodeSelectorTerm>(createNodeSelectorTermFromDiscriminatorValue); },
        "weight": n => { preferredSchedulingTerm.weight = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProbe(probe: Partial<Probe> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "exec": n => { probe.exec = n.getObjectValue<ExecAction>(createExecActionFromDiscriminatorValue); },
        "failureThreshold": n => { probe.failureThreshold = n.getNumberValue(); },
        "grpc": n => { probe.grpc = n.getObjectValue<GRPCAction>(createGRPCActionFromDiscriminatorValue); },
        "httpGet": n => { probe.httpGet = n.getObjectValue<HTTPGetAction>(createHTTPGetActionFromDiscriminatorValue); },
        "initialDelaySeconds": n => { probe.initialDelaySeconds = n.getNumberValue(); },
        "periodSeconds": n => { probe.periodSeconds = n.getNumberValue(); },
        "successThreshold": n => { probe.successThreshold = n.getNumberValue(); },
        "tcpSocket": n => { probe.tcpSocket = n.getObjectValue<TCPSocketAction>(createTCPSocketActionFromDiscriminatorValue); },
        "terminationGracePeriodSeconds": n => { probe.terminationGracePeriodSeconds = n.getNumberValue(); },
        "timeoutSeconds": n => { probe.timeoutSeconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectedVolumeSource(projectedVolumeSource: Partial<ProjectedVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultMode": n => { projectedVolumeSource.defaultMode = n.getNumberValue(); },
        "sources": n => { projectedVolumeSource.sources = n.getCollectionOfObjectValues<VolumeProjection>(createVolumeProjectionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQuobyteVolumeSource(quobyteVolumeSource: Partial<QuobyteVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "group": n => { quobyteVolumeSource.group = n.getStringValue(); },
        "readOnly": n => { quobyteVolumeSource.readOnly = n.getBooleanValue(); },
        "registry": n => { quobyteVolumeSource.registry = n.getStringValue(); },
        "tenant": n => { quobyteVolumeSource.tenant = n.getStringValue(); },
        "user": n => { quobyteVolumeSource.user = n.getStringValue(); },
        "volume": n => { quobyteVolumeSource.volume = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRBDPersistentVolumeSource(rBDPersistentVolumeSource: Partial<RBDPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { rBDPersistentVolumeSource.fsType = n.getStringValue(); },
        "image": n => { rBDPersistentVolumeSource.image = n.getStringValue(); },
        "keyring": n => { rBDPersistentVolumeSource.keyring = n.getStringValue(); },
        "monitors": n => { rBDPersistentVolumeSource.monitors = n.getCollectionOfPrimitiveValues<string>(); },
        "pool": n => { rBDPersistentVolumeSource.pool = n.getStringValue(); },
        "readOnly": n => { rBDPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { rBDPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "user": n => { rBDPersistentVolumeSource.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRBDVolumeSource(rBDVolumeSource: Partial<RBDVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { rBDVolumeSource.fsType = n.getStringValue(); },
        "image": n => { rBDVolumeSource.image = n.getStringValue(); },
        "keyring": n => { rBDVolumeSource.keyring = n.getStringValue(); },
        "monitors": n => { rBDVolumeSource.monitors = n.getCollectionOfPrimitiveValues<string>(); },
        "pool": n => { rBDVolumeSource.pool = n.getStringValue(); },
        "readOnly": n => { rBDVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { rBDVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "user": n => { rBDVolumeSource.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationController(replicationController: Partial<ReplicationController> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { replicationController.apiVersion = n.getStringValue(); },
        "kind": n => { replicationController.kind = n.getStringValue(); },
        "metadata": n => { replicationController.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { replicationController.spec = n.getObjectValue<ReplicationControllerSpec>(createReplicationControllerSpecFromDiscriminatorValue); },
        "status": n => { replicationController.status = n.getObjectValue<ReplicationControllerStatus>(createReplicationControllerStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationControllerCondition(replicationControllerCondition: Partial<ReplicationControllerCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { replicationControllerCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { replicationControllerCondition.message = n.getStringValue(); },
        "reason": n => { replicationControllerCondition.reason = n.getStringValue(); },
        "status": n => { replicationControllerCondition.status = n.getStringValue(); },
        "type": n => { replicationControllerCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationControllerList(replicationControllerList: Partial<ReplicationControllerList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { replicationControllerList.apiVersion = n.getStringValue(); },
        "items": n => { replicationControllerList.items = n.getCollectionOfObjectValues<ReplicationController>(createReplicationControllerFromDiscriminatorValue); },
        "kind": n => { replicationControllerList.kind = n.getStringValue(); },
        "metadata": n => { replicationControllerList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationControllerSpec(replicationControllerSpec: Partial<ReplicationControllerSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "minReadySeconds": n => { replicationControllerSpec.minReadySeconds = n.getNumberValue(); },
        "replicas": n => { replicationControllerSpec.replicas = n.getNumberValue(); },
        "selector": n => { replicationControllerSpec.selector = n.getObjectValue<ReplicationControllerSpec_selector>(createReplicationControllerSpec_selectorFromDiscriminatorValue); },
        "template": n => { replicationControllerSpec.template = n.getObjectValue<PodTemplateSpec>(createPodTemplateSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationControllerSpec_selector(replicationControllerSpec_selector: Partial<ReplicationControllerSpec_selector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicationControllerStatus(replicationControllerStatus: Partial<ReplicationControllerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "availableReplicas": n => { replicationControllerStatus.availableReplicas = n.getNumberValue(); },
        "conditions": n => { replicationControllerStatus.conditions = n.getCollectionOfObjectValues<ReplicationControllerCondition>(createReplicationControllerConditionFromDiscriminatorValue); },
        "fullyLabeledReplicas": n => { replicationControllerStatus.fullyLabeledReplicas = n.getNumberValue(); },
        "observedGeneration": n => { replicationControllerStatus.observedGeneration = n.getNumberValue(); },
        "readyReplicas": n => { replicationControllerStatus.readyReplicas = n.getNumberValue(); },
        "replicas": n => { replicationControllerStatus.replicas = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaim(resourceClaim: Partial<ResourceClaim> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { resourceClaim.name = n.getStringValue(); },
        "request": n => { resourceClaim.request = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceFieldSelector(resourceFieldSelector: Partial<ResourceFieldSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "containerName": n => { resourceFieldSelector.containerName = n.getStringValue(); },
        "divisor": n => { resourceFieldSelector.divisor = n.getStringValue(); },
        "resource": n => { resourceFieldSelector.resource = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceHealth(resourceHealth: Partial<ResourceHealth> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "health": n => { resourceHealth.health = n.getStringValue(); },
        "resourceID": n => { resourceHealth.resourceID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuota(resourceQuota: Partial<ResourceQuota> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceQuota.apiVersion = n.getStringValue(); },
        "kind": n => { resourceQuota.kind = n.getStringValue(); },
        "metadata": n => { resourceQuota.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { resourceQuota.spec = n.getObjectValue<ResourceQuotaSpec>(createResourceQuotaSpecFromDiscriminatorValue); },
        "status": n => { resourceQuota.status = n.getObjectValue<ResourceQuotaStatus>(createResourceQuotaStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaList(resourceQuotaList: Partial<ResourceQuotaList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceQuotaList.apiVersion = n.getStringValue(); },
        "items": n => { resourceQuotaList.items = n.getCollectionOfObjectValues<ResourceQuota>(createResourceQuotaFromDiscriminatorValue); },
        "kind": n => { resourceQuotaList.kind = n.getStringValue(); },
        "metadata": n => { resourceQuotaList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaSpec(resourceQuotaSpec: Partial<ResourceQuotaSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hard": n => { resourceQuotaSpec.hard = n.getObjectValue<ResourceQuotaSpec_hard>(createResourceQuotaSpec_hardFromDiscriminatorValue); },
        "scopes": n => { resourceQuotaSpec.scopes = n.getCollectionOfPrimitiveValues<string>(); },
        "scopeSelector": n => { resourceQuotaSpec.scopeSelector = n.getObjectValue<ScopeSelector>(createScopeSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaSpec_hard(resourceQuotaSpec_hard: Partial<ResourceQuotaSpec_hard> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaStatus(resourceQuotaStatus: Partial<ResourceQuotaStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hard": n => { resourceQuotaStatus.hard = n.getObjectValue<ResourceQuotaStatus_hard>(createResourceQuotaStatus_hardFromDiscriminatorValue); },
        "used": n => { resourceQuotaStatus.used = n.getObjectValue<ResourceQuotaStatus_used>(createResourceQuotaStatus_usedFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaStatus_hard(resourceQuotaStatus_hard: Partial<ResourceQuotaStatus_hard> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceQuotaStatus_used(resourceQuotaStatus_used: Partial<ResourceQuotaStatus_used> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceRequirements(resourceRequirements: Partial<ResourceRequirements> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "claims": n => { resourceRequirements.claims = n.getCollectionOfObjectValues<ResourceClaim>(createResourceClaimFromDiscriminatorValue); },
        "limits": n => { resourceRequirements.limits = n.getObjectValue<ResourceRequirements_limits>(createResourceRequirements_limitsFromDiscriminatorValue); },
        "requests": n => { resourceRequirements.requests = n.getObjectValue<ResourceRequirements_requests>(createResourceRequirements_requestsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceRequirements_limits(resourceRequirements_limits: Partial<ResourceRequirements_limits> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceRequirements_requests(resourceRequirements_requests: Partial<ResourceRequirements_requests> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceStatus(resourceStatus: Partial<ResourceStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { resourceStatus.name = n.getStringValue(); },
        "resources": n => { resourceStatus.resources = n.getCollectionOfObjectValues<ResourceHealth>(createResourceHealthFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScaleIOPersistentVolumeSource(scaleIOPersistentVolumeSource: Partial<ScaleIOPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { scaleIOPersistentVolumeSource.fsType = n.getStringValue(); },
        "gateway": n => { scaleIOPersistentVolumeSource.gateway = n.getStringValue(); },
        "protectionDomain": n => { scaleIOPersistentVolumeSource.protectionDomain = n.getStringValue(); },
        "readOnly": n => { scaleIOPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { scaleIOPersistentVolumeSource.secretRef = n.getObjectValue<SecretReference>(createSecretReferenceFromDiscriminatorValue); },
        "sslEnabled": n => { scaleIOPersistentVolumeSource.sslEnabled = n.getBooleanValue(); },
        "storageMode": n => { scaleIOPersistentVolumeSource.storageMode = n.getStringValue(); },
        "storagePool": n => { scaleIOPersistentVolumeSource.storagePool = n.getStringValue(); },
        "system": n => { scaleIOPersistentVolumeSource.system = n.getStringValue(); },
        "volumeName": n => { scaleIOPersistentVolumeSource.volumeName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScaleIOVolumeSource(scaleIOVolumeSource: Partial<ScaleIOVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { scaleIOVolumeSource.fsType = n.getStringValue(); },
        "gateway": n => { scaleIOVolumeSource.gateway = n.getStringValue(); },
        "protectionDomain": n => { scaleIOVolumeSource.protectionDomain = n.getStringValue(); },
        "readOnly": n => { scaleIOVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { scaleIOVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "sslEnabled": n => { scaleIOVolumeSource.sslEnabled = n.getBooleanValue(); },
        "storageMode": n => { scaleIOVolumeSource.storageMode = n.getStringValue(); },
        "storagePool": n => { scaleIOVolumeSource.storagePool = n.getStringValue(); },
        "system": n => { scaleIOVolumeSource.system = n.getStringValue(); },
        "volumeName": n => { scaleIOVolumeSource.volumeName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScopedResourceSelectorRequirement(scopedResourceSelectorRequirement: Partial<ScopedResourceSelectorRequirement> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "operator": n => { scopedResourceSelectorRequirement.operator = n.getStringValue(); },
        "scopeName": n => { scopedResourceSelectorRequirement.scopeName = n.getStringValue(); },
        "values": n => { scopedResourceSelectorRequirement.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScopeSelector(scopeSelector: Partial<ScopeSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchExpressions": n => { scopeSelector.matchExpressions = n.getCollectionOfObjectValues<ScopedResourceSelectorRequirement>(createScopedResourceSelectorRequirementFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSeccompProfile(seccompProfile: Partial<SeccompProfile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "localhostProfile": n => { seccompProfile.localhostProfile = n.getStringValue(); },
        "type": n => { seccompProfile.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecret(secret: Partial<Secret> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { secret.apiVersion = n.getStringValue(); },
        "data": n => { secret.data = n.getObjectValue<Secret_data>(createSecret_dataFromDiscriminatorValue); },
        "immutable": n => { secret.immutable = n.getBooleanValue(); },
        "kind": n => { secret.kind = n.getStringValue(); },
        "metadata": n => { secret.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "stringData": n => { secret.stringData = n.getObjectValue<Secret_stringData>(createSecret_stringDataFromDiscriminatorValue); },
        "type": n => { secret.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecret_data(secret_data: Partial<Secret_data> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecret_stringData(secret_stringData: Partial<Secret_stringData> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretEnvSource(secretEnvSource: Partial<SecretEnvSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { secretEnvSource.name = n.getStringValue(); },
        "optional": n => { secretEnvSource.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretKeySelector(secretKeySelector: Partial<SecretKeySelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { secretKeySelector.key = n.getStringValue(); },
        "name": n => { secretKeySelector.name = n.getStringValue(); },
        "optional": n => { secretKeySelector.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretList(secretList: Partial<SecretList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { secretList.apiVersion = n.getStringValue(); },
        "items": n => { secretList.items = n.getCollectionOfObjectValues<Secret>(createSecretFromDiscriminatorValue); },
        "kind": n => { secretList.kind = n.getStringValue(); },
        "metadata": n => { secretList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretProjection(secretProjection: Partial<SecretProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { secretProjection.items = n.getCollectionOfObjectValues<KeyToPath>(createKeyToPathFromDiscriminatorValue); },
        "name": n => { secretProjection.name = n.getStringValue(); },
        "optional": n => { secretProjection.optional = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretReference(secretReference: Partial<SecretReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { secretReference.name = n.getStringValue(); },
        "namespace": n => { secretReference.namespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecretVolumeSource(secretVolumeSource: Partial<SecretVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultMode": n => { secretVolumeSource.defaultMode = n.getNumberValue(); },
        "items": n => { secretVolumeSource.items = n.getCollectionOfObjectValues<KeyToPath>(createKeyToPathFromDiscriminatorValue); },
        "optional": n => { secretVolumeSource.optional = n.getBooleanValue(); },
        "secretName": n => { secretVolumeSource.secretName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSecurityContext(securityContext: Partial<SecurityContext> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allowPrivilegeEscalation": n => { securityContext.allowPrivilegeEscalation = n.getBooleanValue(); },
        "appArmorProfile": n => { securityContext.appArmorProfile = n.getObjectValue<AppArmorProfile>(createAppArmorProfileFromDiscriminatorValue); },
        "capabilities": n => { securityContext.capabilities = n.getObjectValue<Capabilities>(createCapabilitiesFromDiscriminatorValue); },
        "privileged": n => { securityContext.privileged = n.getBooleanValue(); },
        "procMount": n => { securityContext.procMount = n.getStringValue(); },
        "readOnlyRootFilesystem": n => { securityContext.readOnlyRootFilesystem = n.getBooleanValue(); },
        "runAsGroup": n => { securityContext.runAsGroup = n.getNumberValue(); },
        "runAsNonRoot": n => { securityContext.runAsNonRoot = n.getBooleanValue(); },
        "runAsUser": n => { securityContext.runAsUser = n.getNumberValue(); },
        "seccompProfile": n => { securityContext.seccompProfile = n.getObjectValue<SeccompProfile>(createSeccompProfileFromDiscriminatorValue); },
        "seLinuxOptions": n => { securityContext.seLinuxOptions = n.getObjectValue<SELinuxOptions>(createSELinuxOptionsFromDiscriminatorValue); },
        "windowsOptions": n => { securityContext.windowsOptions = n.getObjectValue<WindowsSecurityContextOptions>(createWindowsSecurityContextOptionsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSELinuxOptions(sELinuxOptions: Partial<SELinuxOptions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "level": n => { sELinuxOptions.level = n.getStringValue(); },
        "role": n => { sELinuxOptions.role = n.getStringValue(); },
        "type": n => { sELinuxOptions.type = n.getStringValue(); },
        "user": n => { sELinuxOptions.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoService(service: Partial<Service> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { service.apiVersion = n.getStringValue(); },
        "kind": n => { service.kind = n.getStringValue(); },
        "metadata": n => { service.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { service.spec = n.getObjectValue<ServiceSpec>(createServiceSpecFromDiscriminatorValue); },
        "status": n => { service.status = n.getObjectValue<ServiceStatus>(createServiceStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccount(serviceAccount: Partial<ServiceAccount> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { serviceAccount.apiVersion = n.getStringValue(); },
        "automountServiceAccountToken": n => { serviceAccount.automountServiceAccountToken = n.getBooleanValue(); },
        "imagePullSecrets": n => { serviceAccount.imagePullSecrets = n.getCollectionOfObjectValues<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "kind": n => { serviceAccount.kind = n.getStringValue(); },
        "metadata": n => { serviceAccount.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "secrets": n => { serviceAccount.secrets = n.getCollectionOfObjectValues<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountList(serviceAccountList: Partial<ServiceAccountList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { serviceAccountList.apiVersion = n.getStringValue(); },
        "items": n => { serviceAccountList.items = n.getCollectionOfObjectValues<ServiceAccount>(createServiceAccountFromDiscriminatorValue); },
        "kind": n => { serviceAccountList.kind = n.getStringValue(); },
        "metadata": n => { serviceAccountList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountTokenProjection(serviceAccountTokenProjection: Partial<ServiceAccountTokenProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "audience": n => { serviceAccountTokenProjection.audience = n.getStringValue(); },
        "expirationSeconds": n => { serviceAccountTokenProjection.expirationSeconds = n.getNumberValue(); },
        "path": n => { serviceAccountTokenProjection.path = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceList(serviceList: Partial<ServiceList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { serviceList.apiVersion = n.getStringValue(); },
        "items": n => { serviceList.items = n.getCollectionOfObjectValues<Service>(createServiceFromDiscriminatorValue); },
        "kind": n => { serviceList.kind = n.getStringValue(); },
        "metadata": n => { serviceList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServicePort(servicePort: Partial<ServicePort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "appProtocol": n => { servicePort.appProtocol = n.getStringValue(); },
        "name": n => { servicePort.name = n.getStringValue(); },
        "nodePort": n => { servicePort.nodePort = n.getNumberValue(); },
        "port": n => { servicePort.port = n.getNumberValue(); },
        "protocol": n => { servicePort.protocol = n.getStringValue(); },
        "targetPort": n => { servicePort.targetPort = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceSpec(serviceSpec: Partial<ServiceSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allocateLoadBalancerNodePorts": n => { serviceSpec.allocateLoadBalancerNodePorts = n.getBooleanValue(); },
        "clusterIP": n => { serviceSpec.clusterIP = n.getStringValue(); },
        "clusterIPs": n => { serviceSpec.clusterIPs = n.getCollectionOfPrimitiveValues<string>(); },
        "externalIPs": n => { serviceSpec.externalIPs = n.getCollectionOfPrimitiveValues<string>(); },
        "externalName": n => { serviceSpec.externalName = n.getStringValue(); },
        "externalTrafficPolicy": n => { serviceSpec.externalTrafficPolicy = n.getStringValue(); },
        "healthCheckNodePort": n => { serviceSpec.healthCheckNodePort = n.getNumberValue(); },
        "internalTrafficPolicy": n => { serviceSpec.internalTrafficPolicy = n.getStringValue(); },
        "ipFamilies": n => { serviceSpec.ipFamilies = n.getCollectionOfPrimitiveValues<string>(); },
        "ipFamilyPolicy": n => { serviceSpec.ipFamilyPolicy = n.getStringValue(); },
        "loadBalancerClass": n => { serviceSpec.loadBalancerClass = n.getStringValue(); },
        "loadBalancerIP": n => { serviceSpec.loadBalancerIP = n.getStringValue(); },
        "loadBalancerSourceRanges": n => { serviceSpec.loadBalancerSourceRanges = n.getCollectionOfPrimitiveValues<string>(); },
        "ports": n => { serviceSpec.ports = n.getCollectionOfObjectValues<ServicePort>(createServicePortFromDiscriminatorValue); },
        "publishNotReadyAddresses": n => { serviceSpec.publishNotReadyAddresses = n.getBooleanValue(); },
        "selector": n => { serviceSpec.selector = n.getObjectValue<ServiceSpec_selector>(createServiceSpec_selectorFromDiscriminatorValue); },
        "sessionAffinity": n => { serviceSpec.sessionAffinity = n.getStringValue(); },
        "sessionAffinityConfig": n => { serviceSpec.sessionAffinityConfig = n.getObjectValue<SessionAffinityConfig>(createSessionAffinityConfigFromDiscriminatorValue); },
        "trafficDistribution": n => { serviceSpec.trafficDistribution = n.getStringValue(); },
        "type": n => { serviceSpec.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceSpec_selector(serviceSpec_selector: Partial<ServiceSpec_selector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceStatus(serviceStatus: Partial<ServiceStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { serviceStatus.conditions = n.getCollectionOfObjectValues<Condition>(createConditionFromDiscriminatorValue); },
        "loadBalancer": n => { serviceStatus.loadBalancer = n.getObjectValue<LoadBalancerStatus>(createLoadBalancerStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSessionAffinityConfig(sessionAffinityConfig: Partial<SessionAffinityConfig> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "clientIP": n => { sessionAffinityConfig.clientIP = n.getObjectValue<ClientIPConfig>(createClientIPConfigFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSleepAction(sleepAction: Partial<SleepAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "seconds": n => { sleepAction.seconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStorageOSPersistentVolumeSource(storageOSPersistentVolumeSource: Partial<StorageOSPersistentVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { storageOSPersistentVolumeSource.fsType = n.getStringValue(); },
        "readOnly": n => { storageOSPersistentVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { storageOSPersistentVolumeSource.secretRef = n.getObjectValue<ObjectReference>(createObjectReferenceFromDiscriminatorValue); },
        "volumeName": n => { storageOSPersistentVolumeSource.volumeName = n.getStringValue(); },
        "volumeNamespace": n => { storageOSPersistentVolumeSource.volumeNamespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStorageOSVolumeSource(storageOSVolumeSource: Partial<StorageOSVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { storageOSVolumeSource.fsType = n.getStringValue(); },
        "readOnly": n => { storageOSVolumeSource.readOnly = n.getBooleanValue(); },
        "secretRef": n => { storageOSVolumeSource.secretRef = n.getObjectValue<LocalObjectReference>(createLocalObjectReferenceFromDiscriminatorValue); },
        "volumeName": n => { storageOSVolumeSource.volumeName = n.getStringValue(); },
        "volumeNamespace": n => { storageOSVolumeSource.volumeNamespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSysctl(sysctl: Partial<Sysctl> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { sysctl.name = n.getStringValue(); },
        "value": n => { sysctl.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTaint(taint: Partial<Taint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "effect": n => { taint.effect = n.getStringValue(); },
        "key": n => { taint.key = n.getStringValue(); },
        "timeAdded": n => { taint.timeAdded = n.getDateValue(); },
        "value": n => { taint.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTCPSocketAction(tCPSocketAction: Partial<TCPSocketAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "host": n => { tCPSocketAction.host = n.getStringValue(); },
        "port": n => { tCPSocketAction.port = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoToleration(toleration: Partial<Toleration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "effect": n => { toleration.effect = n.getStringValue(); },
        "key": n => { toleration.key = n.getStringValue(); },
        "operator": n => { toleration.operator = n.getStringValue(); },
        "tolerationSeconds": n => { toleration.tolerationSeconds = n.getNumberValue(); },
        "value": n => { toleration.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopologySelectorLabelRequirement(topologySelectorLabelRequirement: Partial<TopologySelectorLabelRequirement> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { topologySelectorLabelRequirement.key = n.getStringValue(); },
        "values": n => { topologySelectorLabelRequirement.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopologySelectorTerm(topologySelectorTerm: Partial<TopologySelectorTerm> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchLabelExpressions": n => { topologySelectorTerm.matchLabelExpressions = n.getCollectionOfObjectValues<TopologySelectorLabelRequirement>(createTopologySelectorLabelRequirementFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopologySpreadConstraint(topologySpreadConstraint: Partial<TopologySpreadConstraint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "labelSelector": n => { topologySpreadConstraint.labelSelector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "matchLabelKeys": n => { topologySpreadConstraint.matchLabelKeys = n.getCollectionOfPrimitiveValues<string>(); },
        "maxSkew": n => { topologySpreadConstraint.maxSkew = n.getNumberValue(); },
        "minDomains": n => { topologySpreadConstraint.minDomains = n.getNumberValue(); },
        "nodeAffinityPolicy": n => { topologySpreadConstraint.nodeAffinityPolicy = n.getStringValue(); },
        "nodeTaintsPolicy": n => { topologySpreadConstraint.nodeTaintsPolicy = n.getStringValue(); },
        "topologyKey": n => { topologySpreadConstraint.topologyKey = n.getStringValue(); },
        "whenUnsatisfiable": n => { topologySpreadConstraint.whenUnsatisfiable = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTypedLocalObjectReference(typedLocalObjectReference: Partial<TypedLocalObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroup": n => { typedLocalObjectReference.apiGroup = n.getStringValue(); },
        "kind": n => { typedLocalObjectReference.kind = n.getStringValue(); },
        "name": n => { typedLocalObjectReference.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTypedObjectReference(typedObjectReference: Partial<TypedObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroup": n => { typedObjectReference.apiGroup = n.getStringValue(); },
        "kind": n => { typedObjectReference.kind = n.getStringValue(); },
        "name": n => { typedObjectReference.name = n.getStringValue(); },
        "namespace": n => { typedObjectReference.namespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolume(volume: Partial<Volume> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "awsElasticBlockStore": n => { volume.awsElasticBlockStore = n.getObjectValue<AWSElasticBlockStoreVolumeSource>(createAWSElasticBlockStoreVolumeSourceFromDiscriminatorValue); },
        "azureDisk": n => { volume.azureDisk = n.getObjectValue<AzureDiskVolumeSource>(createAzureDiskVolumeSourceFromDiscriminatorValue); },
        "azureFile": n => { volume.azureFile = n.getObjectValue<AzureFileVolumeSource>(createAzureFileVolumeSourceFromDiscriminatorValue); },
        "cephfs": n => { volume.cephfs = n.getObjectValue<CephFSVolumeSource>(createCephFSVolumeSourceFromDiscriminatorValue); },
        "cinder": n => { volume.cinder = n.getObjectValue<CinderVolumeSource>(createCinderVolumeSourceFromDiscriminatorValue); },
        "configMap": n => { volume.configMap = n.getObjectValue<ConfigMapVolumeSource>(createConfigMapVolumeSourceFromDiscriminatorValue); },
        "csi": n => { volume.csi = n.getObjectValue<CSIVolumeSource>(createCSIVolumeSourceFromDiscriminatorValue); },
        "downwardAPI": n => { volume.downwardAPI = n.getObjectValue<DownwardAPIVolumeSource>(createDownwardAPIVolumeSourceFromDiscriminatorValue); },
        "emptyDir": n => { volume.emptyDir = n.getObjectValue<EmptyDirVolumeSource>(createEmptyDirVolumeSourceFromDiscriminatorValue); },
        "ephemeral": n => { volume.ephemeral = n.getObjectValue<EphemeralVolumeSource>(createEphemeralVolumeSourceFromDiscriminatorValue); },
        "fc": n => { volume.fc = n.getObjectValue<FCVolumeSource>(createFCVolumeSourceFromDiscriminatorValue); },
        "flexVolume": n => { volume.flexVolume = n.getObjectValue<FlexVolumeSource>(createFlexVolumeSourceFromDiscriminatorValue); },
        "flocker": n => { volume.flocker = n.getObjectValue<FlockerVolumeSource>(createFlockerVolumeSourceFromDiscriminatorValue); },
        "gcePersistentDisk": n => { volume.gcePersistentDisk = n.getObjectValue<GCEPersistentDiskVolumeSource>(createGCEPersistentDiskVolumeSourceFromDiscriminatorValue); },
        "gitRepo": n => { volume.gitRepo = n.getObjectValue<GitRepoVolumeSource>(createGitRepoVolumeSourceFromDiscriminatorValue); },
        "glusterfs": n => { volume.glusterfs = n.getObjectValue<GlusterfsVolumeSource>(createGlusterfsVolumeSourceFromDiscriminatorValue); },
        "hostPath": n => { volume.hostPath = n.getObjectValue<HostPathVolumeSource>(createHostPathVolumeSourceFromDiscriminatorValue); },
        "image": n => { volume.image = n.getObjectValue<ImageVolumeSource>(createImageVolumeSourceFromDiscriminatorValue); },
        "iscsi": n => { volume.iscsi = n.getObjectValue<ISCSIVolumeSource>(createISCSIVolumeSourceFromDiscriminatorValue); },
        "name": n => { volume.name = n.getStringValue(); },
        "nfs": n => { volume.nfs = n.getObjectValue<NFSVolumeSource>(createNFSVolumeSourceFromDiscriminatorValue); },
        "persistentVolumeClaim": n => { volume.persistentVolumeClaim = n.getObjectValue<PersistentVolumeClaimVolumeSource>(createPersistentVolumeClaimVolumeSourceFromDiscriminatorValue); },
        "photonPersistentDisk": n => { volume.photonPersistentDisk = n.getObjectValue<PhotonPersistentDiskVolumeSource>(createPhotonPersistentDiskVolumeSourceFromDiscriminatorValue); },
        "portworxVolume": n => { volume.portworxVolume = n.getObjectValue<PortworxVolumeSource>(createPortworxVolumeSourceFromDiscriminatorValue); },
        "projected": n => { volume.projected = n.getObjectValue<ProjectedVolumeSource>(createProjectedVolumeSourceFromDiscriminatorValue); },
        "quobyte": n => { volume.quobyte = n.getObjectValue<QuobyteVolumeSource>(createQuobyteVolumeSourceFromDiscriminatorValue); },
        "rbd": n => { volume.rbd = n.getObjectValue<RBDVolumeSource>(createRBDVolumeSourceFromDiscriminatorValue); },
        "scaleIO": n => { volume.scaleIO = n.getObjectValue<ScaleIOVolumeSource>(createScaleIOVolumeSourceFromDiscriminatorValue); },
        "secret": n => { volume.secret = n.getObjectValue<SecretVolumeSource>(createSecretVolumeSourceFromDiscriminatorValue); },
        "storageos": n => { volume.storageos = n.getObjectValue<StorageOSVolumeSource>(createStorageOSVolumeSourceFromDiscriminatorValue); },
        "vsphereVolume": n => { volume.vsphereVolume = n.getObjectValue<VsphereVirtualDiskVolumeSource>(createVsphereVirtualDiskVolumeSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeDevice(volumeDevice: Partial<VolumeDevice> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "devicePath": n => { volumeDevice.devicePath = n.getStringValue(); },
        "name": n => { volumeDevice.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeMount(volumeMount: Partial<VolumeMount> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "mountPath": n => { volumeMount.mountPath = n.getStringValue(); },
        "mountPropagation": n => { volumeMount.mountPropagation = n.getStringValue(); },
        "name": n => { volumeMount.name = n.getStringValue(); },
        "readOnly": n => { volumeMount.readOnly = n.getBooleanValue(); },
        "recursiveReadOnly": n => { volumeMount.recursiveReadOnly = n.getStringValue(); },
        "subPath": n => { volumeMount.subPath = n.getStringValue(); },
        "subPathExpr": n => { volumeMount.subPathExpr = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeMountStatus(volumeMountStatus: Partial<VolumeMountStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "mountPath": n => { volumeMountStatus.mountPath = n.getStringValue(); },
        "name": n => { volumeMountStatus.name = n.getStringValue(); },
        "readOnly": n => { volumeMountStatus.readOnly = n.getBooleanValue(); },
        "recursiveReadOnly": n => { volumeMountStatus.recursiveReadOnly = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeNodeAffinity(volumeNodeAffinity: Partial<VolumeNodeAffinity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "required": n => { volumeNodeAffinity.required = n.getObjectValue<NodeSelector>(createNodeSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeProjection(volumeProjection: Partial<VolumeProjection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "clusterTrustBundle": n => { volumeProjection.clusterTrustBundle = n.getObjectValue<ClusterTrustBundleProjection>(createClusterTrustBundleProjectionFromDiscriminatorValue); },
        "configMap": n => { volumeProjection.configMap = n.getObjectValue<ConfigMapProjection>(createConfigMapProjectionFromDiscriminatorValue); },
        "downwardAPI": n => { volumeProjection.downwardAPI = n.getObjectValue<DownwardAPIProjection>(createDownwardAPIProjectionFromDiscriminatorValue); },
        "secret": n => { volumeProjection.secret = n.getObjectValue<SecretProjection>(createSecretProjectionFromDiscriminatorValue); },
        "serviceAccountToken": n => { volumeProjection.serviceAccountToken = n.getObjectValue<ServiceAccountTokenProjection>(createServiceAccountTokenProjectionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeResourceRequirements(volumeResourceRequirements: Partial<VolumeResourceRequirements> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "limits": n => { volumeResourceRequirements.limits = n.getObjectValue<VolumeResourceRequirements_limits>(createVolumeResourceRequirements_limitsFromDiscriminatorValue); },
        "requests": n => { volumeResourceRequirements.requests = n.getObjectValue<VolumeResourceRequirements_requests>(createVolumeResourceRequirements_requestsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeResourceRequirements_limits(volumeResourceRequirements_limits: Partial<VolumeResourceRequirements_limits> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumeResourceRequirements_requests(volumeResourceRequirements_requests: Partial<VolumeResourceRequirements_requests> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVsphereVirtualDiskVolumeSource(vsphereVirtualDiskVolumeSource: Partial<VsphereVirtualDiskVolumeSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fsType": n => { vsphereVirtualDiskVolumeSource.fsType = n.getStringValue(); },
        "storagePolicyID": n => { vsphereVirtualDiskVolumeSource.storagePolicyID = n.getStringValue(); },
        "storagePolicyName": n => { vsphereVirtualDiskVolumeSource.storagePolicyName = n.getStringValue(); },
        "volumePath": n => { vsphereVirtualDiskVolumeSource.volumePath = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWeightedPodAffinityTerm(weightedPodAffinityTerm: Partial<WeightedPodAffinityTerm> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "podAffinityTerm": n => { weightedPodAffinityTerm.podAffinityTerm = n.getObjectValue<PodAffinityTerm>(createPodAffinityTermFromDiscriminatorValue); },
        "weight": n => { weightedPodAffinityTerm.weight = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWindowsSecurityContextOptions(windowsSecurityContextOptions: Partial<WindowsSecurityContextOptions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "gmsaCredentialSpec": n => { windowsSecurityContextOptions.gmsaCredentialSpec = n.getStringValue(); },
        "gmsaCredentialSpecName": n => { windowsSecurityContextOptions.gmsaCredentialSpecName = n.getStringValue(); },
        "hostProcess": n => { windowsSecurityContextOptions.hostProcess = n.getBooleanValue(); },
        "runAsUserName": n => { windowsSecurityContextOptions.runAsUserName = n.getStringValue(); },
    }
}
/**
 * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
 */
export interface DownwardAPIProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Items is a list of DownwardAPIVolume file
     */
    items?: DownwardAPIVolumeFile[] | null;
}
/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 */
export interface DownwardAPIVolumeFile extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ObjectFieldSelector selects an APIVersioned field of an object.
     */
    fieldRef?: ObjectFieldSelector | null;
    /**
     * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: number | null;
    /**
     * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path?: string | null;
    /**
     * ResourceFieldSelector represents container resources (cpu, memory) and their output format
     */
    resourceFieldRef?: ResourceFieldSelector | null;
}
/**
 * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
 */
export interface DownwardAPIVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: number | null;
    /**
     * Items is a list of downward API volume file
     */
    items?: DownwardAPIVolumeFile[] | null;
}
/**
 * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
 */
export interface EmptyDirVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    sizeLimit?: string | null;
}
/**
 * EndpointAddress is a tuple that describes single IP address. Deprecated: This API is deprecated in v1.33+.
 */
export interface EndpointAddress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Hostname of this endpoint
     */
    hostname?: string | null;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
     */
    ip?: string | null;
    /**
     * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    targetRef?: ObjectReference | null;
}
/**
 * EndpointPort is a tuple that describes a single port. Deprecated: This API is deprecated in v1.33+.
 */
export interface EndpointPort extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).* Kubernetes-defined prefixed names:  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
     */
    appProtocol?: string | null;
    /**
     * The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
     */
    name?: string | null;
    /**
     * The port number of the endpoint.
     */
    port?: number | null;
    /**
     * The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
     */
    protocol?: string | null;
}
/**
 * Endpoints is a collection of endpoints that implement the actual service. Example: Name: "mysvc", Subsets: [   {     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]   },   {     Addresses: [{"ip": "10.10.3.3"}],     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]   },]Endpoints is a legacy API and does not contain information about all Service features. Use discoveryv1.EndpointSlice for complete information about Service endpoints.Deprecated: This API is deprecated in v1.33+. Use discoveryv1.EndpointSlice.
 */
export interface Endpoints extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
     */
    subsets?: EndpointSubset[] | null;
}
/**
 * EndpointsList is a list of endpoints. Deprecated: This API is deprecated in v1.33+.
 */
export interface EndpointsList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of endpoints.
     */
    items?: Endpoints[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:{  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]}The resulting set of endpoints can be viewed as:a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],b: [ 10.10.1.1:309, 10.10.2.2:309 ]Deprecated: This API is deprecated in v1.33+.
 */
export interface EndpointSubset extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
     */
    addresses?: EndpointAddress[] | null;
    /**
     * IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
     */
    notReadyAddresses?: EndpointAddress[] | null;
    /**
     * Port numbers available on the related IP addresses.
     */
    ports?: EndpointPort[] | null;
}
/**
 * EnvFromSource represents the source of a set of ConfigMaps or Secrets
 */
export interface EnvFromSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
     */
    configMapRef?: ConfigMapEnvSource | null;
    /**
     * Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
     */
    prefix?: string | null;
    /**
     * SecretEnvSource selects a Secret to populate the environment variables with.The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
     */
    secretRef?: SecretEnvSource | null;
}
/**
 * EnvVar represents an environment variable present in a Container.
 */
export interface EnvVar extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name?: string | null;
    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string | null;
    /**
     * EnvVarSource represents a source for the value of an EnvVar.
     */
    valueFrom?: EnvVarSource | null;
}
/**
 * EnvVarSource represents a source for the value of an EnvVar.
 */
export interface EnvVarSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Selects a key from a ConfigMap.
     */
    configMapKeyRef?: ConfigMapKeySelector | null;
    /**
     * ObjectFieldSelector selects an APIVersioned field of an object.
     */
    fieldRef?: ObjectFieldSelector | null;
    /**
     * ResourceFieldSelector represents container resources (cpu, memory) and their output format
     */
    resourceFieldRef?: ResourceFieldSelector | null;
    /**
     * SecretKeySelector selects a key of a Secret.
     */
    secretKeyRef?: SecretKeySelector | null;
}
/**
 * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
 */
export interface EphemeralContainer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[] | null;
    /**
     * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    command?: string[] | null;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    env?: EnvVar[] | null;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFrom?: EnvFromSource[] | null;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
     */
    image?: string | null;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     */
    imagePullPolicy?: string | null;
    /**
     * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
     */
    lifecycle?: Lifecycle | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    livenessProbe?: Probe | null;
    /**
     * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
     */
    name?: string | null;
    /**
     * Ports are not allowed for ephemeral containers.
     */
    ports?: ContainerPort[] | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    readinessProbe?: Probe | null;
    /**
     * Resources resize policy for the container.
     */
    resizePolicy?: ContainerResizePolicy[] | null;
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    resources?: ResourceRequirements | null;
    /**
     * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
     */
    restartPolicy?: string | null;
    /**
     * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
     */
    securityContext?: SecurityContext | null;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    startupProbe?: Probe | null;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     */
    stdin?: boolean | null;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     */
    stdinOnce?: boolean | null;
    /**
     * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
     */
    targetContainerName?: string | null;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string | null;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy?: string | null;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     */
    tty?: boolean | null;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     */
    volumeDevices?: VolumeDevice[] | null;
    /**
     * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
     */
    volumeMounts?: VolumeMount[] | null;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string | null;
}
/**
 * Represents an ephemeral volume that is handled by a normal storage driver.
 */
export interface EphemeralVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
     */
    volumeClaimTemplate?: PersistentVolumeClaimTemplate | null;
}
/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 */
export interface Event extends AdditionalDataHolder, Parsable {
    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    action?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * The number of times this event has occurred.
     */
    count?: number | null;
    /**
     * MicroTime is version of Time with microsecond level precision.
     */
    eventTime?: Date | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    firstTimestamp?: Date | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    involvedObject?: ObjectReference | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTimestamp?: Date | null;
    /**
     * A human-readable description of the status of this operation.
     */
    message?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     */
    reason?: string | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    related?: ObjectReference | null;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    reportingComponent?: string | null;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    reportingInstance?: string | null;
    /**
     * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
     */
    series?: EventSeries | null;
    /**
     * EventSource contains information for an event.
     */
    source?: EventSource | null;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    type?: string | null;
}
/**
 * EventList is a list of events.
 */
export interface EventList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of events
     */
    items?: Event[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
 */
export interface EventSeries extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Number of occurrences in this series up to the last heartbeat time
     */
    count?: number | null;
    /**
     * MicroTime is version of Time with microsecond level precision.
     */
    lastObservedTime?: Date | null;
}
/**
 * EventSource contains information for an event.
 */
export interface EventSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Component from which the event is generated.
     */
    component?: string | null;
    /**
     * Node name on which the event is generated.
     */
    host?: string | null;
}
/**
 * ExecAction describes a "run in container" action.
 */
export interface ExecAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    command?: string[] | null;
}
/**
 * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
 */
export interface FCVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * lun is Optional: FC target lun number
     */
    lun?: number | null;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * targetWWNs is Optional: FC target worldwide names (WWNs)
     */
    targetWWNs?: string[] | null;
    /**
     * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     */
    wwids?: string[] | null;
}
/**
 * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
 */
export interface FlexPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * driver is the name of the driver to use for this volume.
     */
    driver?: string | null;
    /**
     * fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string | null;
    /**
     * options is Optional: this field holds extra command options if any.
     */
    options?: FlexPersistentVolumeSource_options | null;
    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
}
/**
 * options is Optional: this field holds extra command options if any.
 */
export interface FlexPersistentVolumeSource_options extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
 */
export interface FlexVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * driver is the name of the driver to use for this volume.
     */
    driver?: string | null;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string | null;
    /**
     * options is Optional: this field holds extra command options if any.
     */
    options?: FlexVolumeSource_options | null;
    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
}
/**
 * options is Optional: this field holds extra command options if any.
 */
export interface FlexVolumeSource_options extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
 */
export interface FlockerVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string | null;
    /**
     * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUUID?: string | null;
}
/**
 * Represents a Persistent Disk resource in Google Compute Engine.A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
 */
export interface GCEPersistentDiskVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string | null;
    /**
     * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number | null;
    /**
     * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName?: string | null;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean | null;
}
/**
 * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
 */
export interface GitRepoVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string | null;
    /**
     * repository is the URL
     */
    repository?: string | null;
    /**
     * revision is the commit hash for the specified revision.
     */
    revision?: string | null;
}
/**
 * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
 */
export interface GlusterfsPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpoints?: string | null;
    /**
     * endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsNamespace?: string | null;
    /**
     * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path?: string | null;
    /**
     * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean | null;
}
/**
 * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
 */
export interface GlusterfsVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpoints?: string | null;
    /**
     * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path?: string | null;
    /**
     * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean | null;
}
/**
 * GRPCAction specifies an action involving a GRPC service.
 */
export interface GRPCAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Port number of the gRPC service. Number must be in the range 1 to 65535.
     */
    port?: number | null;
    /**
     * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string | null;
}
/**
 * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
 */
export interface HostAlias extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Hostnames for the above IP address.
     */
    hostnames?: string[] | null;
    /**
     * IP address of the host file entry.
     */
    ip?: string | null;
}
/**
 * HostIP represents a single IP address allocated to the host.
 */
export interface HostIP extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IP is the IP address assigned to the host
     */
    ip?: string | null;
}
/**
 * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
 */
export interface HostPathVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string | null;
    /**
     * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    type?: string | null;
}
/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 */
export interface HTTPGetAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string | null;
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     */
    httpHeaders?: HTTPHeader[] | null;
    /**
     * Path to access on the HTTP server.
     */
    path?: string | null;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    port?: string | null;
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     */
    scheme?: string | null;
}
/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 */
export interface HTTPHeader extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
     */
    name?: string | null;
    /**
     * The header field value
     */
    value?: string | null;
}
/**
 * ImageVolumeSource represents a image volume resource.
 */
export interface ImageVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
     */
    pullPolicy?: string | null;
    /**
     * Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     */
    reference?: string | null;
}
/**
 * ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
 */
export interface ISCSIPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
     */
    chapAuthDiscovery?: boolean | null;
    /**
     * chapAuthSession defines whether support iSCSI Session CHAP authentication
     */
    chapAuthSession?: boolean | null;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string | null;
    /**
     * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     */
    initiatorName?: string | null;
    /**
     * iqn is Target iSCSI Qualified Name.
     */
    iqn?: string | null;
    /**
     * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string | null;
    /**
     * lun is iSCSI Target Lun number.
     */
    lun?: number | null;
    /**
     * portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    portals?: string[] | null;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
    /**
     * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal?: string | null;
}
/**
 * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
 */
export interface ISCSIVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
     */
    chapAuthDiscovery?: boolean | null;
    /**
     * chapAuthSession defines whether support iSCSI Session CHAP authentication
     */
    chapAuthSession?: boolean | null;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string | null;
    /**
     * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     */
    initiatorName?: string | null;
    /**
     * iqn is the target iSCSI Qualified Name.
     */
    iqn?: string | null;
    /**
     * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string | null;
    /**
     * lun represents iSCSI Target Lun number.
     */
    lun?: number | null;
    /**
     * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    portals?: string[] | null;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal?: string | null;
}
/**
 * Maps a string key to a path within a volume.
 */
export interface KeyToPath extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * key is the key to project.
     */
    key?: string | null;
    /**
     * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: number | null;
    /**
     * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string | null;
}
/**
 * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
 */
export interface Lifecycle extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
     */
    postStart?: LifecycleHandler | null;
    /**
     * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
     */
    preStop?: LifecycleHandler | null;
}
/**
 * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
 */
export interface LifecycleHandler extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ExecAction describes a "run in container" action.
     */
    exec?: ExecAction | null;
    /**
     * HTTPGetAction describes an action based on HTTP Get requests.
     */
    httpGet?: HTTPGetAction | null;
    /**
     * SleepAction describes a "sleep" action.
     */
    sleep?: SleepAction | null;
    /**
     * TCPSocketAction describes an action based on opening a socket
     */
    tcpSocket?: TCPSocketAction | null;
}
/**
 * LimitRange sets resource usage limits for each kind of resource in a Namespace.
 */
export interface LimitRange extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * LimitRangeSpec defines a min/max usage limit for resources that match on kind.
     */
    spec?: LimitRangeSpec | null;
}
/**
 * LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
 */
export interface LimitRangeItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Default resource requirement limit value by resource name if resource limit is omitted.
     */
    defaultEscaped?: LimitRangeItem_default | null;
    /**
     * DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
     */
    defaultRequest?: LimitRangeItem_defaultRequest | null;
    /**
     * Max usage constraints on this kind by resource name.
     */
    max?: LimitRangeItem_max | null;
    /**
     * MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
     */
    maxLimitRequestRatio?: LimitRangeItem_maxLimitRequestRatio | null;
    /**
     * Min usage constraints on this kind by resource name.
     */
    min?: LimitRangeItem_min | null;
    /**
     * Type of resource that this limit applies to.
     */
    type?: string | null;
}
/**
 * Default resource requirement limit value by resource name if resource limit is omitted.
 */
export interface LimitRangeItem_default extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
 */
export interface LimitRangeItem_defaultRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Max usage constraints on this kind by resource name.
 */
export interface LimitRangeItem_max extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
 */
export interface LimitRangeItem_maxLimitRequestRatio extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Min usage constraints on this kind by resource name.
 */
export interface LimitRangeItem_min extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * LimitRangeList is a list of LimitRange items.
 */
export interface LimitRangeList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    items?: LimitRange[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * LimitRangeSpec defines a min/max usage limit for resources that match on kind.
 */
export interface LimitRangeSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Limits is the list of LimitRangeItem objects that are enforced.
     */
    limits?: LimitRangeItem[] | null;
}
/**
 * LinuxContainerUser represents user identity information in Linux containers
 */
export interface LinuxContainerUser extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * GID is the primary gid initially attached to the first process in the container
     */
    gid?: number | null;
    /**
     * SupplementalGroups are the supplemental groups initially attached to the first process in the container
     */
    supplementalGroups?: number[] | null;
    /**
     * UID is the primary uid initially attached to the first process in the container
     */
    uid?: number | null;
}
/**
 * LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
 */
export interface LoadBalancerIngress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
     */
    hostname?: string | null;
    /**
     * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
     */
    ip?: string | null;
    /**
     * IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to "VIP" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to "Proxy" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.
     */
    ipMode?: string | null;
    /**
     * Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
     */
    ports?: PortStatus[] | null;
}
/**
 * LoadBalancerStatus represents the status of a load-balancer.
 */
export interface LoadBalancerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
     */
    ingress?: LoadBalancerIngress[] | null;
}
/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 */
export interface LocalObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
}
/**
 * Local represents directly-attached storage with node affinity
 */
export interface LocalVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
     */
    fsType?: string | null;
    /**
     * path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
     */
    path?: string | null;
}
/**
 * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
 */
export interface ModifyVolumeStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * status is the status of the ControllerModifyVolume operation. It can be in any of following states: - Pending   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as   the specified VolumeAttributesClass not existing. - InProgress   InProgress indicates that the volume is being modified. - Infeasible  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To  resolve the error, a valid VolumeAttributesClass needs to be specified.Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
     */
    status?: string | null;
    /**
     * targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
     */
    targetVolumeAttributesClassName?: string | null;
}
/**
 * Namespace provides a scope for Names. Use of multiple namespaces is optional.
 */
export interface Namespace extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * NamespaceSpec describes the attributes on a Namespace.
     */
    spec?: NamespaceSpec | null;
    /**
     * NamespaceStatus is information about the current status of a Namespace.
     */
    status?: NamespaceStatus | null;
}
/**
 * NamespaceCondition contains details about state of namespace.
 */
export interface NamespaceCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * Human-readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * Unique, one-word, CamelCase reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * Status of the condition, one of True, False, Unknown.
     */
    status?: string | null;
    /**
     * Type of namespace controller condition.
     */
    type?: string | null;
}
/**
 * NamespaceList is a list of Namespaces.
 */
export interface NamespaceList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    items?: Namespace[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * NamespaceSpec describes the attributes on a Namespace.
 */
export interface NamespaceSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
     */
    finalizers?: string[] | null;
}
/**
 * NamespaceStatus is information about the current status of a Namespace.
 */
export interface NamespaceStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the latest available observations of a namespace's current state.
     */
    conditions?: NamespaceCondition[] | null;
    /**
     * Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
     */
    phase?: string | null;
}
/**
 * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
 */
export interface NFSVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path?: string | null;
    /**
     * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean | null;
    /**
     * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server?: string | null;
}
/**
 * Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
 */
export interface Node extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * NodeSpec describes the attributes that a node is created with.
     */
    spec?: NodeSpec | null;
    /**
     * NodeStatus is information about the current status of a node.
     */
    status?: NodeStatus | null;
}
/**
 * NodeAddress contains information for the node's address.
 */
export interface NodeAddress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The node address.
     */
    address?: string | null;
    /**
     * Node address type, one of Hostname, ExternalIP or InternalIP.
     */
    type?: string | null;
}
/**
 * Node affinity is a group of node affinity scheduling rules.
 */
export interface NodeAffinity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecution?: PreferredSchedulingTerm[] | null;
    /**
     * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: NodeSelector | null;
}
/**
 * NodeCondition contains condition information for a node.
 */
export interface NodeCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastHeartbeatTime?: Date | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * Human readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * (brief) reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * Status of the condition, one of True, False, Unknown.
     */
    status?: string | null;
    /**
     * Type of node condition.
     */
    type?: string | null;
}
/**
 * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
 */
export interface NodeConfigSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
     */
    configMap?: ConfigMapNodeConfigSource | null;
}
/**
 * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
 */
export interface NodeConfigStatus extends AdditionalDataHolder, Parsable {
    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
     */
    active?: NodeConfigSource | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
     */
    assigned?: NodeConfigSource | null;
    /**
     * Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
     */
    errorEscaped?: string | null;
    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
     */
    lastKnownGood?: NodeConfigSource | null;
}
/**
 * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
 */
export interface NodeDaemonEndpoints extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * DaemonEndpoint contains information about a single Daemon endpoint.
     */
    kubeletEndpoint?: DaemonEndpoint | null;
}
/**
 * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
 */
export interface NodeFeatures extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * SupplementalGroupsPolicy is set to true if the runtime supports SupplementalGroupsPolicy and ContainerUser.
     */
    supplementalGroupsPolicy?: boolean | null;
}
/**
 * NodeList is the whole list of all Nodes which have been registered with master.
 */
export interface NodeList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of nodes
     */
    items?: Node[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * NodeRuntimeHandler is a set of runtime handler information.
 */
export interface NodeRuntimeHandler extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
     */
    features?: NodeRuntimeHandlerFeatures | null;
    /**
     * Runtime handler name. Empty for the default runtime handler.
     */
    name?: string | null;
}
/**
 * NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
 */
export interface NodeRuntimeHandlerFeatures extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.
     */
    recursiveReadOnlyMounts?: boolean | null;
    /**
     * UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes.
     */
    userNamespaces?: boolean | null;
}
/**
 * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
 */
export interface NodeSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Required. A list of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: NodeSelectorTerm[] | null;
}
/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 */
export interface NodeSelectorRequirement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The label key that the selector applies to.
     */
    key?: string | null;
    /**
     * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string | null;
    /**
     * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[] | null;
}
/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 */
export interface NodeSelectorTerm extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of node selector requirements by node's labels.
     */
    matchExpressions?: NodeSelectorRequirement[] | null;
    /**
     * A list of node selector requirements by node's fields.
     */
    matchFields?: NodeSelectorRequirement[] | null;
}
/**
 * NodeSpec describes the attributes that a node is created with.
 */
export interface NodeSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
     */
    configSource?: NodeConfigSource | null;
    /**
     * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
     */
    externalID?: string | null;
    /**
     * PodCIDR represents the pod IP range assigned to the node.
     */
    podCIDR?: string | null;
    /**
     * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
     */
    podCIDRs?: string[] | null;
    /**
     * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
     */
    providerID?: string | null;
    /**
     * If specified, the node's taints.
     */
    taints?: Taint[] | null;
    /**
     * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
     */
    unschedulable?: boolean | null;
}
/**
 * NodeStatus is information about the current status of a node.
 */
export interface NodeStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
     */
    addresses?: NodeAddress[] | null;
    /**
     * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
     */
    allocatable?: NodeStatus_allocatable | null;
    /**
     * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity
     */
    capacity?: NodeStatus_capacity | null;
    /**
     * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition
     */
    conditions?: NodeCondition[] | null;
    /**
     * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
     */
    config?: NodeConfigStatus | null;
    /**
     * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
     */
    daemonEndpoints?: NodeDaemonEndpoints | null;
    /**
     * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
     */
    features?: NodeFeatures | null;
    /**
     * List of container images on this node
     */
    images?: ContainerImage[] | null;
    /**
     * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
     */
    nodeInfo?: NodeSystemInfo | null;
    /**
     * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
     */
    phase?: string | null;
    /**
     * The available runtime handlers.
     */
    runtimeHandlers?: NodeRuntimeHandler[] | null;
    /**
     * List of volumes that are attached to the node.
     */
    volumesAttached?: AttachedVolume[] | null;
    /**
     * List of attachable volumes in use (mounted) by the node.
     */
    volumesInUse?: string[] | null;
}
/**
 * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
 */
export interface NodeStatus_allocatable extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity
 */
export interface NodeStatus_capacity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
 */
export interface NodeSystemInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Architecture reported by the node
     */
    architecture?: string | null;
    /**
     * Boot ID reported by the node.
     */
    bootID?: string | null;
    /**
     * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     */
    containerRuntimeVersion?: string | null;
    /**
     * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
     */
    kernelVersion?: string | null;
    /**
     * Kubelet Version reported by the node.
     */
    kubeletVersion?: string | null;
    /**
     * Deprecated: KubeProxy Version reported by the node.
     */
    kubeProxyVersion?: string | null;
    /**
     * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
     */
    machineID?: string | null;
    /**
     * The Operating System reported by the node
     */
    operatingSystem?: string | null;
    /**
     * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     */
    osImage?: string | null;
    /**
     * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
     */
    systemUUID?: string | null;
}
/**
 * ObjectFieldSelector selects an APIVersioned field of an object.
 */
export interface ObjectFieldSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string | null;
    /**
     * Path of the field to select in the specified API version.
     */
    fieldPath?: string | null;
}
/**
 * ObjectReference contains enough information to let you inspect or modify the referred object.
 */
export interface ObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * API version of the referent.
     */
    apiVersion?: string | null;
    /**
     * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: string | null;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: string | null;
    /**
     * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: string | null;
    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: string | null;
}
/**
 * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
 */
export interface PersistentVolume extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PersistentVolumeSpec is the specification of a persistent volume.
     */
    spec?: PersistentVolumeSpec | null;
    /**
     * PersistentVolumeStatus is the current status of a persistent volume.
     */
    status?: PersistentVolumeStatus | null;
}
/**
 * PersistentVolumeClaim is a user's request for and claim to a persistent volume
 */
export interface PersistentVolumeClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
     */
    spec?: PersistentVolumeClaimSpec | null;
    /**
     * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
     */
    status?: PersistentVolumeClaimStatus | null;
}
/**
 * PersistentVolumeClaimCondition contains details about state of pvc
 */
export interface PersistentVolumeClaimCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastProbeTime?: Date | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * message is the human-readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "Resizing" that means the underlying persistent volume is being resized.
     */
    reason?: string | null;
    /**
     * Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
     */
    status?: string | null;
    /**
     * Type is the type of the condition. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
     */
    type?: string | null;
}
/**
 * PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
 */
export interface PersistentVolumeClaimList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     */
    items?: PersistentVolumeClaim[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
 */
export interface PersistentVolumeClaimSpec extends AdditionalDataHolder, Parsable {
    /**
     * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     */
    accessModes?: string[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
     */
    dataSource?: TypedLocalObjectReference | null;
    /**
     * TypedObjectReference contains enough information to let you locate the typed referenced object
     */
    dataSourceRef?: TypedObjectReference | null;
    /**
     * VolumeResourceRequirements describes the storage resource requirements for a volume.
     */
    resources?: VolumeResourceRequirements | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    selector?: LabelSelector | null;
    /**
     * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
     */
    storageClassName?: string | null;
    /**
     * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
     */
    volumeAttributesClassName?: string | null;
    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     */
    volumeMode?: string | null;
    /**
     * volumeName is the binding reference to the PersistentVolume backing this claim.
     */
    volumeName?: string | null;
}
/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 */
export interface PersistentVolumeClaimStatus extends AdditionalDataHolder, Parsable {
    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     */
    accessModes?: string[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:* Un-prefixed keys:- storage - the capacity of the volume.* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     */
    allocatedResources?: PersistentVolumeClaimStatus_allocatedResources | null;
    /**
     * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:* Un-prefixed keys:- storage - the capacity of the volume.* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.ClaimResourceStatus can be in any of following states:- ControllerResizeInProgress:State set when resize controller starts resizing the volume in control-plane.- ControllerResizeFailed:State set when resize has failed in resize controller with a terminal error.- NodeResizePending:State set when resize controller has finished resizing the volume but further resizing ofvolume is needed on the node.- NodeResizeInProgress:State set when kubelet starts resizing the volume.- NodeResizeFailed:State set when resizing has failed in kubelet with a terminal error. Transient errors don't setNodeResizeFailed.For example: if expanding a PVC for more capacity - this field can be one of the following states:- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"     - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"When this field is not set, it means that no resize operation is in progress for the given PVC.A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     */
    allocatedResourceStatuses?: PersistentVolumeClaimStatus_allocatedResourceStatuses | null;
    /**
     * capacity represents the actual resources of the underlying volume.
     */
    capacity?: PersistentVolumeClaimStatus_capacity | null;
    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.
     */
    conditions?: PersistentVolumeClaimCondition[] | null;
    /**
     * currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
     */
    currentVolumeAttributesClassName?: string | null;
    /**
     * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
     */
    modifyVolumeStatus?: ModifyVolumeStatus | null;
    /**
     * phase represents the current phase of PersistentVolumeClaim.
     */
    phase?: string | null;
}
/**
 * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:* Un-prefixed keys:- storage - the capacity of the volume.* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
 */
export interface PersistentVolumeClaimStatus_allocatedResources extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:* Un-prefixed keys:- storage - the capacity of the volume.* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.ClaimResourceStatus can be in any of following states:- ControllerResizeInProgress:State set when resize controller starts resizing the volume in control-plane.- ControllerResizeFailed:State set when resize has failed in resize controller with a terminal error.- NodeResizePending:State set when resize controller has finished resizing the volume but further resizing ofvolume is needed on the node.- NodeResizeInProgress:State set when kubelet starts resizing the volume.- NodeResizeFailed:State set when resizing has failed in kubelet with a terminal error. Transient errors don't setNodeResizeFailed.For example: if expanding a PVC for more capacity - this field can be one of the following states:- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"     - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"When this field is not set, it means that no resize operation is in progress for the given PVC.A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
 */
export interface PersistentVolumeClaimStatus_allocatedResourceStatuses extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * capacity represents the actual resources of the underlying volume.
 */
export interface PersistentVolumeClaimStatus_capacity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
 */
export interface PersistentVolumeClaimTemplate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
     */
    spec?: PersistentVolumeClaimSpec | null;
}
/**
 * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
 */
export interface PersistentVolumeClaimVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     */
    claimName?: string | null;
    /**
     * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
     */
    readOnly?: boolean | null;
}
/**
 * PersistentVolumeList is a list of PersistentVolume items.
 */
export interface PersistentVolumeList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
     */
    items?: PersistentVolume[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PersistentVolumeSpec is the specification of a persistent volume.
 */
export interface PersistentVolumeSpec extends AdditionalDataHolder, Parsable {
    /**
     * accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes?: string[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents a Persistent Disk resource in AWS.An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
     */
    awsElasticBlockStore?: AWSElasticBlockStoreVolumeSource | null;
    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: AzureDiskVolumeSource | null;
    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: AzureFilePersistentVolumeSource | null;
    /**
     * capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     */
    capacity?: PersistentVolumeSpec_capacity | null;
    /**
     * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
     */
    cephfs?: CephFSPersistentVolumeSource | null;
    /**
     * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
     */
    cinder?: CinderPersistentVolumeSource | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    claimRef?: ObjectReference | null;
    /**
     * Represents storage that is managed by an external CSI volume driver
     */
    csi?: CSIPersistentVolumeSource | null;
    /**
     * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
     */
    fc?: FCVolumeSource | null;
    /**
     * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
     */
    flexVolume?: FlexPersistentVolumeSource | null;
    /**
     * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
     */
    flocker?: FlockerVolumeSource | null;
    /**
     * Represents a Persistent Disk resource in Google Compute Engine.A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
     */
    gcePersistentDisk?: GCEPersistentDiskVolumeSource | null;
    /**
     * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
     */
    glusterfs?: GlusterfsPersistentVolumeSource | null;
    /**
     * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
     */
    hostPath?: HostPathVolumeSource | null;
    /**
     * ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
     */
    iscsi?: ISCSIPersistentVolumeSource | null;
    /**
     * Local represents directly-attached storage with node affinity
     */
    local?: LocalVolumeSource | null;
    /**
     * mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     */
    mountOptions?: string[] | null;
    /**
     * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
     */
    nfs?: NFSVolumeSource | null;
    /**
     * VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
     */
    nodeAffinity?: VolumeNodeAffinity | null;
    /**
     * persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     */
    persistentVolumeReclaimPolicy?: string | null;
    /**
     * Represents a Photon Controller persistent disk resource.
     */
    photonPersistentDisk?: PhotonPersistentDiskVolumeSource | null;
    /**
     * PortworxVolumeSource represents a Portworx volume resource.
     */
    portworxVolume?: PortworxVolumeSource | null;
    /**
     * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
     */
    quobyte?: QuobyteVolumeSource | null;
    /**
     * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
     */
    rbd?: RBDPersistentVolumeSource | null;
    /**
     * ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
     */
    scaleIO?: ScaleIOPersistentVolumeSource | null;
    /**
     * storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     */
    storageClassName?: string | null;
    /**
     * Represents a StorageOS persistent volume resource.
     */
    storageos?: StorageOSPersistentVolumeSource | null;
    /**
     * Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
     */
    volumeAttributesClassName?: string | null;
    /**
     * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     */
    volumeMode?: string | null;
    /**
     * Represents a vSphere volume resource.
     */
    vsphereVolume?: VsphereVirtualDiskVolumeSource | null;
}
/**
 * capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
 */
export interface PersistentVolumeSpec_capacity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * PersistentVolumeStatus is the current status of a persistent volume.
 */
export interface PersistentVolumeStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastPhaseTransitionTime?: Date | null;
    /**
     * message is a human-readable message indicating details about why the volume is in this state.
     */
    message?: string | null;
    /**
     * phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
     */
    phase?: string | null;
    /**
     * reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
     */
    reason?: string | null;
}
/**
 * Represents a Photon Controller persistent disk resource.
 */
export interface PhotonPersistentDiskVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * pdID is the ID that identifies Photon Controller persistent disk
     */
    pdID?: string | null;
}
/**
 * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
 */
export interface Pod extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PodSpec is a description of a pod.
     */
    spec?: PodSpec | null;
    /**
     * PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
     */
    status?: PodStatus | null;
}
/**
 * Pod affinity is a group of inter pod affinity scheduling rules.
 */
export interface PodAffinity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecution?: WeightedPodAffinityTerm[] | null;
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: PodAffinityTerm[] | null;
}
/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 */
export interface PodAffinityTerm extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    labelSelector?: LabelSelector | null;
    /**
     * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
     */
    matchLabelKeys?: string[] | null;
    /**
     * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
     */
    mismatchLabelKeys?: string[] | null;
    /**
     * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
     */
    namespaces?: string[] | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    namespaceSelector?: LabelSelector | null;
    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
     */
    topologyKey?: string | null;
}
/**
 * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
 */
export interface PodAntiAffinity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecution?: WeightedPodAffinityTerm[] | null;
    /**
     * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: PodAffinityTerm[] | null;
}
/**
 * PodCondition contains details for the current condition of this pod.
 */
export interface PodCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastProbeTime?: Date | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * Human-readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * Unique, one-word, CamelCase reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     */
    status?: string | null;
    /**
     * Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     */
    type?: string | null;
}
/**
 * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
 */
export interface PodDNSConfig extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[] | null;
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: PodDNSConfigOption[] | null;
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[] | null;
}
/**
 * PodDNSConfigOption defines DNS resolver options of a pod.
 */
export interface PodDNSConfigOption extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name is this DNS resolver option's name. Required.
     */
    name?: string | null;
    /**
     * Value is this DNS resolver option's value.
     */
    value?: string | null;
}
/**
 * PodIP represents a single IP address allocated to the pod.
 */
export interface PodIP extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IP is the IP address assigned to the pod
     */
    ip?: string | null;
}
/**
 * PodList is a list of Pods.
 */
export interface PodList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
     */
    items?: Pod[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PodOS defines the OS parameters of a pod.
 */
export interface PodOS extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
     */
    name?: string | null;
}
/**
 * PodReadinessGate contains the reference to a pod condition
 */
export interface PodReadinessGate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ConditionType refers to a condition in the pod's condition list with matching type.
     */
    conditionType?: string | null;
}
/**
 * PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
 */
export interface PodResourceClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
     */
    name?: string | null;
    /**
     * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
     */
    resourceClaimName?: string | null;
    /**
     * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
     */
    resourceClaimTemplateName?: string | null;
}
/**
 * PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.
 */
export interface PodResourceClaimStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.
     */
    name?: string | null;
    /**
     * ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.
     */
    resourceClaimName?: string | null;
}
/**
 * PodSchedulingGate is associated to a Pod to guard its scheduling.
 */
export interface PodSchedulingGate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the scheduling gate. Each scheduling gate must have a unique name field.
     */
    name?: string | null;
}
/**
 * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
 */
export interface PodSecurityContext extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    appArmorProfile?: AppArmorProfile | null;
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     */
    fsGroup?: number | null;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
     */
    fsGroupChangePolicy?: string | null;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    runAsGroup?: number | null;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean | null;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    runAsUser?: number | null;
    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    seccompProfile?: SeccompProfile | null;
    /**
     * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are "MountOption" and "Recursive"."Recursive" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node."MountOption" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. "MountOption" value is allowed only when SELinuxMount feature gate is enabled.If not specified and SELinuxMount feature gate is enabled, "MountOption" is used. If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for all other volumes.This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
     */
    seLinuxChangePolicy?: string | null;
    /**
     * SELinuxOptions are the labels to be applied to the container
     */
    seLinuxOptions?: SELinuxOptions | null;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
     */
    supplementalGroups?: number[] | null;
    /**
     * Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
     */
    supplementalGroupsPolicy?: string | null;
    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     */
    sysctls?: Sysctl[] | null;
    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    windowsOptions?: WindowsSecurityContextOptions | null;
}
/**
 * PodSpec is a description of a pod.
 */
export interface PodSpec extends AdditionalDataHolder, Parsable {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Affinity is a group of affinity scheduling rules.
     */
    affinity?: Affinity | null;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean | null;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     */
    containers?: Container[] | null;
    /**
     * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
     */
    dnsConfig?: PodDNSConfig | null;
    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     */
    dnsPolicy?: string | null;
    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     */
    enableServiceLinks?: boolean | null;
    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
     */
    ephemeralContainers?: EphemeralContainer[] | null;
    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
     */
    hostAliases?: HostAlias[] | null;
    /**
     * Use the host's ipc namespace. Optional: Default to false.
     */
    hostIPC?: boolean | null;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname?: string | null;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     */
    hostNetwork?: boolean | null;
    /**
     * Use the host's pid namespace. Optional: Default to false.
     */
    hostPID?: boolean | null;
    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
     */
    hostUsers?: boolean | null;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: LocalObjectReference[] | null;
    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: Container[] | null;
    /**
     * NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
     */
    nodeName?: string | null;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     */
    nodeSelector?: PodSpec_nodeSelector | null;
    /**
     * PodOS defines the OS parameters of a pod.
     */
    os?: PodOS | null;
    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
     */
    overhead?: PodSpec_overhead | null;
    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     */
    preemptionPolicy?: string | null;
    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     */
    priority?: number | null;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string | null;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     */
    readinessGates?: PodReadinessGate[] | null;
    /**
     * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.This field is immutable.
     */
    resourceClaims?: PodResourceClaim[] | null;
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    resources?: ResourceRequirements | null;
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     */
    restartPolicy?: string | null;
    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
     */
    runtimeClassName?: string | null;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName?: string | null;
    /**
     * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.SchedulingGates can only be set at pod creation time, and be removed only afterwards.
     */
    schedulingGates?: PodSchedulingGate[] | null;
    /**
     * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
     */
    securityContext?: PodSecurityContext | null;
    /**
     * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     */
    serviceAccount?: string | null;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     */
    serviceAccountName?: string | null;
    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE//SYSTEM//CurrentControlSet//Services//Tcpip//Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     */
    setHostnameAsFQDN?: boolean | null;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     */
    shareProcessNamespace?: boolean | null;
    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     */
    subdomain?: string | null;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     */
    terminationGracePeriodSeconds?: number | null;
    /**
     * If specified, the pod's tolerations.
     */
    tolerations?: Toleration[] | null;
    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     */
    topologySpreadConstraints?: TopologySpreadConstraint[] | null;
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: Volume[] | null;
}
/**
 * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
 */
export interface PodSpec_nodeSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
 */
export interface PodSpec_overhead extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
 */
export interface PodStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     */
    conditions?: PodCondition[] | null;
    /**
     * Statuses of containers in this pod. Each container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     */
    containerStatuses?: ContainerStatus[] | null;
    /**
     * Statuses for any ephemeral containers that have run in this pod. Each ephemeral container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     */
    ephemeralContainerStatuses?: ContainerStatus[] | null;
    /**
     * hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod
     */
    hostIP?: string | null;
    /**
     * hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.
     */
    hostIPs?: HostIP[] | null;
    /**
     * Statuses of init containers in this pod. The most recent successful non-restartable init container will have ready = true, the most recently started container will have startTime set. Each init container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status
     */
    initContainerStatuses?: ContainerStatus[] | null;
    /**
     * A human readable message indicating details about why the pod is in this condition.
     */
    message?: string | null;
    /**
     * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     */
    nominatedNodeName?: string | null;
    /**
     * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     */
    phase?: string | null;
    /**
     * podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     */
    podIP?: string | null;
    /**
     * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     */
    podIPs?: PodIP[] | null;
    /**
     * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
     */
    qosClass?: string | null;
    /**
     * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
     */
    reason?: string | null;
    /**
     * Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
     */
    resize?: string | null;
    /**
     * Status of resource claims.
     */
    resourceClaimStatuses?: PodResourceClaimStatus[] | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    startTime?: Date | null;
}
/**
 * PodTemplate describes a template for creating copies of a predefined pod.
 */
export interface PodTemplate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PodTemplateSpec describes the data a pod should have when created from a template
     */
    template?: PodTemplateSpec | null;
}
/**
 * PodTemplateList is a list of PodTemplates.
 */
export interface PodTemplateList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of pod templates
     */
    items?: PodTemplate[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PodTemplateSpec describes the data a pod should have when created from a template
 */
export interface PodTemplateSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PodSpec is a description of a pod.
     */
    spec?: PodSpec | null;
}
/**
 * PortStatus represents the error condition of a service port
 */
export interface PortStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use  CamelCase names- cloud provider specific error values must have names that comply with the  format foo.example.com/CamelCase.
     */
    errorEscaped?: string | null;
    /**
     * Port is the port number of the service port of which status is recorded here
     */
    port?: number | null;
    /**
     * Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
     */
    protocol?: string | null;
}
/**
 * PortworxVolumeSource represents a Portworx volume resource.
 */
export interface PortworxVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * volumeID uniquely identifies a Portworx volume
     */
    volumeID?: string | null;
}
/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 */
export interface PreferredSchedulingTerm extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
     */
    preference?: NodeSelectorTerm | null;
    /**
     * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
     */
    weight?: number | null;
}
/**
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 */
export interface Probe extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ExecAction describes a "run in container" action.
     */
    exec?: ExecAction | null;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     */
    failureThreshold?: number | null;
    /**
     * GRPCAction specifies an action involving a GRPC service.
     */
    grpc?: GRPCAction | null;
    /**
     * HTTPGetAction describes an action based on HTTP Get requests.
     */
    httpGet?: HTTPGetAction | null;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    initialDelaySeconds?: number | null;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     */
    periodSeconds?: number | null;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     */
    successThreshold?: number | null;
    /**
     * TCPSocketAction describes an action based on opening a socket
     */
    tcpSocket?: TCPSocketAction | null;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     */
    terminationGracePeriodSeconds?: number | null;
    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    timeoutSeconds?: number | null;
}
/**
 * Represents a projected volume source
 */
export interface ProjectedVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: number | null;
    /**
     * sources is the list of volume projections. Each entry in this list handles one source.
     */
    sources?: VolumeProjection[] | null;
}
/**
 * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
 */
export interface QuobyteVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * group to map volume access to Default is no group
     */
    group?: string | null;
    /**
     * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean | null;
    /**
     * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry?: string | null;
    /**
     * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
     */
    tenant?: string | null;
    /**
     * user to map volume access to Defaults to serivceaccount user
     */
    user?: string | null;
    /**
     * volume is a string that references an already created Quobyte volume by name.
     */
    volume?: string | null;
}
/**
 * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
 */
export interface RBDPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string | null;
    /**
     * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    image?: string | null;
    /**
     * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring?: string | null;
    /**
     * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    monitors?: string[] | null;
    /**
     * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    pool?: string | null;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
    /**
     * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    user?: string | null;
}
/**
 * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
 */
export interface RBDVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string | null;
    /**
     * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    image?: string | null;
    /**
     * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring?: string | null;
    /**
     * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    monitors?: string[] | null;
    /**
     * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    pool?: string | null;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    user?: string | null;
}
/**
 * ReplicationController represents the configuration of a replication controller.
 */
export interface ReplicationController extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ReplicationControllerSpec is the specification of a replication controller.
     */
    spec?: ReplicationControllerSpec | null;
    /**
     * ReplicationControllerStatus represents the current status of a replication controller.
     */
    status?: ReplicationControllerStatus | null;
}
/**
 * ReplicationControllerCondition describes the state of a replication controller at a certain point.
 */
export interface ReplicationControllerCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * A human readable message indicating details about the transition.
     */
    message?: string | null;
    /**
     * The reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * Status of the condition, one of True, False, Unknown.
     */
    status?: string | null;
    /**
     * Type of replication controller condition.
     */
    type?: string | null;
}
/**
 * ReplicationControllerList is a collection of replication controllers.
 */
export interface ReplicationControllerList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
     */
    items?: ReplicationController[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ReplicationControllerSpec is the specification of a replication controller.
 */
export interface ReplicationControllerSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number | null;
    /**
     * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
     */
    replicas?: number | null;
    /**
     * Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
     */
    selector?: ReplicationControllerSpec_selector | null;
    /**
     * PodTemplateSpec describes the data a pod should have when created from a template
     */
    template?: PodTemplateSpec | null;
}
/**
 * Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
 */
export interface ReplicationControllerSpec_selector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ReplicationControllerStatus represents the current status of a replication controller.
 */
export interface ReplicationControllerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of available replicas (ready for at least minReadySeconds) for this replication controller.
     */
    availableReplicas?: number | null;
    /**
     * Represents the latest available observations of a replication controller's current state.
     */
    conditions?: ReplicationControllerCondition[] | null;
    /**
     * The number of pods that have labels matching the labels of the pod template of the replication controller.
     */
    fullyLabeledReplicas?: number | null;
    /**
     * ObservedGeneration reflects the generation of the most recently observed replication controller.
     */
    observedGeneration?: number | null;
    /**
     * The number of ready replicas for this replication controller.
     */
    readyReplicas?: number | null;
    /**
     * Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
     */
    replicas?: number | null;
}
/**
 * ResourceClaim references one entry in PodSpec.ResourceClaims.
 */
export interface ResourceClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
     */
    name?: string | null;
    /**
     * Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
     */
    request?: string | null;
}
/**
 * ResourceFieldSelector represents container resources (cpu, memory) and their output format
 */
export interface ResourceFieldSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Container name: required for volumes, optional for env vars
     */
    containerName?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    divisor?: string | null;
    /**
     * Required: resource to select
     */
    resource?: string | null;
}
/**
 * ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680.
 */
export interface ResourceHealth extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Health of the resource. can be one of: - Healthy: operates as normal - Unhealthy: reported unhealthy. We consider this a temporary health issue              since we do not have a mechanism today to distinguish              temporary and permanent issues. - Unknown: The status cannot be determined.            For example, Device Plugin got unregistered and hasn't been re-registered since.In future we may want to introduce the PermanentlyUnhealthy Status.
     */
    health?: string | null;
    /**
     * ResourceID is the unique identifier of the resource. See the ResourceID type for more information.
     */
    resourceID?: string | null;
}
/**
 * ResourceQuota sets aggregate quota restrictions enforced per namespace
 */
export interface ResourceQuota extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
     */
    spec?: ResourceQuotaSpec | null;
    /**
     * ResourceQuotaStatus defines the enforced hard limits and observed use.
     */
    status?: ResourceQuotaStatus | null;
}
/**
 * ResourceQuotaList is a list of ResourceQuota items.
 */
export interface ResourceQuotaList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     */
    items?: ResourceQuota[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
 */
export interface ResourceQuotaSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     */
    hard?: ResourceQuotaSpec_hard | null;
    /**
     * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     */
    scopes?: string[] | null;
    /**
     * A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
     */
    scopeSelector?: ScopeSelector | null;
}
/**
 * hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
 */
export interface ResourceQuotaSpec_hard extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ResourceQuotaStatus defines the enforced hard limits and observed use.
 */
export interface ResourceQuotaStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     */
    hard?: ResourceQuotaStatus_hard | null;
    /**
     * Used is the current observed total usage of the resource in the namespace.
     */
    used?: ResourceQuotaStatus_used | null;
}
/**
 * Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
 */
export interface ResourceQuotaStatus_hard extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Used is the current observed total usage of the resource in the namespace.
 */
export interface ResourceQuotaStatus_used extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ResourceRequirements describes the compute resource requirements.
 */
export interface ResourceRequirements extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.This field is immutable. It can only be set for containers.
     */
    claims?: ResourceClaim[] | null;
    /**
     * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: ResourceRequirements_limits | null;
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: ResourceRequirements_requests | null;
}
/**
 * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 */
export interface ResourceRequirements_limits extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 */
export interface ResourceRequirements_requests extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ResourceStatus represents the status of a single resource allocated to a Pod.
 */
export interface ResourceStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be "claim:<claim_name>/<request>". When this status is reported about a container, the "claim_name" and "request" must match one of the claims of this container.
     */
    name?: string | null;
    /**
     * List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
     */
    resources?: ResourceHealth[] | null;
}
/**
 * ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
 */
export interface ScaleIOPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
     */
    fsType?: string | null;
    /**
     * gateway is the host address of the ScaleIO API Gateway.
     */
    gateway?: string | null;
    /**
     * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
     */
    protectionDomain?: string | null;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
     */
    secretRef?: SecretReference | null;
    /**
     * sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
     */
    sslEnabled?: boolean | null;
    /**
     * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     */
    storageMode?: string | null;
    /**
     * storagePool is the ScaleIO Storage Pool associated with the protection domain.
     */
    storagePool?: string | null;
    /**
     * system is the name of the storage system as configured in ScaleIO.
     */
    system?: string | null;
    /**
     * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
     */
    volumeName?: string | null;
}
/**
 * ScaleIOVolumeSource represents a persistent ScaleIO volume
 */
export interface ScaleIOVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
     */
    fsType?: string | null;
    /**
     * gateway is the host address of the ScaleIO API Gateway.
     */
    gateway?: string | null;
    /**
     * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
     */
    protectionDomain?: string | null;
    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * sslEnabled Flag enable/disable SSL communication with Gateway, default false
     */
    sslEnabled?: boolean | null;
    /**
     * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     */
    storageMode?: string | null;
    /**
     * storagePool is the ScaleIO Storage Pool associated with the protection domain.
     */
    storagePool?: string | null;
    /**
     * system is the name of the storage system as configured in ScaleIO.
     */
    system?: string | null;
    /**
     * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
     */
    volumeName?: string | null;
}
/**
 * A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
 */
export interface ScopedResourceSelectorRequirement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
     */
    operator?: string | null;
    /**
     * The name of the scope that the selector applies to.
     */
    scopeName?: string | null;
    /**
     * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[] | null;
}
/**
 * A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
 */
export interface ScopeSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of scope selector requirements by scope of the resources.
     */
    matchExpressions?: ScopedResourceSelectorRequirement[] | null;
}
/**
 * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
 */
export interface SeccompProfile extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
     */
    localhostProfile?: string | null;
    /**
     * type indicates which kind of seccomp profile will be applied. Valid options are:Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
     */
    type?: string | null;
}
/**
 * Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
 */
export interface Secret extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
     */
    data?: Secret_data | null;
    /**
     * Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     */
    immutable?: boolean | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
     */
    stringData?: Secret_stringData | null;
    /**
     * Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
     */
    type?: string | null;
}
/**
 * Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
 */
export interface Secret_data extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
 */
export interface Secret_stringData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * SecretEnvSource selects a Secret to populate the environment variables with.The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
 */
export interface SecretEnvSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean | null;
}
/**
 * SecretKeySelector selects a key of a Secret.
 */
export interface SecretKeySelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The key of the secret to select from.  Must be a valid secret key.
     */
    key?: string | null;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Specify whether the Secret or its key must be defined
     */
    optional?: boolean | null;
}
/**
 * SecretList is a list of Secret.
 */
export interface SecretList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
     */
    items?: Secret[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * Adapts a secret into a projected volume.The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
 */
export interface SecretProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: KeyToPath[] | null;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * optional field specify whether the Secret or its key must be defined
     */
    optional?: boolean | null;
}
/**
 * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
 */
export interface SecretReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is unique within a namespace to reference a secret resource.
     */
    name?: string | null;
    /**
     * namespace defines the space within which the secret name must be unique.
     */
    namespace?: string | null;
}
/**
 * Adapts a Secret into a volume.The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
 */
export interface SecretVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: number | null;
    /**
     * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: KeyToPath[] | null;
    /**
     * optional field specify whether the Secret or its keys must be defined
     */
    optional?: boolean | null;
    /**
     * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     */
    secretName?: string | null;
}
/**
 * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
 */
export interface SecurityContext extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     */
    allowPrivilegeEscalation?: boolean | null;
    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    appArmorProfile?: AppArmorProfile | null;
    /**
     * Adds and removes POSIX capabilities from running containers.
     */
    capabilities?: Capabilities | null;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     */
    privileged?: boolean | null;
    /**
     * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     */
    procMount?: string | null;
    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     */
    readOnlyRootFilesystem?: boolean | null;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    runAsGroup?: number | null;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean | null;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    runAsUser?: number | null;
    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    seccompProfile?: SeccompProfile | null;
    /**
     * SELinuxOptions are the labels to be applied to the container
     */
    seLinuxOptions?: SELinuxOptions | null;
    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    windowsOptions?: WindowsSecurityContextOptions | null;
}
/**
 * SELinuxOptions are the labels to be applied to the container
 */
export interface SELinuxOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string | null;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string | null;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string | null;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAffinity(writer: SerializationWriter, affinity: Partial<Affinity> | undefined | null = {}) : void {
    if (affinity) {
        writer.writeObjectValue<NodeAffinity>("nodeAffinity", affinity.nodeAffinity, serializeNodeAffinity);
        writer.writeObjectValue<PodAffinity>("podAffinity", affinity.podAffinity, serializePodAffinity);
        writer.writeObjectValue<PodAntiAffinity>("podAntiAffinity", affinity.podAntiAffinity, serializePodAntiAffinity);
        writer.writeAdditionalData(affinity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAppArmorProfile(writer: SerializationWriter, appArmorProfile: Partial<AppArmorProfile> | undefined | null = {}) : void {
    if (appArmorProfile) {
        writer.writeStringValue("localhostProfile", appArmorProfile.localhostProfile);
        writer.writeStringValue("type", appArmorProfile.type);
        writer.writeAdditionalData(appArmorProfile.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachedVolume(writer: SerializationWriter, attachedVolume: Partial<AttachedVolume> | undefined | null = {}) : void {
    if (attachedVolume) {
        writer.writeStringValue("devicePath", attachedVolume.devicePath);
        writer.writeStringValue("name", attachedVolume.name);
        writer.writeAdditionalData(attachedVolume.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAWSElasticBlockStoreVolumeSource(writer: SerializationWriter, aWSElasticBlockStoreVolumeSource: Partial<AWSElasticBlockStoreVolumeSource> | undefined | null = {}) : void {
    if (aWSElasticBlockStoreVolumeSource) {
        writer.writeStringValue("fsType", aWSElasticBlockStoreVolumeSource.fsType);
        writer.writeNumberValue("partition", aWSElasticBlockStoreVolumeSource.partition);
        writer.writeBooleanValue("readOnly", aWSElasticBlockStoreVolumeSource.readOnly);
        writer.writeStringValue("volumeID", aWSElasticBlockStoreVolumeSource.volumeID);
        writer.writeAdditionalData(aWSElasticBlockStoreVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureDiskVolumeSource(writer: SerializationWriter, azureDiskVolumeSource: Partial<AzureDiskVolumeSource> | undefined | null = {}) : void {
    if (azureDiskVolumeSource) {
        writer.writeStringValue("cachingMode", azureDiskVolumeSource.cachingMode);
        writer.writeStringValue("diskName", azureDiskVolumeSource.diskName);
        writer.writeStringValue("diskURI", azureDiskVolumeSource.diskURI);
        writer.writeStringValue("fsType", azureDiskVolumeSource.fsType);
        writer.writeStringValue("kind", azureDiskVolumeSource.kind);
        writer.writeBooleanValue("readOnly", azureDiskVolumeSource.readOnly);
        writer.writeAdditionalData(azureDiskVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureFilePersistentVolumeSource(writer: SerializationWriter, azureFilePersistentVolumeSource: Partial<AzureFilePersistentVolumeSource> | undefined | null = {}) : void {
    if (azureFilePersistentVolumeSource) {
        writer.writeBooleanValue("readOnly", azureFilePersistentVolumeSource.readOnly);
        writer.writeStringValue("secretName", azureFilePersistentVolumeSource.secretName);
        writer.writeStringValue("secretNamespace", azureFilePersistentVolumeSource.secretNamespace);
        writer.writeStringValue("shareName", azureFilePersistentVolumeSource.shareName);
        writer.writeAdditionalData(azureFilePersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureFileVolumeSource(writer: SerializationWriter, azureFileVolumeSource: Partial<AzureFileVolumeSource> | undefined | null = {}) : void {
    if (azureFileVolumeSource) {
        writer.writeBooleanValue("readOnly", azureFileVolumeSource.readOnly);
        writer.writeStringValue("secretName", azureFileVolumeSource.secretName);
        writer.writeStringValue("shareName", azureFileVolumeSource.shareName);
        writer.writeAdditionalData(azureFileVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBinding(writer: SerializationWriter, binding: Partial<Binding> | undefined | null = {}) : void {
    if (binding) {
        writer.writeStringValue("apiVersion", binding.apiVersion);
        writer.writeStringValue("kind", binding.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", binding.metadata, serializeObjectMeta);
        writer.writeObjectValue<ObjectReference>("target", binding.target, serializeObjectReference);
        writer.writeAdditionalData(binding.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCapabilities(writer: SerializationWriter, capabilities: Partial<Capabilities> | undefined | null = {}) : void {
    if (capabilities) {
        writer.writeCollectionOfPrimitiveValues<string>("add", capabilities.add);
        writer.writeCollectionOfPrimitiveValues<string>("drop", capabilities.drop);
        writer.writeAdditionalData(capabilities.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCephFSPersistentVolumeSource(writer: SerializationWriter, cephFSPersistentVolumeSource: Partial<CephFSPersistentVolumeSource> | undefined | null = {}) : void {
    if (cephFSPersistentVolumeSource) {
        writer.writeCollectionOfPrimitiveValues<string>("monitors", cephFSPersistentVolumeSource.monitors);
        writer.writeStringValue("path", cephFSPersistentVolumeSource.path);
        writer.writeBooleanValue("readOnly", cephFSPersistentVolumeSource.readOnly);
        writer.writeStringValue("secretFile", cephFSPersistentVolumeSource.secretFile);
        writer.writeObjectValue<SecretReference>("secretRef", cephFSPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeStringValue("user", cephFSPersistentVolumeSource.user);
        writer.writeAdditionalData(cephFSPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCephFSVolumeSource(writer: SerializationWriter, cephFSVolumeSource: Partial<CephFSVolumeSource> | undefined | null = {}) : void {
    if (cephFSVolumeSource) {
        writer.writeCollectionOfPrimitiveValues<string>("monitors", cephFSVolumeSource.monitors);
        writer.writeStringValue("path", cephFSVolumeSource.path);
        writer.writeBooleanValue("readOnly", cephFSVolumeSource.readOnly);
        writer.writeStringValue("secretFile", cephFSVolumeSource.secretFile);
        writer.writeObjectValue<LocalObjectReference>("secretRef", cephFSVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeStringValue("user", cephFSVolumeSource.user);
        writer.writeAdditionalData(cephFSVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCinderPersistentVolumeSource(writer: SerializationWriter, cinderPersistentVolumeSource: Partial<CinderPersistentVolumeSource> | undefined | null = {}) : void {
    if (cinderPersistentVolumeSource) {
        writer.writeStringValue("fsType", cinderPersistentVolumeSource.fsType);
        writer.writeBooleanValue("readOnly", cinderPersistentVolumeSource.readOnly);
        writer.writeObjectValue<SecretReference>("secretRef", cinderPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeStringValue("volumeID", cinderPersistentVolumeSource.volumeID);
        writer.writeAdditionalData(cinderPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCinderVolumeSource(writer: SerializationWriter, cinderVolumeSource: Partial<CinderVolumeSource> | undefined | null = {}) : void {
    if (cinderVolumeSource) {
        writer.writeStringValue("fsType", cinderVolumeSource.fsType);
        writer.writeBooleanValue("readOnly", cinderVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", cinderVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeStringValue("volumeID", cinderVolumeSource.volumeID);
        writer.writeAdditionalData(cinderVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClientIPConfig(writer: SerializationWriter, clientIPConfig: Partial<ClientIPConfig> | undefined | null = {}) : void {
    if (clientIPConfig) {
        writer.writeNumberValue("timeoutSeconds", clientIPConfig.timeoutSeconds);
        writer.writeAdditionalData(clientIPConfig.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClusterTrustBundleProjection(writer: SerializationWriter, clusterTrustBundleProjection: Partial<ClusterTrustBundleProjection> | undefined | null = {}) : void {
    if (clusterTrustBundleProjection) {
        writer.writeObjectValue<LabelSelector>("labelSelector", clusterTrustBundleProjection.labelSelector, serializeLabelSelector);
        writer.writeStringValue("name", clusterTrustBundleProjection.name);
        writer.writeBooleanValue("optional", clusterTrustBundleProjection.optional);
        writer.writeStringValue("path", clusterTrustBundleProjection.path);
        writer.writeStringValue("signerName", clusterTrustBundleProjection.signerName);
        writer.writeAdditionalData(clusterTrustBundleProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComponentCondition(writer: SerializationWriter, componentCondition: Partial<ComponentCondition> | undefined | null = {}) : void {
    if (componentCondition) {
        writer.writeStringValue("error", componentCondition.errorEscaped);
        writer.writeStringValue("message", componentCondition.message);
        writer.writeStringValue("status", componentCondition.status);
        writer.writeStringValue("type", componentCondition.type);
        writer.writeAdditionalData(componentCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComponentStatus(writer: SerializationWriter, componentStatus: Partial<ComponentStatus> | undefined | null = {}) : void {
    if (componentStatus) {
        writer.writeStringValue("apiVersion", componentStatus.apiVersion);
        writer.writeCollectionOfObjectValues<ComponentCondition>("conditions", componentStatus.conditions, serializeComponentCondition);
        writer.writeStringValue("kind", componentStatus.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", componentStatus.metadata, serializeObjectMeta);
        writer.writeAdditionalData(componentStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComponentStatusList(writer: SerializationWriter, componentStatusList: Partial<ComponentStatusList> | undefined | null = {}) : void {
    if (componentStatusList) {
        writer.writeStringValue("apiVersion", componentStatusList.apiVersion);
        writer.writeCollectionOfObjectValues<ComponentStatus>("items", componentStatusList.items, serializeComponentStatus);
        writer.writeStringValue("kind", componentStatusList.kind);
        writer.writeObjectValue<ListMeta>("metadata", componentStatusList.metadata, serializeListMeta);
        writer.writeAdditionalData(componentStatusList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMap(writer: SerializationWriter, configMap: Partial<ConfigMap> | undefined | null = {}) : void {
    if (configMap) {
        writer.writeStringValue("apiVersion", configMap.apiVersion);
        writer.writeObjectValue<ConfigMap_binaryData>("binaryData", configMap.binaryData, serializeConfigMap_binaryData);
        writer.writeObjectValue<ConfigMap_data>("data", configMap.data, serializeConfigMap_data);
        writer.writeBooleanValue("immutable", configMap.immutable);
        writer.writeStringValue("kind", configMap.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", configMap.metadata, serializeObjectMeta);
        writer.writeAdditionalData(configMap.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMap_binaryData(writer: SerializationWriter, configMap_binaryData: Partial<ConfigMap_binaryData> | undefined | null = {}) : void {
    if (configMap_binaryData) {
        writer.writeAdditionalData(configMap_binaryData.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMap_data(writer: SerializationWriter, configMap_data: Partial<ConfigMap_data> | undefined | null = {}) : void {
    if (configMap_data) {
        writer.writeAdditionalData(configMap_data.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapEnvSource(writer: SerializationWriter, configMapEnvSource: Partial<ConfigMapEnvSource> | undefined | null = {}) : void {
    if (configMapEnvSource) {
        writer.writeStringValue("name", configMapEnvSource.name);
        writer.writeBooleanValue("optional", configMapEnvSource.optional);
        writer.writeAdditionalData(configMapEnvSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapKeySelector(writer: SerializationWriter, configMapKeySelector: Partial<ConfigMapKeySelector> | undefined | null = {}) : void {
    if (configMapKeySelector) {
        writer.writeStringValue("key", configMapKeySelector.key);
        writer.writeStringValue("name", configMapKeySelector.name);
        writer.writeBooleanValue("optional", configMapKeySelector.optional);
        writer.writeAdditionalData(configMapKeySelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapList(writer: SerializationWriter, configMapList: Partial<ConfigMapList> | undefined | null = {}) : void {
    if (configMapList) {
        writer.writeStringValue("apiVersion", configMapList.apiVersion);
        writer.writeCollectionOfObjectValues<ConfigMap>("items", configMapList.items, serializeConfigMap);
        writer.writeStringValue("kind", configMapList.kind);
        writer.writeObjectValue<ListMeta>("metadata", configMapList.metadata, serializeListMeta);
        writer.writeAdditionalData(configMapList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapNodeConfigSource(writer: SerializationWriter, configMapNodeConfigSource: Partial<ConfigMapNodeConfigSource> | undefined | null = {}) : void {
    if (configMapNodeConfigSource) {
        writer.writeStringValue("kubeletConfigKey", configMapNodeConfigSource.kubeletConfigKey);
        writer.writeStringValue("name", configMapNodeConfigSource.name);
        writer.writeStringValue("namespace", configMapNodeConfigSource.namespace);
        writer.writeStringValue("resourceVersion", configMapNodeConfigSource.resourceVersion);
        writer.writeStringValue("uid", configMapNodeConfigSource.uid);
        writer.writeAdditionalData(configMapNodeConfigSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapProjection(writer: SerializationWriter, configMapProjection: Partial<ConfigMapProjection> | undefined | null = {}) : void {
    if (configMapProjection) {
        writer.writeCollectionOfObjectValues<KeyToPath>("items", configMapProjection.items, serializeKeyToPath);
        writer.writeStringValue("name", configMapProjection.name);
        writer.writeBooleanValue("optional", configMapProjection.optional);
        writer.writeAdditionalData(configMapProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigMapVolumeSource(writer: SerializationWriter, configMapVolumeSource: Partial<ConfigMapVolumeSource> | undefined | null = {}) : void {
    if (configMapVolumeSource) {
        writer.writeNumberValue("defaultMode", configMapVolumeSource.defaultMode);
        writer.writeCollectionOfObjectValues<KeyToPath>("items", configMapVolumeSource.items, serializeKeyToPath);
        writer.writeStringValue("name", configMapVolumeSource.name);
        writer.writeBooleanValue("optional", configMapVolumeSource.optional);
        writer.writeAdditionalData(configMapVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainer(writer: SerializationWriter, container: Partial<Container> | undefined | null = {}) : void {
    if (container) {
        writer.writeCollectionOfPrimitiveValues<string>("args", container.args);
        writer.writeCollectionOfPrimitiveValues<string>("command", container.command);
        writer.writeCollectionOfObjectValues<EnvVar>("env", container.env, serializeEnvVar);
        writer.writeCollectionOfObjectValues<EnvFromSource>("envFrom", container.envFrom, serializeEnvFromSource);
        writer.writeStringValue("image", container.image);
        writer.writeStringValue("imagePullPolicy", container.imagePullPolicy);
        writer.writeObjectValue<Lifecycle>("lifecycle", container.lifecycle, serializeLifecycle);
        writer.writeObjectValue<Probe>("livenessProbe", container.livenessProbe, serializeProbe);
        writer.writeStringValue("name", container.name);
        writer.writeCollectionOfObjectValues<ContainerPort>("ports", container.ports, serializeContainerPort);
        writer.writeObjectValue<Probe>("readinessProbe", container.readinessProbe, serializeProbe);
        writer.writeCollectionOfObjectValues<ContainerResizePolicy>("resizePolicy", container.resizePolicy, serializeContainerResizePolicy);
        writer.writeObjectValue<ResourceRequirements>("resources", container.resources, serializeResourceRequirements);
        writer.writeStringValue("restartPolicy", container.restartPolicy);
        writer.writeObjectValue<SecurityContext>("securityContext", container.securityContext, serializeSecurityContext);
        writer.writeObjectValue<Probe>("startupProbe", container.startupProbe, serializeProbe);
        writer.writeBooleanValue("stdin", container.stdin);
        writer.writeBooleanValue("stdinOnce", container.stdinOnce);
        writer.writeStringValue("terminationMessagePath", container.terminationMessagePath);
        writer.writeStringValue("terminationMessagePolicy", container.terminationMessagePolicy);
        writer.writeBooleanValue("tty", container.tty);
        writer.writeCollectionOfObjectValues<VolumeDevice>("volumeDevices", container.volumeDevices, serializeVolumeDevice);
        writer.writeCollectionOfObjectValues<VolumeMount>("volumeMounts", container.volumeMounts, serializeVolumeMount);
        writer.writeStringValue("workingDir", container.workingDir);
        writer.writeAdditionalData(container.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerImage(writer: SerializationWriter, containerImage: Partial<ContainerImage> | undefined | null = {}) : void {
    if (containerImage) {
        writer.writeCollectionOfPrimitiveValues<string>("names", containerImage.names);
        writer.writeNumberValue("sizeBytes", containerImage.sizeBytes);
        writer.writeAdditionalData(containerImage.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerPort(writer: SerializationWriter, containerPort: Partial<ContainerPort> | undefined | null = {}) : void {
    if (containerPort) {
        writer.writeNumberValue("containerPort", containerPort.containerPort);
        writer.writeStringValue("hostIP", containerPort.hostIP);
        writer.writeNumberValue("hostPort", containerPort.hostPort);
        writer.writeStringValue("name", containerPort.name);
        writer.writeStringValue("protocol", containerPort.protocol);
        writer.writeAdditionalData(containerPort.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerResizePolicy(writer: SerializationWriter, containerResizePolicy: Partial<ContainerResizePolicy> | undefined | null = {}) : void {
    if (containerResizePolicy) {
        writer.writeStringValue("resourceName", containerResizePolicy.resourceName);
        writer.writeStringValue("restartPolicy", containerResizePolicy.restartPolicy);
        writer.writeAdditionalData(containerResizePolicy.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerState(writer: SerializationWriter, containerState: Partial<ContainerState> | undefined | null = {}) : void {
    if (containerState) {
        writer.writeObjectValue<ContainerStateRunning>("running", containerState.running, serializeContainerStateRunning);
        writer.writeObjectValue<ContainerStateTerminated>("terminated", containerState.terminated, serializeContainerStateTerminated);
        writer.writeObjectValue<ContainerStateWaiting>("waiting", containerState.waiting, serializeContainerStateWaiting);
        writer.writeAdditionalData(containerState.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerStateRunning(writer: SerializationWriter, containerStateRunning: Partial<ContainerStateRunning> | undefined | null = {}) : void {
    if (containerStateRunning) {
        writer.writeDateValue("startedAt", containerStateRunning.startedAt);
        writer.writeAdditionalData(containerStateRunning.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerStateTerminated(writer: SerializationWriter, containerStateTerminated: Partial<ContainerStateTerminated> | undefined | null = {}) : void {
    if (containerStateTerminated) {
        writer.writeStringValue("containerID", containerStateTerminated.containerID);
        writer.writeNumberValue("exitCode", containerStateTerminated.exitCode);
        writer.writeDateValue("finishedAt", containerStateTerminated.finishedAt);
        writer.writeStringValue("message", containerStateTerminated.message);
        writer.writeStringValue("reason", containerStateTerminated.reason);
        writer.writeNumberValue("signal", containerStateTerminated.signal);
        writer.writeDateValue("startedAt", containerStateTerminated.startedAt);
        writer.writeAdditionalData(containerStateTerminated.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerStateWaiting(writer: SerializationWriter, containerStateWaiting: Partial<ContainerStateWaiting> | undefined | null = {}) : void {
    if (containerStateWaiting) {
        writer.writeStringValue("message", containerStateWaiting.message);
        writer.writeStringValue("reason", containerStateWaiting.reason);
        writer.writeAdditionalData(containerStateWaiting.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerStatus(writer: SerializationWriter, containerStatus: Partial<ContainerStatus> | undefined | null = {}) : void {
    if (containerStatus) {
        writer.writeObjectValue<ContainerStatus_allocatedResources>("allocatedResources", containerStatus.allocatedResources, serializeContainerStatus_allocatedResources);
        writer.writeCollectionOfObjectValues<ResourceStatus>("allocatedResourcesStatus", containerStatus.allocatedResourcesStatus, serializeResourceStatus);
        writer.writeStringValue("containerID", containerStatus.containerID);
        writer.writeStringValue("image", containerStatus.image);
        writer.writeStringValue("imageID", containerStatus.imageID);
        writer.writeObjectValue<ContainerState>("lastState", containerStatus.lastState, serializeContainerState);
        writer.writeStringValue("name", containerStatus.name);
        writer.writeBooleanValue("ready", containerStatus.ready);
        writer.writeObjectValue<ResourceRequirements>("resources", containerStatus.resources, serializeResourceRequirements);
        writer.writeNumberValue("restartCount", containerStatus.restartCount);
        writer.writeBooleanValue("started", containerStatus.started);
        writer.writeObjectValue<ContainerState>("state", containerStatus.state, serializeContainerState);
        writer.writeObjectValue<ContainerUser>("user", containerStatus.user, serializeContainerUser);
        writer.writeCollectionOfObjectValues<VolumeMountStatus>("volumeMounts", containerStatus.volumeMounts, serializeVolumeMountStatus);
        writer.writeAdditionalData(containerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerStatus_allocatedResources(writer: SerializationWriter, containerStatus_allocatedResources: Partial<ContainerStatus_allocatedResources> | undefined | null = {}) : void {
    if (containerStatus_allocatedResources) {
        writer.writeAdditionalData(containerStatus_allocatedResources.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerUser(writer: SerializationWriter, containerUser: Partial<ContainerUser> | undefined | null = {}) : void {
    if (containerUser) {
        writer.writeObjectValue<LinuxContainerUser>("linux", containerUser.linux, serializeLinuxContainerUser);
        writer.writeAdditionalData(containerUser.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIPersistentVolumeSource(writer: SerializationWriter, cSIPersistentVolumeSource: Partial<CSIPersistentVolumeSource> | undefined | null = {}) : void {
    if (cSIPersistentVolumeSource) {
        writer.writeObjectValue<SecretReference>("controllerExpandSecretRef", cSIPersistentVolumeSource.controllerExpandSecretRef, serializeSecretReference);
        writer.writeObjectValue<SecretReference>("controllerPublishSecretRef", cSIPersistentVolumeSource.controllerPublishSecretRef, serializeSecretReference);
        writer.writeStringValue("driver", cSIPersistentVolumeSource.driver);
        writer.writeStringValue("fsType", cSIPersistentVolumeSource.fsType);
        writer.writeObjectValue<SecretReference>("nodeExpandSecretRef", cSIPersistentVolumeSource.nodeExpandSecretRef, serializeSecretReference);
        writer.writeObjectValue<SecretReference>("nodePublishSecretRef", cSIPersistentVolumeSource.nodePublishSecretRef, serializeSecretReference);
        writer.writeObjectValue<SecretReference>("nodeStageSecretRef", cSIPersistentVolumeSource.nodeStageSecretRef, serializeSecretReference);
        writer.writeBooleanValue("readOnly", cSIPersistentVolumeSource.readOnly);
        writer.writeObjectValue<CSIPersistentVolumeSource_volumeAttributes>("volumeAttributes", cSIPersistentVolumeSource.volumeAttributes, serializeCSIPersistentVolumeSource_volumeAttributes);
        writer.writeStringValue("volumeHandle", cSIPersistentVolumeSource.volumeHandle);
        writer.writeAdditionalData(cSIPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIPersistentVolumeSource_volumeAttributes(writer: SerializationWriter, cSIPersistentVolumeSource_volumeAttributes: Partial<CSIPersistentVolumeSource_volumeAttributes> | undefined | null = {}) : void {
    if (cSIPersistentVolumeSource_volumeAttributes) {
        writer.writeAdditionalData(cSIPersistentVolumeSource_volumeAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIVolumeSource(writer: SerializationWriter, cSIVolumeSource: Partial<CSIVolumeSource> | undefined | null = {}) : void {
    if (cSIVolumeSource) {
        writer.writeStringValue("driver", cSIVolumeSource.driver);
        writer.writeStringValue("fsType", cSIVolumeSource.fsType);
        writer.writeObjectValue<LocalObjectReference>("nodePublishSecretRef", cSIVolumeSource.nodePublishSecretRef, serializeLocalObjectReference);
        writer.writeBooleanValue("readOnly", cSIVolumeSource.readOnly);
        writer.writeObjectValue<CSIVolumeSource_volumeAttributes>("volumeAttributes", cSIVolumeSource.volumeAttributes, serializeCSIVolumeSource_volumeAttributes);
        writer.writeAdditionalData(cSIVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCSIVolumeSource_volumeAttributes(writer: SerializationWriter, cSIVolumeSource_volumeAttributes: Partial<CSIVolumeSource_volumeAttributes> | undefined | null = {}) : void {
    if (cSIVolumeSource_volumeAttributes) {
        writer.writeAdditionalData(cSIVolumeSource_volumeAttributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDaemonEndpoint(writer: SerializationWriter, daemonEndpoint: Partial<DaemonEndpoint> | undefined | null = {}) : void {
    if (daemonEndpoint) {
        writer.writeNumberValue("Port", daemonEndpoint.port);
        writer.writeAdditionalData(daemonEndpoint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDownwardAPIProjection(writer: SerializationWriter, downwardAPIProjection: Partial<DownwardAPIProjection> | undefined | null = {}) : void {
    if (downwardAPIProjection) {
        writer.writeCollectionOfObjectValues<DownwardAPIVolumeFile>("items", downwardAPIProjection.items, serializeDownwardAPIVolumeFile);
        writer.writeAdditionalData(downwardAPIProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDownwardAPIVolumeFile(writer: SerializationWriter, downwardAPIVolumeFile: Partial<DownwardAPIVolumeFile> | undefined | null = {}) : void {
    if (downwardAPIVolumeFile) {
        writer.writeObjectValue<ObjectFieldSelector>("fieldRef", downwardAPIVolumeFile.fieldRef, serializeObjectFieldSelector);
        writer.writeNumberValue("mode", downwardAPIVolumeFile.mode);
        writer.writeStringValue("path", downwardAPIVolumeFile.path);
        writer.writeObjectValue<ResourceFieldSelector>("resourceFieldRef", downwardAPIVolumeFile.resourceFieldRef, serializeResourceFieldSelector);
        writer.writeAdditionalData(downwardAPIVolumeFile.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDownwardAPIVolumeSource(writer: SerializationWriter, downwardAPIVolumeSource: Partial<DownwardAPIVolumeSource> | undefined | null = {}) : void {
    if (downwardAPIVolumeSource) {
        writer.writeNumberValue("defaultMode", downwardAPIVolumeSource.defaultMode);
        writer.writeCollectionOfObjectValues<DownwardAPIVolumeFile>("items", downwardAPIVolumeSource.items, serializeDownwardAPIVolumeFile);
        writer.writeAdditionalData(downwardAPIVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmptyDirVolumeSource(writer: SerializationWriter, emptyDirVolumeSource: Partial<EmptyDirVolumeSource> | undefined | null = {}) : void {
    if (emptyDirVolumeSource) {
        writer.writeStringValue("medium", emptyDirVolumeSource.medium);
        writer.writeStringValue("sizeLimit", emptyDirVolumeSource.sizeLimit);
        writer.writeAdditionalData(emptyDirVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointAddress(writer: SerializationWriter, endpointAddress: Partial<EndpointAddress> | undefined | null = {}) : void {
    if (endpointAddress) {
        writer.writeStringValue("hostname", endpointAddress.hostname);
        writer.writeStringValue("ip", endpointAddress.ip);
        writer.writeStringValue("nodeName", endpointAddress.nodeName);
        writer.writeObjectValue<ObjectReference>("targetRef", endpointAddress.targetRef, serializeObjectReference);
        writer.writeAdditionalData(endpointAddress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointPort(writer: SerializationWriter, endpointPort: Partial<EndpointPort> | undefined | null = {}) : void {
    if (endpointPort) {
        writer.writeStringValue("appProtocol", endpointPort.appProtocol);
        writer.writeStringValue("name", endpointPort.name);
        writer.writeNumberValue("port", endpointPort.port);
        writer.writeStringValue("protocol", endpointPort.protocol);
        writer.writeAdditionalData(endpointPort.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpoints(writer: SerializationWriter, endpoints: Partial<Endpoints> | undefined | null = {}) : void {
    if (endpoints) {
        writer.writeStringValue("apiVersion", endpoints.apiVersion);
        writer.writeStringValue("kind", endpoints.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", endpoints.metadata, serializeObjectMeta);
        writer.writeCollectionOfObjectValues<EndpointSubset>("subsets", endpoints.subsets, serializeEndpointSubset);
        writer.writeAdditionalData(endpoints.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointsList(writer: SerializationWriter, endpointsList: Partial<EndpointsList> | undefined | null = {}) : void {
    if (endpointsList) {
        writer.writeStringValue("apiVersion", endpointsList.apiVersion);
        writer.writeCollectionOfObjectValues<Endpoints>("items", endpointsList.items, serializeEndpoints);
        writer.writeStringValue("kind", endpointsList.kind);
        writer.writeObjectValue<ListMeta>("metadata", endpointsList.metadata, serializeListMeta);
        writer.writeAdditionalData(endpointsList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointSubset(writer: SerializationWriter, endpointSubset: Partial<EndpointSubset> | undefined | null = {}) : void {
    if (endpointSubset) {
        writer.writeCollectionOfObjectValues<EndpointAddress>("addresses", endpointSubset.addresses, serializeEndpointAddress);
        writer.writeCollectionOfObjectValues<EndpointAddress>("notReadyAddresses", endpointSubset.notReadyAddresses, serializeEndpointAddress);
        writer.writeCollectionOfObjectValues<EndpointPort>("ports", endpointSubset.ports, serializeEndpointPort);
        writer.writeAdditionalData(endpointSubset.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEnvFromSource(writer: SerializationWriter, envFromSource: Partial<EnvFromSource> | undefined | null = {}) : void {
    if (envFromSource) {
        writer.writeObjectValue<ConfigMapEnvSource>("configMapRef", envFromSource.configMapRef, serializeConfigMapEnvSource);
        writer.writeStringValue("prefix", envFromSource.prefix);
        writer.writeObjectValue<SecretEnvSource>("secretRef", envFromSource.secretRef, serializeSecretEnvSource);
        writer.writeAdditionalData(envFromSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEnvVar(writer: SerializationWriter, envVar: Partial<EnvVar> | undefined | null = {}) : void {
    if (envVar) {
        writer.writeStringValue("name", envVar.name);
        writer.writeStringValue("value", envVar.value);
        writer.writeObjectValue<EnvVarSource>("valueFrom", envVar.valueFrom, serializeEnvVarSource);
        writer.writeAdditionalData(envVar.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEnvVarSource(writer: SerializationWriter, envVarSource: Partial<EnvVarSource> | undefined | null = {}) : void {
    if (envVarSource) {
        writer.writeObjectValue<ConfigMapKeySelector>("configMapKeyRef", envVarSource.configMapKeyRef, serializeConfigMapKeySelector);
        writer.writeObjectValue<ObjectFieldSelector>("fieldRef", envVarSource.fieldRef, serializeObjectFieldSelector);
        writer.writeObjectValue<ResourceFieldSelector>("resourceFieldRef", envVarSource.resourceFieldRef, serializeResourceFieldSelector);
        writer.writeObjectValue<SecretKeySelector>("secretKeyRef", envVarSource.secretKeyRef, serializeSecretKeySelector);
        writer.writeAdditionalData(envVarSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEphemeralContainer(writer: SerializationWriter, ephemeralContainer: Partial<EphemeralContainer> | undefined | null = {}) : void {
    if (ephemeralContainer) {
        writer.writeCollectionOfPrimitiveValues<string>("args", ephemeralContainer.args);
        writer.writeCollectionOfPrimitiveValues<string>("command", ephemeralContainer.command);
        writer.writeCollectionOfObjectValues<EnvVar>("env", ephemeralContainer.env, serializeEnvVar);
        writer.writeCollectionOfObjectValues<EnvFromSource>("envFrom", ephemeralContainer.envFrom, serializeEnvFromSource);
        writer.writeStringValue("image", ephemeralContainer.image);
        writer.writeStringValue("imagePullPolicy", ephemeralContainer.imagePullPolicy);
        writer.writeObjectValue<Lifecycle>("lifecycle", ephemeralContainer.lifecycle, serializeLifecycle);
        writer.writeObjectValue<Probe>("livenessProbe", ephemeralContainer.livenessProbe, serializeProbe);
        writer.writeStringValue("name", ephemeralContainer.name);
        writer.writeCollectionOfObjectValues<ContainerPort>("ports", ephemeralContainer.ports, serializeContainerPort);
        writer.writeObjectValue<Probe>("readinessProbe", ephemeralContainer.readinessProbe, serializeProbe);
        writer.writeCollectionOfObjectValues<ContainerResizePolicy>("resizePolicy", ephemeralContainer.resizePolicy, serializeContainerResizePolicy);
        writer.writeObjectValue<ResourceRequirements>("resources", ephemeralContainer.resources, serializeResourceRequirements);
        writer.writeStringValue("restartPolicy", ephemeralContainer.restartPolicy);
        writer.writeObjectValue<SecurityContext>("securityContext", ephemeralContainer.securityContext, serializeSecurityContext);
        writer.writeObjectValue<Probe>("startupProbe", ephemeralContainer.startupProbe, serializeProbe);
        writer.writeBooleanValue("stdin", ephemeralContainer.stdin);
        writer.writeBooleanValue("stdinOnce", ephemeralContainer.stdinOnce);
        writer.writeStringValue("targetContainerName", ephemeralContainer.targetContainerName);
        writer.writeStringValue("terminationMessagePath", ephemeralContainer.terminationMessagePath);
        writer.writeStringValue("terminationMessagePolicy", ephemeralContainer.terminationMessagePolicy);
        writer.writeBooleanValue("tty", ephemeralContainer.tty);
        writer.writeCollectionOfObjectValues<VolumeDevice>("volumeDevices", ephemeralContainer.volumeDevices, serializeVolumeDevice);
        writer.writeCollectionOfObjectValues<VolumeMount>("volumeMounts", ephemeralContainer.volumeMounts, serializeVolumeMount);
        writer.writeStringValue("workingDir", ephemeralContainer.workingDir);
        writer.writeAdditionalData(ephemeralContainer.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEphemeralVolumeSource(writer: SerializationWriter, ephemeralVolumeSource: Partial<EphemeralVolumeSource> | undefined | null = {}) : void {
    if (ephemeralVolumeSource) {
        writer.writeObjectValue<PersistentVolumeClaimTemplate>("volumeClaimTemplate", ephemeralVolumeSource.volumeClaimTemplate, serializePersistentVolumeClaimTemplate);
        writer.writeAdditionalData(ephemeralVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEvent(writer: SerializationWriter, event: Partial<Event> | undefined | null = {}) : void {
    if (event) {
        writer.writeStringValue("action", event.action);
        writer.writeStringValue("apiVersion", event.apiVersion);
        writer.writeNumberValue("count", event.count);
        writer.writeDateValue("eventTime", event.eventTime);
        writer.writeDateValue("firstTimestamp", event.firstTimestamp);
        writer.writeObjectValue<ObjectReference>("involvedObject", event.involvedObject, serializeObjectReference);
        writer.writeStringValue("kind", event.kind);
        writer.writeDateValue("lastTimestamp", event.lastTimestamp);
        writer.writeStringValue("message", event.message);
        writer.writeObjectValue<ObjectMeta>("metadata", event.metadata, serializeObjectMeta);
        writer.writeStringValue("reason", event.reason);
        writer.writeObjectValue<ObjectReference>("related", event.related, serializeObjectReference);
        writer.writeStringValue("reportingComponent", event.reportingComponent);
        writer.writeStringValue("reportingInstance", event.reportingInstance);
        writer.writeObjectValue<EventSeries>("series", event.series, serializeEventSeries);
        writer.writeObjectValue<EventSource>("source", event.source, serializeEventSource);
        writer.writeStringValue("type", event.type);
        writer.writeAdditionalData(event.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventList(writer: SerializationWriter, eventList: Partial<EventList> | undefined | null = {}) : void {
    if (eventList) {
        writer.writeStringValue("apiVersion", eventList.apiVersion);
        writer.writeCollectionOfObjectValues<Event>("items", eventList.items, serializeEvent);
        writer.writeStringValue("kind", eventList.kind);
        writer.writeObjectValue<ListMeta>("metadata", eventList.metadata, serializeListMeta);
        writer.writeAdditionalData(eventList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventSeries(writer: SerializationWriter, eventSeries: Partial<EventSeries> | undefined | null = {}) : void {
    if (eventSeries) {
        writer.writeNumberValue("count", eventSeries.count);
        writer.writeDateValue("lastObservedTime", eventSeries.lastObservedTime);
        writer.writeAdditionalData(eventSeries.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventSource(writer: SerializationWriter, eventSource: Partial<EventSource> | undefined | null = {}) : void {
    if (eventSource) {
        writer.writeStringValue("component", eventSource.component);
        writer.writeStringValue("host", eventSource.host);
        writer.writeAdditionalData(eventSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExecAction(writer: SerializationWriter, execAction: Partial<ExecAction> | undefined | null = {}) : void {
    if (execAction) {
        writer.writeCollectionOfPrimitiveValues<string>("command", execAction.command);
        writer.writeAdditionalData(execAction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFCVolumeSource(writer: SerializationWriter, fCVolumeSource: Partial<FCVolumeSource> | undefined | null = {}) : void {
    if (fCVolumeSource) {
        writer.writeStringValue("fsType", fCVolumeSource.fsType);
        writer.writeNumberValue("lun", fCVolumeSource.lun);
        writer.writeBooleanValue("readOnly", fCVolumeSource.readOnly);
        writer.writeCollectionOfPrimitiveValues<string>("targetWWNs", fCVolumeSource.targetWWNs);
        writer.writeCollectionOfPrimitiveValues<string>("wwids", fCVolumeSource.wwids);
        writer.writeAdditionalData(fCVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlexPersistentVolumeSource(writer: SerializationWriter, flexPersistentVolumeSource: Partial<FlexPersistentVolumeSource> | undefined | null = {}) : void {
    if (flexPersistentVolumeSource) {
        writer.writeStringValue("driver", flexPersistentVolumeSource.driver);
        writer.writeStringValue("fsType", flexPersistentVolumeSource.fsType);
        writer.writeObjectValue<FlexPersistentVolumeSource_options>("options", flexPersistentVolumeSource.options, serializeFlexPersistentVolumeSource_options);
        writer.writeBooleanValue("readOnly", flexPersistentVolumeSource.readOnly);
        writer.writeObjectValue<SecretReference>("secretRef", flexPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeAdditionalData(flexPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlexPersistentVolumeSource_options(writer: SerializationWriter, flexPersistentVolumeSource_options: Partial<FlexPersistentVolumeSource_options> | undefined | null = {}) : void {
    if (flexPersistentVolumeSource_options) {
        writer.writeAdditionalData(flexPersistentVolumeSource_options.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlexVolumeSource(writer: SerializationWriter, flexVolumeSource: Partial<FlexVolumeSource> | undefined | null = {}) : void {
    if (flexVolumeSource) {
        writer.writeStringValue("driver", flexVolumeSource.driver);
        writer.writeStringValue("fsType", flexVolumeSource.fsType);
        writer.writeObjectValue<FlexVolumeSource_options>("options", flexVolumeSource.options, serializeFlexVolumeSource_options);
        writer.writeBooleanValue("readOnly", flexVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", flexVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeAdditionalData(flexVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlexVolumeSource_options(writer: SerializationWriter, flexVolumeSource_options: Partial<FlexVolumeSource_options> | undefined | null = {}) : void {
    if (flexVolumeSource_options) {
        writer.writeAdditionalData(flexVolumeSource_options.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlockerVolumeSource(writer: SerializationWriter, flockerVolumeSource: Partial<FlockerVolumeSource> | undefined | null = {}) : void {
    if (flockerVolumeSource) {
        writer.writeStringValue("datasetName", flockerVolumeSource.datasetName);
        writer.writeStringValue("datasetUUID", flockerVolumeSource.datasetUUID);
        writer.writeAdditionalData(flockerVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGCEPersistentDiskVolumeSource(writer: SerializationWriter, gCEPersistentDiskVolumeSource: Partial<GCEPersistentDiskVolumeSource> | undefined | null = {}) : void {
    if (gCEPersistentDiskVolumeSource) {
        writer.writeStringValue("fsType", gCEPersistentDiskVolumeSource.fsType);
        writer.writeNumberValue("partition", gCEPersistentDiskVolumeSource.partition);
        writer.writeStringValue("pdName", gCEPersistentDiskVolumeSource.pdName);
        writer.writeBooleanValue("readOnly", gCEPersistentDiskVolumeSource.readOnly);
        writer.writeAdditionalData(gCEPersistentDiskVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGitRepoVolumeSource(writer: SerializationWriter, gitRepoVolumeSource: Partial<GitRepoVolumeSource> | undefined | null = {}) : void {
    if (gitRepoVolumeSource) {
        writer.writeStringValue("directory", gitRepoVolumeSource.directory);
        writer.writeStringValue("repository", gitRepoVolumeSource.repository);
        writer.writeStringValue("revision", gitRepoVolumeSource.revision);
        writer.writeAdditionalData(gitRepoVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGlusterfsPersistentVolumeSource(writer: SerializationWriter, glusterfsPersistentVolumeSource: Partial<GlusterfsPersistentVolumeSource> | undefined | null = {}) : void {
    if (glusterfsPersistentVolumeSource) {
        writer.writeStringValue("endpoints", glusterfsPersistentVolumeSource.endpoints);
        writer.writeStringValue("endpointsNamespace", glusterfsPersistentVolumeSource.endpointsNamespace);
        writer.writeStringValue("path", glusterfsPersistentVolumeSource.path);
        writer.writeBooleanValue("readOnly", glusterfsPersistentVolumeSource.readOnly);
        writer.writeAdditionalData(glusterfsPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGlusterfsVolumeSource(writer: SerializationWriter, glusterfsVolumeSource: Partial<GlusterfsVolumeSource> | undefined | null = {}) : void {
    if (glusterfsVolumeSource) {
        writer.writeStringValue("endpoints", glusterfsVolumeSource.endpoints);
        writer.writeStringValue("path", glusterfsVolumeSource.path);
        writer.writeBooleanValue("readOnly", glusterfsVolumeSource.readOnly);
        writer.writeAdditionalData(glusterfsVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGRPCAction(writer: SerializationWriter, gRPCAction: Partial<GRPCAction> | undefined | null = {}) : void {
    if (gRPCAction) {
        writer.writeNumberValue("port", gRPCAction.port);
        writer.writeStringValue("service", gRPCAction.service);
        writer.writeAdditionalData(gRPCAction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHostAlias(writer: SerializationWriter, hostAlias: Partial<HostAlias> | undefined | null = {}) : void {
    if (hostAlias) {
        writer.writeCollectionOfPrimitiveValues<string>("hostnames", hostAlias.hostnames);
        writer.writeStringValue("ip", hostAlias.ip);
        writer.writeAdditionalData(hostAlias.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHostIP(writer: SerializationWriter, hostIP: Partial<HostIP> | undefined | null = {}) : void {
    if (hostIP) {
        writer.writeStringValue("ip", hostIP.ip);
        writer.writeAdditionalData(hostIP.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHostPathVolumeSource(writer: SerializationWriter, hostPathVolumeSource: Partial<HostPathVolumeSource> | undefined | null = {}) : void {
    if (hostPathVolumeSource) {
        writer.writeStringValue("path", hostPathVolumeSource.path);
        writer.writeStringValue("type", hostPathVolumeSource.type);
        writer.writeAdditionalData(hostPathVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHTTPGetAction(writer: SerializationWriter, hTTPGetAction: Partial<HTTPGetAction> | undefined | null = {}) : void {
    if (hTTPGetAction) {
        writer.writeStringValue("host", hTTPGetAction.host);
        writer.writeCollectionOfObjectValues<HTTPHeader>("httpHeaders", hTTPGetAction.httpHeaders, serializeHTTPHeader);
        writer.writeStringValue("path", hTTPGetAction.path);
        writer.writeStringValue("port", hTTPGetAction.port);
        writer.writeStringValue("scheme", hTTPGetAction.scheme);
        writer.writeAdditionalData(hTTPGetAction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHTTPHeader(writer: SerializationWriter, hTTPHeader: Partial<HTTPHeader> | undefined | null = {}) : void {
    if (hTTPHeader) {
        writer.writeStringValue("name", hTTPHeader.name);
        writer.writeStringValue("value", hTTPHeader.value);
        writer.writeAdditionalData(hTTPHeader.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImageVolumeSource(writer: SerializationWriter, imageVolumeSource: Partial<ImageVolumeSource> | undefined | null = {}) : void {
    if (imageVolumeSource) {
        writer.writeStringValue("pullPolicy", imageVolumeSource.pullPolicy);
        writer.writeStringValue("reference", imageVolumeSource.reference);
        writer.writeAdditionalData(imageVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeISCSIPersistentVolumeSource(writer: SerializationWriter, iSCSIPersistentVolumeSource: Partial<ISCSIPersistentVolumeSource> | undefined | null = {}) : void {
    if (iSCSIPersistentVolumeSource) {
        writer.writeBooleanValue("chapAuthDiscovery", iSCSIPersistentVolumeSource.chapAuthDiscovery);
        writer.writeBooleanValue("chapAuthSession", iSCSIPersistentVolumeSource.chapAuthSession);
        writer.writeStringValue("fsType", iSCSIPersistentVolumeSource.fsType);
        writer.writeStringValue("initiatorName", iSCSIPersistentVolumeSource.initiatorName);
        writer.writeStringValue("iqn", iSCSIPersistentVolumeSource.iqn);
        writer.writeStringValue("iscsiInterface", iSCSIPersistentVolumeSource.iscsiInterface);
        writer.writeNumberValue("lun", iSCSIPersistentVolumeSource.lun);
        writer.writeCollectionOfPrimitiveValues<string>("portals", iSCSIPersistentVolumeSource.portals);
        writer.writeBooleanValue("readOnly", iSCSIPersistentVolumeSource.readOnly);
        writer.writeObjectValue<SecretReference>("secretRef", iSCSIPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeStringValue("targetPortal", iSCSIPersistentVolumeSource.targetPortal);
        writer.writeAdditionalData(iSCSIPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeISCSIVolumeSource(writer: SerializationWriter, iSCSIVolumeSource: Partial<ISCSIVolumeSource> | undefined | null = {}) : void {
    if (iSCSIVolumeSource) {
        writer.writeBooleanValue("chapAuthDiscovery", iSCSIVolumeSource.chapAuthDiscovery);
        writer.writeBooleanValue("chapAuthSession", iSCSIVolumeSource.chapAuthSession);
        writer.writeStringValue("fsType", iSCSIVolumeSource.fsType);
        writer.writeStringValue("initiatorName", iSCSIVolumeSource.initiatorName);
        writer.writeStringValue("iqn", iSCSIVolumeSource.iqn);
        writer.writeStringValue("iscsiInterface", iSCSIVolumeSource.iscsiInterface);
        writer.writeNumberValue("lun", iSCSIVolumeSource.lun);
        writer.writeCollectionOfPrimitiveValues<string>("portals", iSCSIVolumeSource.portals);
        writer.writeBooleanValue("readOnly", iSCSIVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", iSCSIVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeStringValue("targetPortal", iSCSIVolumeSource.targetPortal);
        writer.writeAdditionalData(iSCSIVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyToPath(writer: SerializationWriter, keyToPath: Partial<KeyToPath> | undefined | null = {}) : void {
    if (keyToPath) {
        writer.writeStringValue("key", keyToPath.key);
        writer.writeNumberValue("mode", keyToPath.mode);
        writer.writeStringValue("path", keyToPath.path);
        writer.writeAdditionalData(keyToPath.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLifecycle(writer: SerializationWriter, lifecycle: Partial<Lifecycle> | undefined | null = {}) : void {
    if (lifecycle) {
        writer.writeObjectValue<LifecycleHandler>("postStart", lifecycle.postStart, serializeLifecycleHandler);
        writer.writeObjectValue<LifecycleHandler>("preStop", lifecycle.preStop, serializeLifecycleHandler);
        writer.writeAdditionalData(lifecycle.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLifecycleHandler(writer: SerializationWriter, lifecycleHandler: Partial<LifecycleHandler> | undefined | null = {}) : void {
    if (lifecycleHandler) {
        writer.writeObjectValue<ExecAction>("exec", lifecycleHandler.exec, serializeExecAction);
        writer.writeObjectValue<HTTPGetAction>("httpGet", lifecycleHandler.httpGet, serializeHTTPGetAction);
        writer.writeObjectValue<SleepAction>("sleep", lifecycleHandler.sleep, serializeSleepAction);
        writer.writeObjectValue<TCPSocketAction>("tcpSocket", lifecycleHandler.tcpSocket, serializeTCPSocketAction);
        writer.writeAdditionalData(lifecycleHandler.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRange(writer: SerializationWriter, limitRange: Partial<LimitRange> | undefined | null = {}) : void {
    if (limitRange) {
        writer.writeStringValue("apiVersion", limitRange.apiVersion);
        writer.writeStringValue("kind", limitRange.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", limitRange.metadata, serializeObjectMeta);
        writer.writeObjectValue<LimitRangeSpec>("spec", limitRange.spec, serializeLimitRangeSpec);
        writer.writeAdditionalData(limitRange.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem(writer: SerializationWriter, limitRangeItem: Partial<LimitRangeItem> | undefined | null = {}) : void {
    if (limitRangeItem) {
        writer.writeObjectValue<LimitRangeItem_default>("default", limitRangeItem.defaultEscaped, serializeLimitRangeItem_default);
        writer.writeObjectValue<LimitRangeItem_defaultRequest>("defaultRequest", limitRangeItem.defaultRequest, serializeLimitRangeItem_defaultRequest);
        writer.writeObjectValue<LimitRangeItem_max>("max", limitRangeItem.max, serializeLimitRangeItem_max);
        writer.writeObjectValue<LimitRangeItem_maxLimitRequestRatio>("maxLimitRequestRatio", limitRangeItem.maxLimitRequestRatio, serializeLimitRangeItem_maxLimitRequestRatio);
        writer.writeObjectValue<LimitRangeItem_min>("min", limitRangeItem.min, serializeLimitRangeItem_min);
        writer.writeStringValue("type", limitRangeItem.type);
        writer.writeAdditionalData(limitRangeItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem_default(writer: SerializationWriter, limitRangeItem_default: Partial<LimitRangeItem_default> | undefined | null = {}) : void {
    if (limitRangeItem_default) {
        writer.writeAdditionalData(limitRangeItem_default.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem_defaultRequest(writer: SerializationWriter, limitRangeItem_defaultRequest: Partial<LimitRangeItem_defaultRequest> | undefined | null = {}) : void {
    if (limitRangeItem_defaultRequest) {
        writer.writeAdditionalData(limitRangeItem_defaultRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem_max(writer: SerializationWriter, limitRangeItem_max: Partial<LimitRangeItem_max> | undefined | null = {}) : void {
    if (limitRangeItem_max) {
        writer.writeAdditionalData(limitRangeItem_max.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem_maxLimitRequestRatio(writer: SerializationWriter, limitRangeItem_maxLimitRequestRatio: Partial<LimitRangeItem_maxLimitRequestRatio> | undefined | null = {}) : void {
    if (limitRangeItem_maxLimitRequestRatio) {
        writer.writeAdditionalData(limitRangeItem_maxLimitRequestRatio.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeItem_min(writer: SerializationWriter, limitRangeItem_min: Partial<LimitRangeItem_min> | undefined | null = {}) : void {
    if (limitRangeItem_min) {
        writer.writeAdditionalData(limitRangeItem_min.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeList(writer: SerializationWriter, limitRangeList: Partial<LimitRangeList> | undefined | null = {}) : void {
    if (limitRangeList) {
        writer.writeStringValue("apiVersion", limitRangeList.apiVersion);
        writer.writeCollectionOfObjectValues<LimitRange>("items", limitRangeList.items, serializeLimitRange);
        writer.writeStringValue("kind", limitRangeList.kind);
        writer.writeObjectValue<ListMeta>("metadata", limitRangeList.metadata, serializeListMeta);
        writer.writeAdditionalData(limitRangeList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitRangeSpec(writer: SerializationWriter, limitRangeSpec: Partial<LimitRangeSpec> | undefined | null = {}) : void {
    if (limitRangeSpec) {
        writer.writeCollectionOfObjectValues<LimitRangeItem>("limits", limitRangeSpec.limits, serializeLimitRangeItem);
        writer.writeAdditionalData(limitRangeSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLinuxContainerUser(writer: SerializationWriter, linuxContainerUser: Partial<LinuxContainerUser> | undefined | null = {}) : void {
    if (linuxContainerUser) {
        writer.writeNumberValue("gid", linuxContainerUser.gid);
        writer.writeCollectionOfPrimitiveValues<number>("supplementalGroups", linuxContainerUser.supplementalGroups);
        writer.writeNumberValue("uid", linuxContainerUser.uid);
        writer.writeAdditionalData(linuxContainerUser.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoadBalancerIngress(writer: SerializationWriter, loadBalancerIngress: Partial<LoadBalancerIngress> | undefined | null = {}) : void {
    if (loadBalancerIngress) {
        writer.writeStringValue("hostname", loadBalancerIngress.hostname);
        writer.writeStringValue("ip", loadBalancerIngress.ip);
        writer.writeStringValue("ipMode", loadBalancerIngress.ipMode);
        writer.writeCollectionOfObjectValues<PortStatus>("ports", loadBalancerIngress.ports, serializePortStatus);
        writer.writeAdditionalData(loadBalancerIngress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoadBalancerStatus(writer: SerializationWriter, loadBalancerStatus: Partial<LoadBalancerStatus> | undefined | null = {}) : void {
    if (loadBalancerStatus) {
        writer.writeCollectionOfObjectValues<LoadBalancerIngress>("ingress", loadBalancerStatus.ingress, serializeLoadBalancerIngress);
        writer.writeAdditionalData(loadBalancerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocalObjectReference(writer: SerializationWriter, localObjectReference: Partial<LocalObjectReference> | undefined | null = {}) : void {
    if (localObjectReference) {
        writer.writeStringValue("name", localObjectReference.name);
        writer.writeAdditionalData(localObjectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocalVolumeSource(writer: SerializationWriter, localVolumeSource: Partial<LocalVolumeSource> | undefined | null = {}) : void {
    if (localVolumeSource) {
        writer.writeStringValue("fsType", localVolumeSource.fsType);
        writer.writeStringValue("path", localVolumeSource.path);
        writer.writeAdditionalData(localVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeModifyVolumeStatus(writer: SerializationWriter, modifyVolumeStatus: Partial<ModifyVolumeStatus> | undefined | null = {}) : void {
    if (modifyVolumeStatus) {
        writer.writeStringValue("status", modifyVolumeStatus.status);
        writer.writeStringValue("targetVolumeAttributesClassName", modifyVolumeStatus.targetVolumeAttributesClassName);
        writer.writeAdditionalData(modifyVolumeStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespace(writer: SerializationWriter, namespace: Partial<Namespace> | undefined | null = {}) : void {
    if (namespace) {
        writer.writeStringValue("apiVersion", namespace.apiVersion);
        writer.writeStringValue("kind", namespace.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", namespace.metadata, serializeObjectMeta);
        writer.writeObjectValue<NamespaceSpec>("spec", namespace.spec, serializeNamespaceSpec);
        writer.writeObjectValue<NamespaceStatus>("status", namespace.status, serializeNamespaceStatus);
        writer.writeAdditionalData(namespace.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespaceCondition(writer: SerializationWriter, namespaceCondition: Partial<NamespaceCondition> | undefined | null = {}) : void {
    if (namespaceCondition) {
        writer.writeDateValue("lastTransitionTime", namespaceCondition.lastTransitionTime);
        writer.writeStringValue("message", namespaceCondition.message);
        writer.writeStringValue("reason", namespaceCondition.reason);
        writer.writeStringValue("status", namespaceCondition.status);
        writer.writeStringValue("type", namespaceCondition.type);
        writer.writeAdditionalData(namespaceCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespaceList(writer: SerializationWriter, namespaceList: Partial<NamespaceList> | undefined | null = {}) : void {
    if (namespaceList) {
        writer.writeStringValue("apiVersion", namespaceList.apiVersion);
        writer.writeCollectionOfObjectValues<Namespace>("items", namespaceList.items, serializeNamespace);
        writer.writeStringValue("kind", namespaceList.kind);
        writer.writeObjectValue<ListMeta>("metadata", namespaceList.metadata, serializeListMeta);
        writer.writeAdditionalData(namespaceList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespaceSpec(writer: SerializationWriter, namespaceSpec: Partial<NamespaceSpec> | undefined | null = {}) : void {
    if (namespaceSpec) {
        writer.writeCollectionOfPrimitiveValues<string>("finalizers", namespaceSpec.finalizers);
        writer.writeAdditionalData(namespaceSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespaceStatus(writer: SerializationWriter, namespaceStatus: Partial<NamespaceStatus> | undefined | null = {}) : void {
    if (namespaceStatus) {
        writer.writeCollectionOfObjectValues<NamespaceCondition>("conditions", namespaceStatus.conditions, serializeNamespaceCondition);
        writer.writeStringValue("phase", namespaceStatus.phase);
        writer.writeAdditionalData(namespaceStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNFSVolumeSource(writer: SerializationWriter, nFSVolumeSource: Partial<NFSVolumeSource> | undefined | null = {}) : void {
    if (nFSVolumeSource) {
        writer.writeStringValue("path", nFSVolumeSource.path);
        writer.writeBooleanValue("readOnly", nFSVolumeSource.readOnly);
        writer.writeStringValue("server", nFSVolumeSource.server);
        writer.writeAdditionalData(nFSVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNode(writer: SerializationWriter, node: Partial<Node> | undefined | null = {}) : void {
    if (node) {
        writer.writeStringValue("apiVersion", node.apiVersion);
        writer.writeStringValue("kind", node.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", node.metadata, serializeObjectMeta);
        writer.writeObjectValue<NodeSpec>("spec", node.spec, serializeNodeSpec);
        writer.writeObjectValue<NodeStatus>("status", node.status, serializeNodeStatus);
        writer.writeAdditionalData(node.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeAddress(writer: SerializationWriter, nodeAddress: Partial<NodeAddress> | undefined | null = {}) : void {
    if (nodeAddress) {
        writer.writeStringValue("address", nodeAddress.address);
        writer.writeStringValue("type", nodeAddress.type);
        writer.writeAdditionalData(nodeAddress.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeAffinity(writer: SerializationWriter, nodeAffinity: Partial<NodeAffinity> | undefined | null = {}) : void {
    if (nodeAffinity) {
        writer.writeCollectionOfObjectValues<PreferredSchedulingTerm>("preferredDuringSchedulingIgnoredDuringExecution", nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution, serializePreferredSchedulingTerm);
        writer.writeObjectValue<NodeSelector>("requiredDuringSchedulingIgnoredDuringExecution", nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution, serializeNodeSelector);
        writer.writeAdditionalData(nodeAffinity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeCondition(writer: SerializationWriter, nodeCondition: Partial<NodeCondition> | undefined | null = {}) : void {
    if (nodeCondition) {
        writer.writeDateValue("lastHeartbeatTime", nodeCondition.lastHeartbeatTime);
        writer.writeDateValue("lastTransitionTime", nodeCondition.lastTransitionTime);
        writer.writeStringValue("message", nodeCondition.message);
        writer.writeStringValue("reason", nodeCondition.reason);
        writer.writeStringValue("status", nodeCondition.status);
        writer.writeStringValue("type", nodeCondition.type);
        writer.writeAdditionalData(nodeCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeConfigSource(writer: SerializationWriter, nodeConfigSource: Partial<NodeConfigSource> | undefined | null = {}) : void {
    if (nodeConfigSource) {
        writer.writeObjectValue<ConfigMapNodeConfigSource>("configMap", nodeConfigSource.configMap, serializeConfigMapNodeConfigSource);
        writer.writeAdditionalData(nodeConfigSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeConfigStatus(writer: SerializationWriter, nodeConfigStatus: Partial<NodeConfigStatus> | undefined | null = {}) : void {
    if (nodeConfigStatus) {
        writer.writeObjectValue<NodeConfigSource>("active", nodeConfigStatus.active, serializeNodeConfigSource);
        writer.writeObjectValue<NodeConfigSource>("assigned", nodeConfigStatus.assigned, serializeNodeConfigSource);
        writer.writeStringValue("error", nodeConfigStatus.errorEscaped);
        writer.writeObjectValue<NodeConfigSource>("lastKnownGood", nodeConfigStatus.lastKnownGood, serializeNodeConfigSource);
        writer.writeAdditionalData(nodeConfigStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeDaemonEndpoints(writer: SerializationWriter, nodeDaemonEndpoints: Partial<NodeDaemonEndpoints> | undefined | null = {}) : void {
    if (nodeDaemonEndpoints) {
        writer.writeObjectValue<DaemonEndpoint>("kubeletEndpoint", nodeDaemonEndpoints.kubeletEndpoint, serializeDaemonEndpoint);
        writer.writeAdditionalData(nodeDaemonEndpoints.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeFeatures(writer: SerializationWriter, nodeFeatures: Partial<NodeFeatures> | undefined | null = {}) : void {
    if (nodeFeatures) {
        writer.writeBooleanValue("supplementalGroupsPolicy", nodeFeatures.supplementalGroupsPolicy);
        writer.writeAdditionalData(nodeFeatures.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeList(writer: SerializationWriter, nodeList: Partial<NodeList> | undefined | null = {}) : void {
    if (nodeList) {
        writer.writeStringValue("apiVersion", nodeList.apiVersion);
        writer.writeCollectionOfObjectValues<Node>("items", nodeList.items, serializeNode);
        writer.writeStringValue("kind", nodeList.kind);
        writer.writeObjectValue<ListMeta>("metadata", nodeList.metadata, serializeListMeta);
        writer.writeAdditionalData(nodeList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeRuntimeHandler(writer: SerializationWriter, nodeRuntimeHandler: Partial<NodeRuntimeHandler> | undefined | null = {}) : void {
    if (nodeRuntimeHandler) {
        writer.writeObjectValue<NodeRuntimeHandlerFeatures>("features", nodeRuntimeHandler.features, serializeNodeRuntimeHandlerFeatures);
        writer.writeStringValue("name", nodeRuntimeHandler.name);
        writer.writeAdditionalData(nodeRuntimeHandler.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeRuntimeHandlerFeatures(writer: SerializationWriter, nodeRuntimeHandlerFeatures: Partial<NodeRuntimeHandlerFeatures> | undefined | null = {}) : void {
    if (nodeRuntimeHandlerFeatures) {
        writer.writeBooleanValue("recursiveReadOnlyMounts", nodeRuntimeHandlerFeatures.recursiveReadOnlyMounts);
        writer.writeBooleanValue("userNamespaces", nodeRuntimeHandlerFeatures.userNamespaces);
        writer.writeAdditionalData(nodeRuntimeHandlerFeatures.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeSelector(writer: SerializationWriter, nodeSelector: Partial<NodeSelector> | undefined | null = {}) : void {
    if (nodeSelector) {
        writer.writeCollectionOfObjectValues<NodeSelectorTerm>("nodeSelectorTerms", nodeSelector.nodeSelectorTerms, serializeNodeSelectorTerm);
        writer.writeAdditionalData(nodeSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeSelectorRequirement(writer: SerializationWriter, nodeSelectorRequirement: Partial<NodeSelectorRequirement> | undefined | null = {}) : void {
    if (nodeSelectorRequirement) {
        writer.writeStringValue("key", nodeSelectorRequirement.key);
        writer.writeStringValue("operator", nodeSelectorRequirement.operator);
        writer.writeCollectionOfPrimitiveValues<string>("values", nodeSelectorRequirement.values);
        writer.writeAdditionalData(nodeSelectorRequirement.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeSelectorTerm(writer: SerializationWriter, nodeSelectorTerm: Partial<NodeSelectorTerm> | undefined | null = {}) : void {
    if (nodeSelectorTerm) {
        writer.writeCollectionOfObjectValues<NodeSelectorRequirement>("matchExpressions", nodeSelectorTerm.matchExpressions, serializeNodeSelectorRequirement);
        writer.writeCollectionOfObjectValues<NodeSelectorRequirement>("matchFields", nodeSelectorTerm.matchFields, serializeNodeSelectorRequirement);
        writer.writeAdditionalData(nodeSelectorTerm.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeSpec(writer: SerializationWriter, nodeSpec: Partial<NodeSpec> | undefined | null = {}) : void {
    if (nodeSpec) {
        writer.writeObjectValue<NodeConfigSource>("configSource", nodeSpec.configSource, serializeNodeConfigSource);
        writer.writeStringValue("externalID", nodeSpec.externalID);
        writer.writeStringValue("podCIDR", nodeSpec.podCIDR);
        writer.writeCollectionOfPrimitiveValues<string>("podCIDRs", nodeSpec.podCIDRs);
        writer.writeStringValue("providerID", nodeSpec.providerID);
        writer.writeCollectionOfObjectValues<Taint>("taints", nodeSpec.taints, serializeTaint);
        writer.writeBooleanValue("unschedulable", nodeSpec.unschedulable);
        writer.writeAdditionalData(nodeSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeStatus(writer: SerializationWriter, nodeStatus: Partial<NodeStatus> | undefined | null = {}) : void {
    if (nodeStatus) {
        writer.writeCollectionOfObjectValues<NodeAddress>("addresses", nodeStatus.addresses, serializeNodeAddress);
        writer.writeObjectValue<NodeStatus_allocatable>("allocatable", nodeStatus.allocatable, serializeNodeStatus_allocatable);
        writer.writeObjectValue<NodeStatus_capacity>("capacity", nodeStatus.capacity, serializeNodeStatus_capacity);
        writer.writeCollectionOfObjectValues<NodeCondition>("conditions", nodeStatus.conditions, serializeNodeCondition);
        writer.writeObjectValue<NodeConfigStatus>("config", nodeStatus.config, serializeNodeConfigStatus);
        writer.writeObjectValue<NodeDaemonEndpoints>("daemonEndpoints", nodeStatus.daemonEndpoints, serializeNodeDaemonEndpoints);
        writer.writeObjectValue<NodeFeatures>("features", nodeStatus.features, serializeNodeFeatures);
        writer.writeCollectionOfObjectValues<ContainerImage>("images", nodeStatus.images, serializeContainerImage);
        writer.writeObjectValue<NodeSystemInfo>("nodeInfo", nodeStatus.nodeInfo, serializeNodeSystemInfo);
        writer.writeStringValue("phase", nodeStatus.phase);
        writer.writeCollectionOfObjectValues<NodeRuntimeHandler>("runtimeHandlers", nodeStatus.runtimeHandlers, serializeNodeRuntimeHandler);
        writer.writeCollectionOfObjectValues<AttachedVolume>("volumesAttached", nodeStatus.volumesAttached, serializeAttachedVolume);
        writer.writeCollectionOfPrimitiveValues<string>("volumesInUse", nodeStatus.volumesInUse);
        writer.writeAdditionalData(nodeStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeStatus_allocatable(writer: SerializationWriter, nodeStatus_allocatable: Partial<NodeStatus_allocatable> | undefined | null = {}) : void {
    if (nodeStatus_allocatable) {
        writer.writeAdditionalData(nodeStatus_allocatable.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeStatus_capacity(writer: SerializationWriter, nodeStatus_capacity: Partial<NodeStatus_capacity> | undefined | null = {}) : void {
    if (nodeStatus_capacity) {
        writer.writeAdditionalData(nodeStatus_capacity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNodeSystemInfo(writer: SerializationWriter, nodeSystemInfo: Partial<NodeSystemInfo> | undefined | null = {}) : void {
    if (nodeSystemInfo) {
        writer.writeStringValue("architecture", nodeSystemInfo.architecture);
        writer.writeStringValue("bootID", nodeSystemInfo.bootID);
        writer.writeStringValue("containerRuntimeVersion", nodeSystemInfo.containerRuntimeVersion);
        writer.writeStringValue("kernelVersion", nodeSystemInfo.kernelVersion);
        writer.writeStringValue("kubeletVersion", nodeSystemInfo.kubeletVersion);
        writer.writeStringValue("kubeProxyVersion", nodeSystemInfo.kubeProxyVersion);
        writer.writeStringValue("machineID", nodeSystemInfo.machineID);
        writer.writeStringValue("operatingSystem", nodeSystemInfo.operatingSystem);
        writer.writeStringValue("osImage", nodeSystemInfo.osImage);
        writer.writeStringValue("systemUUID", nodeSystemInfo.systemUUID);
        writer.writeAdditionalData(nodeSystemInfo.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectFieldSelector(writer: SerializationWriter, objectFieldSelector: Partial<ObjectFieldSelector> | undefined | null = {}) : void {
    if (objectFieldSelector) {
        writer.writeStringValue("apiVersion", objectFieldSelector.apiVersion);
        writer.writeStringValue("fieldPath", objectFieldSelector.fieldPath);
        writer.writeAdditionalData(objectFieldSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectReference(writer: SerializationWriter, objectReference: Partial<ObjectReference> | undefined | null = {}) : void {
    if (objectReference) {
        writer.writeStringValue("apiVersion", objectReference.apiVersion);
        writer.writeStringValue("fieldPath", objectReference.fieldPath);
        writer.writeStringValue("kind", objectReference.kind);
        writer.writeStringValue("name", objectReference.name);
        writer.writeStringValue("namespace", objectReference.namespace);
        writer.writeStringValue("resourceVersion", objectReference.resourceVersion);
        writer.writeStringValue("uid", objectReference.uid);
        writer.writeAdditionalData(objectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolume(writer: SerializationWriter, persistentVolume: Partial<PersistentVolume> | undefined | null = {}) : void {
    if (persistentVolume) {
        writer.writeStringValue("apiVersion", persistentVolume.apiVersion);
        writer.writeStringValue("kind", persistentVolume.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", persistentVolume.metadata, serializeObjectMeta);
        writer.writeObjectValue<PersistentVolumeSpec>("spec", persistentVolume.spec, serializePersistentVolumeSpec);
        writer.writeObjectValue<PersistentVolumeStatus>("status", persistentVolume.status, serializePersistentVolumeStatus);
        writer.writeAdditionalData(persistentVolume.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaim(writer: SerializationWriter, persistentVolumeClaim: Partial<PersistentVolumeClaim> | undefined | null = {}) : void {
    if (persistentVolumeClaim) {
        writer.writeStringValue("apiVersion", persistentVolumeClaim.apiVersion);
        writer.writeStringValue("kind", persistentVolumeClaim.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", persistentVolumeClaim.metadata, serializeObjectMeta);
        writer.writeObjectValue<PersistentVolumeClaimSpec>("spec", persistentVolumeClaim.spec, serializePersistentVolumeClaimSpec);
        writer.writeObjectValue<PersistentVolumeClaimStatus>("status", persistentVolumeClaim.status, serializePersistentVolumeClaimStatus);
        writer.writeAdditionalData(persistentVolumeClaim.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimCondition(writer: SerializationWriter, persistentVolumeClaimCondition: Partial<PersistentVolumeClaimCondition> | undefined | null = {}) : void {
    if (persistentVolumeClaimCondition) {
        writer.writeDateValue("lastProbeTime", persistentVolumeClaimCondition.lastProbeTime);
        writer.writeDateValue("lastTransitionTime", persistentVolumeClaimCondition.lastTransitionTime);
        writer.writeStringValue("message", persistentVolumeClaimCondition.message);
        writer.writeStringValue("reason", persistentVolumeClaimCondition.reason);
        writer.writeStringValue("status", persistentVolumeClaimCondition.status);
        writer.writeStringValue("type", persistentVolumeClaimCondition.type);
        writer.writeAdditionalData(persistentVolumeClaimCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimList(writer: SerializationWriter, persistentVolumeClaimList: Partial<PersistentVolumeClaimList> | undefined | null = {}) : void {
    if (persistentVolumeClaimList) {
        writer.writeStringValue("apiVersion", persistentVolumeClaimList.apiVersion);
        writer.writeCollectionOfObjectValues<PersistentVolumeClaim>("items", persistentVolumeClaimList.items, serializePersistentVolumeClaim);
        writer.writeStringValue("kind", persistentVolumeClaimList.kind);
        writer.writeObjectValue<ListMeta>("metadata", persistentVolumeClaimList.metadata, serializeListMeta);
        writer.writeAdditionalData(persistentVolumeClaimList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimSpec(writer: SerializationWriter, persistentVolumeClaimSpec: Partial<PersistentVolumeClaimSpec> | undefined | null = {}) : void {
    if (persistentVolumeClaimSpec) {
        writer.writeCollectionOfPrimitiveValues<string>("accessModes", persistentVolumeClaimSpec.accessModes);
        writer.writeObjectValue<TypedLocalObjectReference>("dataSource", persistentVolumeClaimSpec.dataSource, serializeTypedLocalObjectReference);
        writer.writeObjectValue<TypedObjectReference>("dataSourceRef", persistentVolumeClaimSpec.dataSourceRef, serializeTypedObjectReference);
        writer.writeObjectValue<VolumeResourceRequirements>("resources", persistentVolumeClaimSpec.resources, serializeVolumeResourceRequirements);
        writer.writeObjectValue<LabelSelector>("selector", persistentVolumeClaimSpec.selector, serializeLabelSelector);
        writer.writeStringValue("storageClassName", persistentVolumeClaimSpec.storageClassName);
        writer.writeStringValue("volumeAttributesClassName", persistentVolumeClaimSpec.volumeAttributesClassName);
        writer.writeStringValue("volumeMode", persistentVolumeClaimSpec.volumeMode);
        writer.writeStringValue("volumeName", persistentVolumeClaimSpec.volumeName);
        writer.writeAdditionalData(persistentVolumeClaimSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimStatus(writer: SerializationWriter, persistentVolumeClaimStatus: Partial<PersistentVolumeClaimStatus> | undefined | null = {}) : void {
    if (persistentVolumeClaimStatus) {
        writer.writeCollectionOfPrimitiveValues<string>("accessModes", persistentVolumeClaimStatus.accessModes);
        writer.writeObjectValue<PersistentVolumeClaimStatus_allocatedResources>("allocatedResources", persistentVolumeClaimStatus.allocatedResources, serializePersistentVolumeClaimStatus_allocatedResources);
        writer.writeObjectValue<PersistentVolumeClaimStatus_allocatedResourceStatuses>("allocatedResourceStatuses", persistentVolumeClaimStatus.allocatedResourceStatuses, serializePersistentVolumeClaimStatus_allocatedResourceStatuses);
        writer.writeObjectValue<PersistentVolumeClaimStatus_capacity>("capacity", persistentVolumeClaimStatus.capacity, serializePersistentVolumeClaimStatus_capacity);
        writer.writeCollectionOfObjectValues<PersistentVolumeClaimCondition>("conditions", persistentVolumeClaimStatus.conditions, serializePersistentVolumeClaimCondition);
        writer.writeStringValue("currentVolumeAttributesClassName", persistentVolumeClaimStatus.currentVolumeAttributesClassName);
        writer.writeObjectValue<ModifyVolumeStatus>("modifyVolumeStatus", persistentVolumeClaimStatus.modifyVolumeStatus, serializeModifyVolumeStatus);
        writer.writeStringValue("phase", persistentVolumeClaimStatus.phase);
        writer.writeAdditionalData(persistentVolumeClaimStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimStatus_allocatedResources(writer: SerializationWriter, persistentVolumeClaimStatus_allocatedResources: Partial<PersistentVolumeClaimStatus_allocatedResources> | undefined | null = {}) : void {
    if (persistentVolumeClaimStatus_allocatedResources) {
        writer.writeAdditionalData(persistentVolumeClaimStatus_allocatedResources.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimStatus_allocatedResourceStatuses(writer: SerializationWriter, persistentVolumeClaimStatus_allocatedResourceStatuses: Partial<PersistentVolumeClaimStatus_allocatedResourceStatuses> | undefined | null = {}) : void {
    if (persistentVolumeClaimStatus_allocatedResourceStatuses) {
        writer.writeAdditionalData(persistentVolumeClaimStatus_allocatedResourceStatuses.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimStatus_capacity(writer: SerializationWriter, persistentVolumeClaimStatus_capacity: Partial<PersistentVolumeClaimStatus_capacity> | undefined | null = {}) : void {
    if (persistentVolumeClaimStatus_capacity) {
        writer.writeAdditionalData(persistentVolumeClaimStatus_capacity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimTemplate(writer: SerializationWriter, persistentVolumeClaimTemplate: Partial<PersistentVolumeClaimTemplate> | undefined | null = {}) : void {
    if (persistentVolumeClaimTemplate) {
        writer.writeObjectValue<ObjectMeta>("metadata", persistentVolumeClaimTemplate.metadata, serializeObjectMeta);
        writer.writeObjectValue<PersistentVolumeClaimSpec>("spec", persistentVolumeClaimTemplate.spec, serializePersistentVolumeClaimSpec);
        writer.writeAdditionalData(persistentVolumeClaimTemplate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeClaimVolumeSource(writer: SerializationWriter, persistentVolumeClaimVolumeSource: Partial<PersistentVolumeClaimVolumeSource> | undefined | null = {}) : void {
    if (persistentVolumeClaimVolumeSource) {
        writer.writeStringValue("claimName", persistentVolumeClaimVolumeSource.claimName);
        writer.writeBooleanValue("readOnly", persistentVolumeClaimVolumeSource.readOnly);
        writer.writeAdditionalData(persistentVolumeClaimVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeList(writer: SerializationWriter, persistentVolumeList: Partial<PersistentVolumeList> | undefined | null = {}) : void {
    if (persistentVolumeList) {
        writer.writeStringValue("apiVersion", persistentVolumeList.apiVersion);
        writer.writeCollectionOfObjectValues<PersistentVolume>("items", persistentVolumeList.items, serializePersistentVolume);
        writer.writeStringValue("kind", persistentVolumeList.kind);
        writer.writeObjectValue<ListMeta>("metadata", persistentVolumeList.metadata, serializeListMeta);
        writer.writeAdditionalData(persistentVolumeList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeSpec(writer: SerializationWriter, persistentVolumeSpec: Partial<PersistentVolumeSpec> | undefined | null = {}) : void {
    if (persistentVolumeSpec) {
        writer.writeCollectionOfPrimitiveValues<string>("accessModes", persistentVolumeSpec.accessModes);
        writer.writeObjectValue<AWSElasticBlockStoreVolumeSource>("awsElasticBlockStore", persistentVolumeSpec.awsElasticBlockStore, serializeAWSElasticBlockStoreVolumeSource);
        writer.writeObjectValue<AzureDiskVolumeSource>("azureDisk", persistentVolumeSpec.azureDisk, serializeAzureDiskVolumeSource);
        writer.writeObjectValue<AzureFilePersistentVolumeSource>("azureFile", persistentVolumeSpec.azureFile, serializeAzureFilePersistentVolumeSource);
        writer.writeObjectValue<PersistentVolumeSpec_capacity>("capacity", persistentVolumeSpec.capacity, serializePersistentVolumeSpec_capacity);
        writer.writeObjectValue<CephFSPersistentVolumeSource>("cephfs", persistentVolumeSpec.cephfs, serializeCephFSPersistentVolumeSource);
        writer.writeObjectValue<CinderPersistentVolumeSource>("cinder", persistentVolumeSpec.cinder, serializeCinderPersistentVolumeSource);
        writer.writeObjectValue<ObjectReference>("claimRef", persistentVolumeSpec.claimRef, serializeObjectReference);
        writer.writeObjectValue<CSIPersistentVolumeSource>("csi", persistentVolumeSpec.csi, serializeCSIPersistentVolumeSource);
        writer.writeObjectValue<FCVolumeSource>("fc", persistentVolumeSpec.fc, serializeFCVolumeSource);
        writer.writeObjectValue<FlexPersistentVolumeSource>("flexVolume", persistentVolumeSpec.flexVolume, serializeFlexPersistentVolumeSource);
        writer.writeObjectValue<FlockerVolumeSource>("flocker", persistentVolumeSpec.flocker, serializeFlockerVolumeSource);
        writer.writeObjectValue<GCEPersistentDiskVolumeSource>("gcePersistentDisk", persistentVolumeSpec.gcePersistentDisk, serializeGCEPersistentDiskVolumeSource);
        writer.writeObjectValue<GlusterfsPersistentVolumeSource>("glusterfs", persistentVolumeSpec.glusterfs, serializeGlusterfsPersistentVolumeSource);
        writer.writeObjectValue<HostPathVolumeSource>("hostPath", persistentVolumeSpec.hostPath, serializeHostPathVolumeSource);
        writer.writeObjectValue<ISCSIPersistentVolumeSource>("iscsi", persistentVolumeSpec.iscsi, serializeISCSIPersistentVolumeSource);
        writer.writeObjectValue<LocalVolumeSource>("local", persistentVolumeSpec.local, serializeLocalVolumeSource);
        writer.writeCollectionOfPrimitiveValues<string>("mountOptions", persistentVolumeSpec.mountOptions);
        writer.writeObjectValue<NFSVolumeSource>("nfs", persistentVolumeSpec.nfs, serializeNFSVolumeSource);
        writer.writeObjectValue<VolumeNodeAffinity>("nodeAffinity", persistentVolumeSpec.nodeAffinity, serializeVolumeNodeAffinity);
        writer.writeStringValue("persistentVolumeReclaimPolicy", persistentVolumeSpec.persistentVolumeReclaimPolicy);
        writer.writeObjectValue<PhotonPersistentDiskVolumeSource>("photonPersistentDisk", persistentVolumeSpec.photonPersistentDisk, serializePhotonPersistentDiskVolumeSource);
        writer.writeObjectValue<PortworxVolumeSource>("portworxVolume", persistentVolumeSpec.portworxVolume, serializePortworxVolumeSource);
        writer.writeObjectValue<QuobyteVolumeSource>("quobyte", persistentVolumeSpec.quobyte, serializeQuobyteVolumeSource);
        writer.writeObjectValue<RBDPersistentVolumeSource>("rbd", persistentVolumeSpec.rbd, serializeRBDPersistentVolumeSource);
        writer.writeObjectValue<ScaleIOPersistentVolumeSource>("scaleIO", persistentVolumeSpec.scaleIO, serializeScaleIOPersistentVolumeSource);
        writer.writeStringValue("storageClassName", persistentVolumeSpec.storageClassName);
        writer.writeObjectValue<StorageOSPersistentVolumeSource>("storageos", persistentVolumeSpec.storageos, serializeStorageOSPersistentVolumeSource);
        writer.writeStringValue("volumeAttributesClassName", persistentVolumeSpec.volumeAttributesClassName);
        writer.writeStringValue("volumeMode", persistentVolumeSpec.volumeMode);
        writer.writeObjectValue<VsphereVirtualDiskVolumeSource>("vsphereVolume", persistentVolumeSpec.vsphereVolume, serializeVsphereVirtualDiskVolumeSource);
        writer.writeAdditionalData(persistentVolumeSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeSpec_capacity(writer: SerializationWriter, persistentVolumeSpec_capacity: Partial<PersistentVolumeSpec_capacity> | undefined | null = {}) : void {
    if (persistentVolumeSpec_capacity) {
        writer.writeAdditionalData(persistentVolumeSpec_capacity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePersistentVolumeStatus(writer: SerializationWriter, persistentVolumeStatus: Partial<PersistentVolumeStatus> | undefined | null = {}) : void {
    if (persistentVolumeStatus) {
        writer.writeDateValue("lastPhaseTransitionTime", persistentVolumeStatus.lastPhaseTransitionTime);
        writer.writeStringValue("message", persistentVolumeStatus.message);
        writer.writeStringValue("phase", persistentVolumeStatus.phase);
        writer.writeStringValue("reason", persistentVolumeStatus.reason);
        writer.writeAdditionalData(persistentVolumeStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePhotonPersistentDiskVolumeSource(writer: SerializationWriter, photonPersistentDiskVolumeSource: Partial<PhotonPersistentDiskVolumeSource> | undefined | null = {}) : void {
    if (photonPersistentDiskVolumeSource) {
        writer.writeStringValue("fsType", photonPersistentDiskVolumeSource.fsType);
        writer.writeStringValue("pdID", photonPersistentDiskVolumeSource.pdID);
        writer.writeAdditionalData(photonPersistentDiskVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePod(writer: SerializationWriter, pod: Partial<Pod> | undefined | null = {}) : void {
    if (pod) {
        writer.writeStringValue("apiVersion", pod.apiVersion);
        writer.writeStringValue("kind", pod.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", pod.metadata, serializeObjectMeta);
        writer.writeObjectValue<PodSpec>("spec", pod.spec, serializePodSpec);
        writer.writeObjectValue<PodStatus>("status", pod.status, serializePodStatus);
        writer.writeAdditionalData(pod.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodAffinity(writer: SerializationWriter, podAffinity: Partial<PodAffinity> | undefined | null = {}) : void {
    if (podAffinity) {
        writer.writeCollectionOfObjectValues<WeightedPodAffinityTerm>("preferredDuringSchedulingIgnoredDuringExecution", podAffinity.preferredDuringSchedulingIgnoredDuringExecution, serializeWeightedPodAffinityTerm);
        writer.writeCollectionOfObjectValues<PodAffinityTerm>("requiredDuringSchedulingIgnoredDuringExecution", podAffinity.requiredDuringSchedulingIgnoredDuringExecution, serializePodAffinityTerm);
        writer.writeAdditionalData(podAffinity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodAffinityTerm(writer: SerializationWriter, podAffinityTerm: Partial<PodAffinityTerm> | undefined | null = {}) : void {
    if (podAffinityTerm) {
        writer.writeObjectValue<LabelSelector>("labelSelector", podAffinityTerm.labelSelector, serializeLabelSelector);
        writer.writeCollectionOfPrimitiveValues<string>("matchLabelKeys", podAffinityTerm.matchLabelKeys);
        writer.writeCollectionOfPrimitiveValues<string>("mismatchLabelKeys", podAffinityTerm.mismatchLabelKeys);
        writer.writeCollectionOfPrimitiveValues<string>("namespaces", podAffinityTerm.namespaces);
        writer.writeObjectValue<LabelSelector>("namespaceSelector", podAffinityTerm.namespaceSelector, serializeLabelSelector);
        writer.writeStringValue("topologyKey", podAffinityTerm.topologyKey);
        writer.writeAdditionalData(podAffinityTerm.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodAntiAffinity(writer: SerializationWriter, podAntiAffinity: Partial<PodAntiAffinity> | undefined | null = {}) : void {
    if (podAntiAffinity) {
        writer.writeCollectionOfObjectValues<WeightedPodAffinityTerm>("preferredDuringSchedulingIgnoredDuringExecution", podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution, serializeWeightedPodAffinityTerm);
        writer.writeCollectionOfObjectValues<PodAffinityTerm>("requiredDuringSchedulingIgnoredDuringExecution", podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution, serializePodAffinityTerm);
        writer.writeAdditionalData(podAntiAffinity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodCondition(writer: SerializationWriter, podCondition: Partial<PodCondition> | undefined | null = {}) : void {
    if (podCondition) {
        writer.writeDateValue("lastProbeTime", podCondition.lastProbeTime);
        writer.writeDateValue("lastTransitionTime", podCondition.lastTransitionTime);
        writer.writeStringValue("message", podCondition.message);
        writer.writeStringValue("reason", podCondition.reason);
        writer.writeStringValue("status", podCondition.status);
        writer.writeStringValue("type", podCondition.type);
        writer.writeAdditionalData(podCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDNSConfig(writer: SerializationWriter, podDNSConfig: Partial<PodDNSConfig> | undefined | null = {}) : void {
    if (podDNSConfig) {
        writer.writeCollectionOfPrimitiveValues<string>("nameservers", podDNSConfig.nameservers);
        writer.writeCollectionOfObjectValues<PodDNSConfigOption>("options", podDNSConfig.options, serializePodDNSConfigOption);
        writer.writeCollectionOfPrimitiveValues<string>("searches", podDNSConfig.searches);
        writer.writeAdditionalData(podDNSConfig.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDNSConfigOption(writer: SerializationWriter, podDNSConfigOption: Partial<PodDNSConfigOption> | undefined | null = {}) : void {
    if (podDNSConfigOption) {
        writer.writeStringValue("name", podDNSConfigOption.name);
        writer.writeStringValue("value", podDNSConfigOption.value);
        writer.writeAdditionalData(podDNSConfigOption.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodIP(writer: SerializationWriter, podIP: Partial<PodIP> | undefined | null = {}) : void {
    if (podIP) {
        writer.writeStringValue("ip", podIP.ip);
        writer.writeAdditionalData(podIP.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodList(writer: SerializationWriter, podList: Partial<PodList> | undefined | null = {}) : void {
    if (podList) {
        writer.writeStringValue("apiVersion", podList.apiVersion);
        writer.writeCollectionOfObjectValues<Pod>("items", podList.items, serializePod);
        writer.writeStringValue("kind", podList.kind);
        writer.writeObjectValue<ListMeta>("metadata", podList.metadata, serializeListMeta);
        writer.writeAdditionalData(podList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodOS(writer: SerializationWriter, podOS: Partial<PodOS> | undefined | null = {}) : void {
    if (podOS) {
        writer.writeStringValue("name", podOS.name);
        writer.writeAdditionalData(podOS.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodReadinessGate(writer: SerializationWriter, podReadinessGate: Partial<PodReadinessGate> | undefined | null = {}) : void {
    if (podReadinessGate) {
        writer.writeStringValue("conditionType", podReadinessGate.conditionType);
        writer.writeAdditionalData(podReadinessGate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodResourceClaim(writer: SerializationWriter, podResourceClaim: Partial<PodResourceClaim> | undefined | null = {}) : void {
    if (podResourceClaim) {
        writer.writeStringValue("name", podResourceClaim.name);
        writer.writeStringValue("resourceClaimName", podResourceClaim.resourceClaimName);
        writer.writeStringValue("resourceClaimTemplateName", podResourceClaim.resourceClaimTemplateName);
        writer.writeAdditionalData(podResourceClaim.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodResourceClaimStatus(writer: SerializationWriter, podResourceClaimStatus: Partial<PodResourceClaimStatus> | undefined | null = {}) : void {
    if (podResourceClaimStatus) {
        writer.writeStringValue("name", podResourceClaimStatus.name);
        writer.writeStringValue("resourceClaimName", podResourceClaimStatus.resourceClaimName);
        writer.writeAdditionalData(podResourceClaimStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodSchedulingGate(writer: SerializationWriter, podSchedulingGate: Partial<PodSchedulingGate> | undefined | null = {}) : void {
    if (podSchedulingGate) {
        writer.writeStringValue("name", podSchedulingGate.name);
        writer.writeAdditionalData(podSchedulingGate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodSecurityContext(writer: SerializationWriter, podSecurityContext: Partial<PodSecurityContext> | undefined | null = {}) : void {
    if (podSecurityContext) {
        writer.writeObjectValue<AppArmorProfile>("appArmorProfile", podSecurityContext.appArmorProfile, serializeAppArmorProfile);
        writer.writeNumberValue("fsGroup", podSecurityContext.fsGroup);
        writer.writeStringValue("fsGroupChangePolicy", podSecurityContext.fsGroupChangePolicy);
        writer.writeNumberValue("runAsGroup", podSecurityContext.runAsGroup);
        writer.writeBooleanValue("runAsNonRoot", podSecurityContext.runAsNonRoot);
        writer.writeNumberValue("runAsUser", podSecurityContext.runAsUser);
        writer.writeObjectValue<SeccompProfile>("seccompProfile", podSecurityContext.seccompProfile, serializeSeccompProfile);
        writer.writeStringValue("seLinuxChangePolicy", podSecurityContext.seLinuxChangePolicy);
        writer.writeObjectValue<SELinuxOptions>("seLinuxOptions", podSecurityContext.seLinuxOptions, serializeSELinuxOptions);
        writer.writeCollectionOfPrimitiveValues<number>("supplementalGroups", podSecurityContext.supplementalGroups);
        writer.writeStringValue("supplementalGroupsPolicy", podSecurityContext.supplementalGroupsPolicy);
        writer.writeCollectionOfObjectValues<Sysctl>("sysctls", podSecurityContext.sysctls, serializeSysctl);
        writer.writeObjectValue<WindowsSecurityContextOptions>("windowsOptions", podSecurityContext.windowsOptions, serializeWindowsSecurityContextOptions);
        writer.writeAdditionalData(podSecurityContext.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodSpec(writer: SerializationWriter, podSpec: Partial<PodSpec> | undefined | null = {}) : void {
    if (podSpec) {
        writer.writeNumberValue("activeDeadlineSeconds", podSpec.activeDeadlineSeconds);
        writer.writeObjectValue<Affinity>("affinity", podSpec.affinity, serializeAffinity);
        writer.writeBooleanValue("automountServiceAccountToken", podSpec.automountServiceAccountToken);
        writer.writeCollectionOfObjectValues<Container>("containers", podSpec.containers, serializeContainer);
        writer.writeObjectValue<PodDNSConfig>("dnsConfig", podSpec.dnsConfig, serializePodDNSConfig);
        writer.writeStringValue("dnsPolicy", podSpec.dnsPolicy);
        writer.writeBooleanValue("enableServiceLinks", podSpec.enableServiceLinks);
        writer.writeCollectionOfObjectValues<EphemeralContainer>("ephemeralContainers", podSpec.ephemeralContainers, serializeEphemeralContainer);
        writer.writeCollectionOfObjectValues<HostAlias>("hostAliases", podSpec.hostAliases, serializeHostAlias);
        writer.writeBooleanValue("hostIPC", podSpec.hostIPC);
        writer.writeStringValue("hostname", podSpec.hostname);
        writer.writeBooleanValue("hostNetwork", podSpec.hostNetwork);
        writer.writeBooleanValue("hostPID", podSpec.hostPID);
        writer.writeBooleanValue("hostUsers", podSpec.hostUsers);
        writer.writeCollectionOfObjectValues<LocalObjectReference>("imagePullSecrets", podSpec.imagePullSecrets, serializeLocalObjectReference);
        writer.writeCollectionOfObjectValues<Container>("initContainers", podSpec.initContainers, serializeContainer);
        writer.writeStringValue("nodeName", podSpec.nodeName);
        writer.writeObjectValue<PodSpec_nodeSelector>("nodeSelector", podSpec.nodeSelector, serializePodSpec_nodeSelector);
        writer.writeObjectValue<PodOS>("os", podSpec.os, serializePodOS);
        writer.writeObjectValue<PodSpec_overhead>("overhead", podSpec.overhead, serializePodSpec_overhead);
        writer.writeStringValue("preemptionPolicy", podSpec.preemptionPolicy);
        writer.writeNumberValue("priority", podSpec.priority);
        writer.writeStringValue("priorityClassName", podSpec.priorityClassName);
        writer.writeCollectionOfObjectValues<PodReadinessGate>("readinessGates", podSpec.readinessGates, serializePodReadinessGate);
        writer.writeCollectionOfObjectValues<PodResourceClaim>("resourceClaims", podSpec.resourceClaims, serializePodResourceClaim);
        writer.writeObjectValue<ResourceRequirements>("resources", podSpec.resources, serializeResourceRequirements);
        writer.writeStringValue("restartPolicy", podSpec.restartPolicy);
        writer.writeStringValue("runtimeClassName", podSpec.runtimeClassName);
        writer.writeStringValue("schedulerName", podSpec.schedulerName);
        writer.writeCollectionOfObjectValues<PodSchedulingGate>("schedulingGates", podSpec.schedulingGates, serializePodSchedulingGate);
        writer.writeObjectValue<PodSecurityContext>("securityContext", podSpec.securityContext, serializePodSecurityContext);
        writer.writeStringValue("serviceAccount", podSpec.serviceAccount);
        writer.writeStringValue("serviceAccountName", podSpec.serviceAccountName);
        writer.writeBooleanValue("setHostnameAsFQDN", podSpec.setHostnameAsFQDN);
        writer.writeBooleanValue("shareProcessNamespace", podSpec.shareProcessNamespace);
        writer.writeStringValue("subdomain", podSpec.subdomain);
        writer.writeNumberValue("terminationGracePeriodSeconds", podSpec.terminationGracePeriodSeconds);
        writer.writeCollectionOfObjectValues<Toleration>("tolerations", podSpec.tolerations, serializeToleration);
        writer.writeCollectionOfObjectValues<TopologySpreadConstraint>("topologySpreadConstraints", podSpec.topologySpreadConstraints, serializeTopologySpreadConstraint);
        writer.writeCollectionOfObjectValues<Volume>("volumes", podSpec.volumes, serializeVolume);
        writer.writeAdditionalData(podSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodSpec_nodeSelector(writer: SerializationWriter, podSpec_nodeSelector: Partial<PodSpec_nodeSelector> | undefined | null = {}) : void {
    if (podSpec_nodeSelector) {
        writer.writeAdditionalData(podSpec_nodeSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodSpec_overhead(writer: SerializationWriter, podSpec_overhead: Partial<PodSpec_overhead> | undefined | null = {}) : void {
    if (podSpec_overhead) {
        writer.writeAdditionalData(podSpec_overhead.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodStatus(writer: SerializationWriter, podStatus: Partial<PodStatus> | undefined | null = {}) : void {
    if (podStatus) {
        writer.writeCollectionOfObjectValues<PodCondition>("conditions", podStatus.conditions, serializePodCondition);
        writer.writeCollectionOfObjectValues<ContainerStatus>("containerStatuses", podStatus.containerStatuses, serializeContainerStatus);
        writer.writeCollectionOfObjectValues<ContainerStatus>("ephemeralContainerStatuses", podStatus.ephemeralContainerStatuses, serializeContainerStatus);
        writer.writeStringValue("hostIP", podStatus.hostIP);
        writer.writeCollectionOfObjectValues<HostIP>("hostIPs", podStatus.hostIPs, serializeHostIP);
        writer.writeCollectionOfObjectValues<ContainerStatus>("initContainerStatuses", podStatus.initContainerStatuses, serializeContainerStatus);
        writer.writeStringValue("message", podStatus.message);
        writer.writeStringValue("nominatedNodeName", podStatus.nominatedNodeName);
        writer.writeStringValue("phase", podStatus.phase);
        writer.writeStringValue("podIP", podStatus.podIP);
        writer.writeCollectionOfObjectValues<PodIP>("podIPs", podStatus.podIPs, serializePodIP);
        writer.writeStringValue("qosClass", podStatus.qosClass);
        writer.writeStringValue("reason", podStatus.reason);
        writer.writeStringValue("resize", podStatus.resize);
        writer.writeCollectionOfObjectValues<PodResourceClaimStatus>("resourceClaimStatuses", podStatus.resourceClaimStatuses, serializePodResourceClaimStatus);
        writer.writeDateValue("startTime", podStatus.startTime);
        writer.writeAdditionalData(podStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodTemplate(writer: SerializationWriter, podTemplate: Partial<PodTemplate> | undefined | null = {}) : void {
    if (podTemplate) {
        writer.writeStringValue("apiVersion", podTemplate.apiVersion);
        writer.writeStringValue("kind", podTemplate.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", podTemplate.metadata, serializeObjectMeta);
        writer.writeObjectValue<PodTemplateSpec>("template", podTemplate.template, serializePodTemplateSpec);
        writer.writeAdditionalData(podTemplate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodTemplateList(writer: SerializationWriter, podTemplateList: Partial<PodTemplateList> | undefined | null = {}) : void {
    if (podTemplateList) {
        writer.writeStringValue("apiVersion", podTemplateList.apiVersion);
        writer.writeCollectionOfObjectValues<PodTemplate>("items", podTemplateList.items, serializePodTemplate);
        writer.writeStringValue("kind", podTemplateList.kind);
        writer.writeObjectValue<ListMeta>("metadata", podTemplateList.metadata, serializeListMeta);
        writer.writeAdditionalData(podTemplateList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodTemplateSpec(writer: SerializationWriter, podTemplateSpec: Partial<PodTemplateSpec> | undefined | null = {}) : void {
    if (podTemplateSpec) {
        writer.writeObjectValue<ObjectMeta>("metadata", podTemplateSpec.metadata, serializeObjectMeta);
        writer.writeObjectValue<PodSpec>("spec", podTemplateSpec.spec, serializePodSpec);
        writer.writeAdditionalData(podTemplateSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePortStatus(writer: SerializationWriter, portStatus: Partial<PortStatus> | undefined | null = {}) : void {
    if (portStatus) {
        writer.writeStringValue("error", portStatus.errorEscaped);
        writer.writeNumberValue("port", portStatus.port);
        writer.writeStringValue("protocol", portStatus.protocol);
        writer.writeAdditionalData(portStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePortworxVolumeSource(writer: SerializationWriter, portworxVolumeSource: Partial<PortworxVolumeSource> | undefined | null = {}) : void {
    if (portworxVolumeSource) {
        writer.writeStringValue("fsType", portworxVolumeSource.fsType);
        writer.writeBooleanValue("readOnly", portworxVolumeSource.readOnly);
        writer.writeStringValue("volumeID", portworxVolumeSource.volumeID);
        writer.writeAdditionalData(portworxVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreferredSchedulingTerm(writer: SerializationWriter, preferredSchedulingTerm: Partial<PreferredSchedulingTerm> | undefined | null = {}) : void {
    if (preferredSchedulingTerm) {
        writer.writeObjectValue<NodeSelectorTerm>("preference", preferredSchedulingTerm.preference, serializeNodeSelectorTerm);
        writer.writeNumberValue("weight", preferredSchedulingTerm.weight);
        writer.writeAdditionalData(preferredSchedulingTerm.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProbe(writer: SerializationWriter, probe: Partial<Probe> | undefined | null = {}) : void {
    if (probe) {
        writer.writeObjectValue<ExecAction>("exec", probe.exec, serializeExecAction);
        writer.writeNumberValue("failureThreshold", probe.failureThreshold);
        writer.writeObjectValue<GRPCAction>("grpc", probe.grpc, serializeGRPCAction);
        writer.writeObjectValue<HTTPGetAction>("httpGet", probe.httpGet, serializeHTTPGetAction);
        writer.writeNumberValue("initialDelaySeconds", probe.initialDelaySeconds);
        writer.writeNumberValue("periodSeconds", probe.periodSeconds);
        writer.writeNumberValue("successThreshold", probe.successThreshold);
        writer.writeObjectValue<TCPSocketAction>("tcpSocket", probe.tcpSocket, serializeTCPSocketAction);
        writer.writeNumberValue("terminationGracePeriodSeconds", probe.terminationGracePeriodSeconds);
        writer.writeNumberValue("timeoutSeconds", probe.timeoutSeconds);
        writer.writeAdditionalData(probe.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectedVolumeSource(writer: SerializationWriter, projectedVolumeSource: Partial<ProjectedVolumeSource> | undefined | null = {}) : void {
    if (projectedVolumeSource) {
        writer.writeNumberValue("defaultMode", projectedVolumeSource.defaultMode);
        writer.writeCollectionOfObjectValues<VolumeProjection>("sources", projectedVolumeSource.sources, serializeVolumeProjection);
        writer.writeAdditionalData(projectedVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQuobyteVolumeSource(writer: SerializationWriter, quobyteVolumeSource: Partial<QuobyteVolumeSource> | undefined | null = {}) : void {
    if (quobyteVolumeSource) {
        writer.writeStringValue("group", quobyteVolumeSource.group);
        writer.writeBooleanValue("readOnly", quobyteVolumeSource.readOnly);
        writer.writeStringValue("registry", quobyteVolumeSource.registry);
        writer.writeStringValue("tenant", quobyteVolumeSource.tenant);
        writer.writeStringValue("user", quobyteVolumeSource.user);
        writer.writeStringValue("volume", quobyteVolumeSource.volume);
        writer.writeAdditionalData(quobyteVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRBDPersistentVolumeSource(writer: SerializationWriter, rBDPersistentVolumeSource: Partial<RBDPersistentVolumeSource> | undefined | null = {}) : void {
    if (rBDPersistentVolumeSource) {
        writer.writeStringValue("fsType", rBDPersistentVolumeSource.fsType);
        writer.writeStringValue("image", rBDPersistentVolumeSource.image);
        writer.writeStringValue("keyring", rBDPersistentVolumeSource.keyring);
        writer.writeCollectionOfPrimitiveValues<string>("monitors", rBDPersistentVolumeSource.monitors);
        writer.writeStringValue("pool", rBDPersistentVolumeSource.pool);
        writer.writeBooleanValue("readOnly", rBDPersistentVolumeSource.readOnly);
        writer.writeObjectValue<SecretReference>("secretRef", rBDPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeStringValue("user", rBDPersistentVolumeSource.user);
        writer.writeAdditionalData(rBDPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRBDVolumeSource(writer: SerializationWriter, rBDVolumeSource: Partial<RBDVolumeSource> | undefined | null = {}) : void {
    if (rBDVolumeSource) {
        writer.writeStringValue("fsType", rBDVolumeSource.fsType);
        writer.writeStringValue("image", rBDVolumeSource.image);
        writer.writeStringValue("keyring", rBDVolumeSource.keyring);
        writer.writeCollectionOfPrimitiveValues<string>("monitors", rBDVolumeSource.monitors);
        writer.writeStringValue("pool", rBDVolumeSource.pool);
        writer.writeBooleanValue("readOnly", rBDVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", rBDVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeStringValue("user", rBDVolumeSource.user);
        writer.writeAdditionalData(rBDVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationController(writer: SerializationWriter, replicationController: Partial<ReplicationController> | undefined | null = {}) : void {
    if (replicationController) {
        writer.writeStringValue("apiVersion", replicationController.apiVersion);
        writer.writeStringValue("kind", replicationController.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", replicationController.metadata, serializeObjectMeta);
        writer.writeObjectValue<ReplicationControllerSpec>("spec", replicationController.spec, serializeReplicationControllerSpec);
        writer.writeObjectValue<ReplicationControllerStatus>("status", replicationController.status, serializeReplicationControllerStatus);
        writer.writeAdditionalData(replicationController.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationControllerCondition(writer: SerializationWriter, replicationControllerCondition: Partial<ReplicationControllerCondition> | undefined | null = {}) : void {
    if (replicationControllerCondition) {
        writer.writeDateValue("lastTransitionTime", replicationControllerCondition.lastTransitionTime);
        writer.writeStringValue("message", replicationControllerCondition.message);
        writer.writeStringValue("reason", replicationControllerCondition.reason);
        writer.writeStringValue("status", replicationControllerCondition.status);
        writer.writeStringValue("type", replicationControllerCondition.type);
        writer.writeAdditionalData(replicationControllerCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationControllerList(writer: SerializationWriter, replicationControllerList: Partial<ReplicationControllerList> | undefined | null = {}) : void {
    if (replicationControllerList) {
        writer.writeStringValue("apiVersion", replicationControllerList.apiVersion);
        writer.writeCollectionOfObjectValues<ReplicationController>("items", replicationControllerList.items, serializeReplicationController);
        writer.writeStringValue("kind", replicationControllerList.kind);
        writer.writeObjectValue<ListMeta>("metadata", replicationControllerList.metadata, serializeListMeta);
        writer.writeAdditionalData(replicationControllerList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationControllerSpec(writer: SerializationWriter, replicationControllerSpec: Partial<ReplicationControllerSpec> | undefined | null = {}) : void {
    if (replicationControllerSpec) {
        writer.writeNumberValue("minReadySeconds", replicationControllerSpec.minReadySeconds);
        writer.writeNumberValue("replicas", replicationControllerSpec.replicas);
        writer.writeObjectValue<ReplicationControllerSpec_selector>("selector", replicationControllerSpec.selector, serializeReplicationControllerSpec_selector);
        writer.writeObjectValue<PodTemplateSpec>("template", replicationControllerSpec.template, serializePodTemplateSpec);
        writer.writeAdditionalData(replicationControllerSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationControllerSpec_selector(writer: SerializationWriter, replicationControllerSpec_selector: Partial<ReplicationControllerSpec_selector> | undefined | null = {}) : void {
    if (replicationControllerSpec_selector) {
        writer.writeAdditionalData(replicationControllerSpec_selector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicationControllerStatus(writer: SerializationWriter, replicationControllerStatus: Partial<ReplicationControllerStatus> | undefined | null = {}) : void {
    if (replicationControllerStatus) {
        writer.writeNumberValue("availableReplicas", replicationControllerStatus.availableReplicas);
        writer.writeCollectionOfObjectValues<ReplicationControllerCondition>("conditions", replicationControllerStatus.conditions, serializeReplicationControllerCondition);
        writer.writeNumberValue("fullyLabeledReplicas", replicationControllerStatus.fullyLabeledReplicas);
        writer.writeNumberValue("observedGeneration", replicationControllerStatus.observedGeneration);
        writer.writeNumberValue("readyReplicas", replicationControllerStatus.readyReplicas);
        writer.writeNumberValue("replicas", replicationControllerStatus.replicas);
        writer.writeAdditionalData(replicationControllerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaim(writer: SerializationWriter, resourceClaim: Partial<ResourceClaim> | undefined | null = {}) : void {
    if (resourceClaim) {
        writer.writeStringValue("name", resourceClaim.name);
        writer.writeStringValue("request", resourceClaim.request);
        writer.writeAdditionalData(resourceClaim.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceFieldSelector(writer: SerializationWriter, resourceFieldSelector: Partial<ResourceFieldSelector> | undefined | null = {}) : void {
    if (resourceFieldSelector) {
        writer.writeStringValue("containerName", resourceFieldSelector.containerName);
        writer.writeStringValue("divisor", resourceFieldSelector.divisor);
        writer.writeStringValue("resource", resourceFieldSelector.resource);
        writer.writeAdditionalData(resourceFieldSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceHealth(writer: SerializationWriter, resourceHealth: Partial<ResourceHealth> | undefined | null = {}) : void {
    if (resourceHealth) {
        writer.writeStringValue("health", resourceHealth.health);
        writer.writeStringValue("resourceID", resourceHealth.resourceID);
        writer.writeAdditionalData(resourceHealth.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuota(writer: SerializationWriter, resourceQuota: Partial<ResourceQuota> | undefined | null = {}) : void {
    if (resourceQuota) {
        writer.writeStringValue("apiVersion", resourceQuota.apiVersion);
        writer.writeStringValue("kind", resourceQuota.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", resourceQuota.metadata, serializeObjectMeta);
        writer.writeObjectValue<ResourceQuotaSpec>("spec", resourceQuota.spec, serializeResourceQuotaSpec);
        writer.writeObjectValue<ResourceQuotaStatus>("status", resourceQuota.status, serializeResourceQuotaStatus);
        writer.writeAdditionalData(resourceQuota.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaList(writer: SerializationWriter, resourceQuotaList: Partial<ResourceQuotaList> | undefined | null = {}) : void {
    if (resourceQuotaList) {
        writer.writeStringValue("apiVersion", resourceQuotaList.apiVersion);
        writer.writeCollectionOfObjectValues<ResourceQuota>("items", resourceQuotaList.items, serializeResourceQuota);
        writer.writeStringValue("kind", resourceQuotaList.kind);
        writer.writeObjectValue<ListMeta>("metadata", resourceQuotaList.metadata, serializeListMeta);
        writer.writeAdditionalData(resourceQuotaList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaSpec(writer: SerializationWriter, resourceQuotaSpec: Partial<ResourceQuotaSpec> | undefined | null = {}) : void {
    if (resourceQuotaSpec) {
        writer.writeObjectValue<ResourceQuotaSpec_hard>("hard", resourceQuotaSpec.hard, serializeResourceQuotaSpec_hard);
        writer.writeCollectionOfPrimitiveValues<string>("scopes", resourceQuotaSpec.scopes);
        writer.writeObjectValue<ScopeSelector>("scopeSelector", resourceQuotaSpec.scopeSelector, serializeScopeSelector);
        writer.writeAdditionalData(resourceQuotaSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaSpec_hard(writer: SerializationWriter, resourceQuotaSpec_hard: Partial<ResourceQuotaSpec_hard> | undefined | null = {}) : void {
    if (resourceQuotaSpec_hard) {
        writer.writeAdditionalData(resourceQuotaSpec_hard.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaStatus(writer: SerializationWriter, resourceQuotaStatus: Partial<ResourceQuotaStatus> | undefined | null = {}) : void {
    if (resourceQuotaStatus) {
        writer.writeObjectValue<ResourceQuotaStatus_hard>("hard", resourceQuotaStatus.hard, serializeResourceQuotaStatus_hard);
        writer.writeObjectValue<ResourceQuotaStatus_used>("used", resourceQuotaStatus.used, serializeResourceQuotaStatus_used);
        writer.writeAdditionalData(resourceQuotaStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaStatus_hard(writer: SerializationWriter, resourceQuotaStatus_hard: Partial<ResourceQuotaStatus_hard> | undefined | null = {}) : void {
    if (resourceQuotaStatus_hard) {
        writer.writeAdditionalData(resourceQuotaStatus_hard.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceQuotaStatus_used(writer: SerializationWriter, resourceQuotaStatus_used: Partial<ResourceQuotaStatus_used> | undefined | null = {}) : void {
    if (resourceQuotaStatus_used) {
        writer.writeAdditionalData(resourceQuotaStatus_used.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceRequirements(writer: SerializationWriter, resourceRequirements: Partial<ResourceRequirements> | undefined | null = {}) : void {
    if (resourceRequirements) {
        writer.writeCollectionOfObjectValues<ResourceClaim>("claims", resourceRequirements.claims, serializeResourceClaim);
        writer.writeObjectValue<ResourceRequirements_limits>("limits", resourceRequirements.limits, serializeResourceRequirements_limits);
        writer.writeObjectValue<ResourceRequirements_requests>("requests", resourceRequirements.requests, serializeResourceRequirements_requests);
        writer.writeAdditionalData(resourceRequirements.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceRequirements_limits(writer: SerializationWriter, resourceRequirements_limits: Partial<ResourceRequirements_limits> | undefined | null = {}) : void {
    if (resourceRequirements_limits) {
        writer.writeAdditionalData(resourceRequirements_limits.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceRequirements_requests(writer: SerializationWriter, resourceRequirements_requests: Partial<ResourceRequirements_requests> | undefined | null = {}) : void {
    if (resourceRequirements_requests) {
        writer.writeAdditionalData(resourceRequirements_requests.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceStatus(writer: SerializationWriter, resourceStatus: Partial<ResourceStatus> | undefined | null = {}) : void {
    if (resourceStatus) {
        writer.writeStringValue("name", resourceStatus.name);
        writer.writeCollectionOfObjectValues<ResourceHealth>("resources", resourceStatus.resources, serializeResourceHealth);
        writer.writeAdditionalData(resourceStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScaleIOPersistentVolumeSource(writer: SerializationWriter, scaleIOPersistentVolumeSource: Partial<ScaleIOPersistentVolumeSource> | undefined | null = {}) : void {
    if (scaleIOPersistentVolumeSource) {
        writer.writeStringValue("fsType", scaleIOPersistentVolumeSource.fsType);
        writer.writeStringValue("gateway", scaleIOPersistentVolumeSource.gateway);
        writer.writeStringValue("protectionDomain", scaleIOPersistentVolumeSource.protectionDomain);
        writer.writeBooleanValue("readOnly", scaleIOPersistentVolumeSource.readOnly);
        writer.writeObjectValue<SecretReference>("secretRef", scaleIOPersistentVolumeSource.secretRef, serializeSecretReference);
        writer.writeBooleanValue("sslEnabled", scaleIOPersistentVolumeSource.sslEnabled);
        writer.writeStringValue("storageMode", scaleIOPersistentVolumeSource.storageMode);
        writer.writeStringValue("storagePool", scaleIOPersistentVolumeSource.storagePool);
        writer.writeStringValue("system", scaleIOPersistentVolumeSource.system);
        writer.writeStringValue("volumeName", scaleIOPersistentVolumeSource.volumeName);
        writer.writeAdditionalData(scaleIOPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScaleIOVolumeSource(writer: SerializationWriter, scaleIOVolumeSource: Partial<ScaleIOVolumeSource> | undefined | null = {}) : void {
    if (scaleIOVolumeSource) {
        writer.writeStringValue("fsType", scaleIOVolumeSource.fsType);
        writer.writeStringValue("gateway", scaleIOVolumeSource.gateway);
        writer.writeStringValue("protectionDomain", scaleIOVolumeSource.protectionDomain);
        writer.writeBooleanValue("readOnly", scaleIOVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", scaleIOVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeBooleanValue("sslEnabled", scaleIOVolumeSource.sslEnabled);
        writer.writeStringValue("storageMode", scaleIOVolumeSource.storageMode);
        writer.writeStringValue("storagePool", scaleIOVolumeSource.storagePool);
        writer.writeStringValue("system", scaleIOVolumeSource.system);
        writer.writeStringValue("volumeName", scaleIOVolumeSource.volumeName);
        writer.writeAdditionalData(scaleIOVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScopedResourceSelectorRequirement(writer: SerializationWriter, scopedResourceSelectorRequirement: Partial<ScopedResourceSelectorRequirement> | undefined | null = {}) : void {
    if (scopedResourceSelectorRequirement) {
        writer.writeStringValue("operator", scopedResourceSelectorRequirement.operator);
        writer.writeStringValue("scopeName", scopedResourceSelectorRequirement.scopeName);
        writer.writeCollectionOfPrimitiveValues<string>("values", scopedResourceSelectorRequirement.values);
        writer.writeAdditionalData(scopedResourceSelectorRequirement.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScopeSelector(writer: SerializationWriter, scopeSelector: Partial<ScopeSelector> | undefined | null = {}) : void {
    if (scopeSelector) {
        writer.writeCollectionOfObjectValues<ScopedResourceSelectorRequirement>("matchExpressions", scopeSelector.matchExpressions, serializeScopedResourceSelectorRequirement);
        writer.writeAdditionalData(scopeSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSeccompProfile(writer: SerializationWriter, seccompProfile: Partial<SeccompProfile> | undefined | null = {}) : void {
    if (seccompProfile) {
        writer.writeStringValue("localhostProfile", seccompProfile.localhostProfile);
        writer.writeStringValue("type", seccompProfile.type);
        writer.writeAdditionalData(seccompProfile.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecret(writer: SerializationWriter, secret: Partial<Secret> | undefined | null = {}) : void {
    if (secret) {
        writer.writeStringValue("apiVersion", secret.apiVersion);
        writer.writeObjectValue<Secret_data>("data", secret.data, serializeSecret_data);
        writer.writeBooleanValue("immutable", secret.immutable);
        writer.writeStringValue("kind", secret.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", secret.metadata, serializeObjectMeta);
        writer.writeObjectValue<Secret_stringData>("stringData", secret.stringData, serializeSecret_stringData);
        writer.writeStringValue("type", secret.type);
        writer.writeAdditionalData(secret.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecret_data(writer: SerializationWriter, secret_data: Partial<Secret_data> | undefined | null = {}) : void {
    if (secret_data) {
        writer.writeAdditionalData(secret_data.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecret_stringData(writer: SerializationWriter, secret_stringData: Partial<Secret_stringData> | undefined | null = {}) : void {
    if (secret_stringData) {
        writer.writeAdditionalData(secret_stringData.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretEnvSource(writer: SerializationWriter, secretEnvSource: Partial<SecretEnvSource> | undefined | null = {}) : void {
    if (secretEnvSource) {
        writer.writeStringValue("name", secretEnvSource.name);
        writer.writeBooleanValue("optional", secretEnvSource.optional);
        writer.writeAdditionalData(secretEnvSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretKeySelector(writer: SerializationWriter, secretKeySelector: Partial<SecretKeySelector> | undefined | null = {}) : void {
    if (secretKeySelector) {
        writer.writeStringValue("key", secretKeySelector.key);
        writer.writeStringValue("name", secretKeySelector.name);
        writer.writeBooleanValue("optional", secretKeySelector.optional);
        writer.writeAdditionalData(secretKeySelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretList(writer: SerializationWriter, secretList: Partial<SecretList> | undefined | null = {}) : void {
    if (secretList) {
        writer.writeStringValue("apiVersion", secretList.apiVersion);
        writer.writeCollectionOfObjectValues<Secret>("items", secretList.items, serializeSecret);
        writer.writeStringValue("kind", secretList.kind);
        writer.writeObjectValue<ListMeta>("metadata", secretList.metadata, serializeListMeta);
        writer.writeAdditionalData(secretList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretProjection(writer: SerializationWriter, secretProjection: Partial<SecretProjection> | undefined | null = {}) : void {
    if (secretProjection) {
        writer.writeCollectionOfObjectValues<KeyToPath>("items", secretProjection.items, serializeKeyToPath);
        writer.writeStringValue("name", secretProjection.name);
        writer.writeBooleanValue("optional", secretProjection.optional);
        writer.writeAdditionalData(secretProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretReference(writer: SerializationWriter, secretReference: Partial<SecretReference> | undefined | null = {}) : void {
    if (secretReference) {
        writer.writeStringValue("name", secretReference.name);
        writer.writeStringValue("namespace", secretReference.namespace);
        writer.writeAdditionalData(secretReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecretVolumeSource(writer: SerializationWriter, secretVolumeSource: Partial<SecretVolumeSource> | undefined | null = {}) : void {
    if (secretVolumeSource) {
        writer.writeNumberValue("defaultMode", secretVolumeSource.defaultMode);
        writer.writeCollectionOfObjectValues<KeyToPath>("items", secretVolumeSource.items, serializeKeyToPath);
        writer.writeBooleanValue("optional", secretVolumeSource.optional);
        writer.writeStringValue("secretName", secretVolumeSource.secretName);
        writer.writeAdditionalData(secretVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSecurityContext(writer: SerializationWriter, securityContext: Partial<SecurityContext> | undefined | null = {}) : void {
    if (securityContext) {
        writer.writeBooleanValue("allowPrivilegeEscalation", securityContext.allowPrivilegeEscalation);
        writer.writeObjectValue<AppArmorProfile>("appArmorProfile", securityContext.appArmorProfile, serializeAppArmorProfile);
        writer.writeObjectValue<Capabilities>("capabilities", securityContext.capabilities, serializeCapabilities);
        writer.writeBooleanValue("privileged", securityContext.privileged);
        writer.writeStringValue("procMount", securityContext.procMount);
        writer.writeBooleanValue("readOnlyRootFilesystem", securityContext.readOnlyRootFilesystem);
        writer.writeNumberValue("runAsGroup", securityContext.runAsGroup);
        writer.writeBooleanValue("runAsNonRoot", securityContext.runAsNonRoot);
        writer.writeNumberValue("runAsUser", securityContext.runAsUser);
        writer.writeObjectValue<SeccompProfile>("seccompProfile", securityContext.seccompProfile, serializeSeccompProfile);
        writer.writeObjectValue<SELinuxOptions>("seLinuxOptions", securityContext.seLinuxOptions, serializeSELinuxOptions);
        writer.writeObjectValue<WindowsSecurityContextOptions>("windowsOptions", securityContext.windowsOptions, serializeWindowsSecurityContextOptions);
        writer.writeAdditionalData(securityContext.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSELinuxOptions(writer: SerializationWriter, sELinuxOptions: Partial<SELinuxOptions> | undefined | null = {}) : void {
    if (sELinuxOptions) {
        writer.writeStringValue("level", sELinuxOptions.level);
        writer.writeStringValue("role", sELinuxOptions.role);
        writer.writeStringValue("type", sELinuxOptions.type);
        writer.writeStringValue("user", sELinuxOptions.user);
        writer.writeAdditionalData(sELinuxOptions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeService(writer: SerializationWriter, service: Partial<Service> | undefined | null = {}) : void {
    if (service) {
        writer.writeStringValue("apiVersion", service.apiVersion);
        writer.writeStringValue("kind", service.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", service.metadata, serializeObjectMeta);
        writer.writeObjectValue<ServiceSpec>("spec", service.spec, serializeServiceSpec);
        writer.writeObjectValue<ServiceStatus>("status", service.status, serializeServiceStatus);
        writer.writeAdditionalData(service.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccount(writer: SerializationWriter, serviceAccount: Partial<ServiceAccount> | undefined | null = {}) : void {
    if (serviceAccount) {
        writer.writeStringValue("apiVersion", serviceAccount.apiVersion);
        writer.writeBooleanValue("automountServiceAccountToken", serviceAccount.automountServiceAccountToken);
        writer.writeCollectionOfObjectValues<LocalObjectReference>("imagePullSecrets", serviceAccount.imagePullSecrets, serializeLocalObjectReference);
        writer.writeStringValue("kind", serviceAccount.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", serviceAccount.metadata, serializeObjectMeta);
        writer.writeCollectionOfObjectValues<ObjectReference>("secrets", serviceAccount.secrets, serializeObjectReference);
        writer.writeAdditionalData(serviceAccount.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountList(writer: SerializationWriter, serviceAccountList: Partial<ServiceAccountList> | undefined | null = {}) : void {
    if (serviceAccountList) {
        writer.writeStringValue("apiVersion", serviceAccountList.apiVersion);
        writer.writeCollectionOfObjectValues<ServiceAccount>("items", serviceAccountList.items, serializeServiceAccount);
        writer.writeStringValue("kind", serviceAccountList.kind);
        writer.writeObjectValue<ListMeta>("metadata", serviceAccountList.metadata, serializeListMeta);
        writer.writeAdditionalData(serviceAccountList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountTokenProjection(writer: SerializationWriter, serviceAccountTokenProjection: Partial<ServiceAccountTokenProjection> | undefined | null = {}) : void {
    if (serviceAccountTokenProjection) {
        writer.writeStringValue("audience", serviceAccountTokenProjection.audience);
        writer.writeNumberValue("expirationSeconds", serviceAccountTokenProjection.expirationSeconds);
        writer.writeStringValue("path", serviceAccountTokenProjection.path);
        writer.writeAdditionalData(serviceAccountTokenProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceList(writer: SerializationWriter, serviceList: Partial<ServiceList> | undefined | null = {}) : void {
    if (serviceList) {
        writer.writeStringValue("apiVersion", serviceList.apiVersion);
        writer.writeCollectionOfObjectValues<Service>("items", serviceList.items, serializeService);
        writer.writeStringValue("kind", serviceList.kind);
        writer.writeObjectValue<ListMeta>("metadata", serviceList.metadata, serializeListMeta);
        writer.writeAdditionalData(serviceList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServicePort(writer: SerializationWriter, servicePort: Partial<ServicePort> | undefined | null = {}) : void {
    if (servicePort) {
        writer.writeStringValue("appProtocol", servicePort.appProtocol);
        writer.writeStringValue("name", servicePort.name);
        writer.writeNumberValue("nodePort", servicePort.nodePort);
        writer.writeNumberValue("port", servicePort.port);
        writer.writeStringValue("protocol", servicePort.protocol);
        writer.writeStringValue("targetPort", servicePort.targetPort);
        writer.writeAdditionalData(servicePort.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceSpec(writer: SerializationWriter, serviceSpec: Partial<ServiceSpec> | undefined | null = {}) : void {
    if (serviceSpec) {
        writer.writeBooleanValue("allocateLoadBalancerNodePorts", serviceSpec.allocateLoadBalancerNodePorts);
        writer.writeStringValue("clusterIP", serviceSpec.clusterIP);
        writer.writeCollectionOfPrimitiveValues<string>("clusterIPs", serviceSpec.clusterIPs);
        writer.writeCollectionOfPrimitiveValues<string>("externalIPs", serviceSpec.externalIPs);
        writer.writeStringValue("externalName", serviceSpec.externalName);
        writer.writeStringValue("externalTrafficPolicy", serviceSpec.externalTrafficPolicy);
        writer.writeNumberValue("healthCheckNodePort", serviceSpec.healthCheckNodePort);
        writer.writeStringValue("internalTrafficPolicy", serviceSpec.internalTrafficPolicy);
        writer.writeCollectionOfPrimitiveValues<string>("ipFamilies", serviceSpec.ipFamilies);
        writer.writeStringValue("ipFamilyPolicy", serviceSpec.ipFamilyPolicy);
        writer.writeStringValue("loadBalancerClass", serviceSpec.loadBalancerClass);
        writer.writeStringValue("loadBalancerIP", serviceSpec.loadBalancerIP);
        writer.writeCollectionOfPrimitiveValues<string>("loadBalancerSourceRanges", serviceSpec.loadBalancerSourceRanges);
        writer.writeCollectionOfObjectValues<ServicePort>("ports", serviceSpec.ports, serializeServicePort);
        writer.writeBooleanValue("publishNotReadyAddresses", serviceSpec.publishNotReadyAddresses);
        writer.writeObjectValue<ServiceSpec_selector>("selector", serviceSpec.selector, serializeServiceSpec_selector);
        writer.writeStringValue("sessionAffinity", serviceSpec.sessionAffinity);
        writer.writeObjectValue<SessionAffinityConfig>("sessionAffinityConfig", serviceSpec.sessionAffinityConfig, serializeSessionAffinityConfig);
        writer.writeStringValue("trafficDistribution", serviceSpec.trafficDistribution);
        writer.writeStringValue("type", serviceSpec.type);
        writer.writeAdditionalData(serviceSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceSpec_selector(writer: SerializationWriter, serviceSpec_selector: Partial<ServiceSpec_selector> | undefined | null = {}) : void {
    if (serviceSpec_selector) {
        writer.writeAdditionalData(serviceSpec_selector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceStatus(writer: SerializationWriter, serviceStatus: Partial<ServiceStatus> | undefined | null = {}) : void {
    if (serviceStatus) {
        writer.writeCollectionOfObjectValues<Condition>("conditions", serviceStatus.conditions, serializeCondition);
        writer.writeObjectValue<LoadBalancerStatus>("loadBalancer", serviceStatus.loadBalancer, serializeLoadBalancerStatus);
        writer.writeAdditionalData(serviceStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSessionAffinityConfig(writer: SerializationWriter, sessionAffinityConfig: Partial<SessionAffinityConfig> | undefined | null = {}) : void {
    if (sessionAffinityConfig) {
        writer.writeObjectValue<ClientIPConfig>("clientIP", sessionAffinityConfig.clientIP, serializeClientIPConfig);
        writer.writeAdditionalData(sessionAffinityConfig.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSleepAction(writer: SerializationWriter, sleepAction: Partial<SleepAction> | undefined | null = {}) : void {
    if (sleepAction) {
        writer.writeNumberValue("seconds", sleepAction.seconds);
        writer.writeAdditionalData(sleepAction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStorageOSPersistentVolumeSource(writer: SerializationWriter, storageOSPersistentVolumeSource: Partial<StorageOSPersistentVolumeSource> | undefined | null = {}) : void {
    if (storageOSPersistentVolumeSource) {
        writer.writeStringValue("fsType", storageOSPersistentVolumeSource.fsType);
        writer.writeBooleanValue("readOnly", storageOSPersistentVolumeSource.readOnly);
        writer.writeObjectValue<ObjectReference>("secretRef", storageOSPersistentVolumeSource.secretRef, serializeObjectReference);
        writer.writeStringValue("volumeName", storageOSPersistentVolumeSource.volumeName);
        writer.writeStringValue("volumeNamespace", storageOSPersistentVolumeSource.volumeNamespace);
        writer.writeAdditionalData(storageOSPersistentVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStorageOSVolumeSource(writer: SerializationWriter, storageOSVolumeSource: Partial<StorageOSVolumeSource> | undefined | null = {}) : void {
    if (storageOSVolumeSource) {
        writer.writeStringValue("fsType", storageOSVolumeSource.fsType);
        writer.writeBooleanValue("readOnly", storageOSVolumeSource.readOnly);
        writer.writeObjectValue<LocalObjectReference>("secretRef", storageOSVolumeSource.secretRef, serializeLocalObjectReference);
        writer.writeStringValue("volumeName", storageOSVolumeSource.volumeName);
        writer.writeStringValue("volumeNamespace", storageOSVolumeSource.volumeNamespace);
        writer.writeAdditionalData(storageOSVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSysctl(writer: SerializationWriter, sysctl: Partial<Sysctl> | undefined | null = {}) : void {
    if (sysctl) {
        writer.writeStringValue("name", sysctl.name);
        writer.writeStringValue("value", sysctl.value);
        writer.writeAdditionalData(sysctl.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTaint(writer: SerializationWriter, taint: Partial<Taint> | undefined | null = {}) : void {
    if (taint) {
        writer.writeStringValue("effect", taint.effect);
        writer.writeStringValue("key", taint.key);
        writer.writeDateValue("timeAdded", taint.timeAdded);
        writer.writeStringValue("value", taint.value);
        writer.writeAdditionalData(taint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTCPSocketAction(writer: SerializationWriter, tCPSocketAction: Partial<TCPSocketAction> | undefined | null = {}) : void {
    if (tCPSocketAction) {
        writer.writeStringValue("host", tCPSocketAction.host);
        writer.writeStringValue("port", tCPSocketAction.port);
        writer.writeAdditionalData(tCPSocketAction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeToleration(writer: SerializationWriter, toleration: Partial<Toleration> | undefined | null = {}) : void {
    if (toleration) {
        writer.writeStringValue("effect", toleration.effect);
        writer.writeStringValue("key", toleration.key);
        writer.writeStringValue("operator", toleration.operator);
        writer.writeNumberValue("tolerationSeconds", toleration.tolerationSeconds);
        writer.writeStringValue("value", toleration.value);
        writer.writeAdditionalData(toleration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopologySelectorLabelRequirement(writer: SerializationWriter, topologySelectorLabelRequirement: Partial<TopologySelectorLabelRequirement> | undefined | null = {}) : void {
    if (topologySelectorLabelRequirement) {
        writer.writeStringValue("key", topologySelectorLabelRequirement.key);
        writer.writeCollectionOfPrimitiveValues<string>("values", topologySelectorLabelRequirement.values);
        writer.writeAdditionalData(topologySelectorLabelRequirement.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopologySelectorTerm(writer: SerializationWriter, topologySelectorTerm: Partial<TopologySelectorTerm> | undefined | null = {}) : void {
    if (topologySelectorTerm) {
        writer.writeCollectionOfObjectValues<TopologySelectorLabelRequirement>("matchLabelExpressions", topologySelectorTerm.matchLabelExpressions, serializeTopologySelectorLabelRequirement);
        writer.writeAdditionalData(topologySelectorTerm.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopologySpreadConstraint(writer: SerializationWriter, topologySpreadConstraint: Partial<TopologySpreadConstraint> | undefined | null = {}) : void {
    if (topologySpreadConstraint) {
        writer.writeObjectValue<LabelSelector>("labelSelector", topologySpreadConstraint.labelSelector, serializeLabelSelector);
        writer.writeCollectionOfPrimitiveValues<string>("matchLabelKeys", topologySpreadConstraint.matchLabelKeys);
        writer.writeNumberValue("maxSkew", topologySpreadConstraint.maxSkew);
        writer.writeNumberValue("minDomains", topologySpreadConstraint.minDomains);
        writer.writeStringValue("nodeAffinityPolicy", topologySpreadConstraint.nodeAffinityPolicy);
        writer.writeStringValue("nodeTaintsPolicy", topologySpreadConstraint.nodeTaintsPolicy);
        writer.writeStringValue("topologyKey", topologySpreadConstraint.topologyKey);
        writer.writeStringValue("whenUnsatisfiable", topologySpreadConstraint.whenUnsatisfiable);
        writer.writeAdditionalData(topologySpreadConstraint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTypedLocalObjectReference(writer: SerializationWriter, typedLocalObjectReference: Partial<TypedLocalObjectReference> | undefined | null = {}) : void {
    if (typedLocalObjectReference) {
        writer.writeStringValue("apiGroup", typedLocalObjectReference.apiGroup);
        writer.writeStringValue("kind", typedLocalObjectReference.kind);
        writer.writeStringValue("name", typedLocalObjectReference.name);
        writer.writeAdditionalData(typedLocalObjectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTypedObjectReference(writer: SerializationWriter, typedObjectReference: Partial<TypedObjectReference> | undefined | null = {}) : void {
    if (typedObjectReference) {
        writer.writeStringValue("apiGroup", typedObjectReference.apiGroup);
        writer.writeStringValue("kind", typedObjectReference.kind);
        writer.writeStringValue("name", typedObjectReference.name);
        writer.writeStringValue("namespace", typedObjectReference.namespace);
        writer.writeAdditionalData(typedObjectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolume(writer: SerializationWriter, volume: Partial<Volume> | undefined | null = {}) : void {
    if (volume) {
        writer.writeObjectValue<AWSElasticBlockStoreVolumeSource>("awsElasticBlockStore", volume.awsElasticBlockStore, serializeAWSElasticBlockStoreVolumeSource);
        writer.writeObjectValue<AzureDiskVolumeSource>("azureDisk", volume.azureDisk, serializeAzureDiskVolumeSource);
        writer.writeObjectValue<AzureFileVolumeSource>("azureFile", volume.azureFile, serializeAzureFileVolumeSource);
        writer.writeObjectValue<CephFSVolumeSource>("cephfs", volume.cephfs, serializeCephFSVolumeSource);
        writer.writeObjectValue<CinderVolumeSource>("cinder", volume.cinder, serializeCinderVolumeSource);
        writer.writeObjectValue<ConfigMapVolumeSource>("configMap", volume.configMap, serializeConfigMapVolumeSource);
        writer.writeObjectValue<CSIVolumeSource>("csi", volume.csi, serializeCSIVolumeSource);
        writer.writeObjectValue<DownwardAPIVolumeSource>("downwardAPI", volume.downwardAPI, serializeDownwardAPIVolumeSource);
        writer.writeObjectValue<EmptyDirVolumeSource>("emptyDir", volume.emptyDir, serializeEmptyDirVolumeSource);
        writer.writeObjectValue<EphemeralVolumeSource>("ephemeral", volume.ephemeral, serializeEphemeralVolumeSource);
        writer.writeObjectValue<FCVolumeSource>("fc", volume.fc, serializeFCVolumeSource);
        writer.writeObjectValue<FlexVolumeSource>("flexVolume", volume.flexVolume, serializeFlexVolumeSource);
        writer.writeObjectValue<FlockerVolumeSource>("flocker", volume.flocker, serializeFlockerVolumeSource);
        writer.writeObjectValue<GCEPersistentDiskVolumeSource>("gcePersistentDisk", volume.gcePersistentDisk, serializeGCEPersistentDiskVolumeSource);
        writer.writeObjectValue<GitRepoVolumeSource>("gitRepo", volume.gitRepo, serializeGitRepoVolumeSource);
        writer.writeObjectValue<GlusterfsVolumeSource>("glusterfs", volume.glusterfs, serializeGlusterfsVolumeSource);
        writer.writeObjectValue<HostPathVolumeSource>("hostPath", volume.hostPath, serializeHostPathVolumeSource);
        writer.writeObjectValue<ImageVolumeSource>("image", volume.image, serializeImageVolumeSource);
        writer.writeObjectValue<ISCSIVolumeSource>("iscsi", volume.iscsi, serializeISCSIVolumeSource);
        writer.writeStringValue("name", volume.name);
        writer.writeObjectValue<NFSVolumeSource>("nfs", volume.nfs, serializeNFSVolumeSource);
        writer.writeObjectValue<PersistentVolumeClaimVolumeSource>("persistentVolumeClaim", volume.persistentVolumeClaim, serializePersistentVolumeClaimVolumeSource);
        writer.writeObjectValue<PhotonPersistentDiskVolumeSource>("photonPersistentDisk", volume.photonPersistentDisk, serializePhotonPersistentDiskVolumeSource);
        writer.writeObjectValue<PortworxVolumeSource>("portworxVolume", volume.portworxVolume, serializePortworxVolumeSource);
        writer.writeObjectValue<ProjectedVolumeSource>("projected", volume.projected, serializeProjectedVolumeSource);
        writer.writeObjectValue<QuobyteVolumeSource>("quobyte", volume.quobyte, serializeQuobyteVolumeSource);
        writer.writeObjectValue<RBDVolumeSource>("rbd", volume.rbd, serializeRBDVolumeSource);
        writer.writeObjectValue<ScaleIOVolumeSource>("scaleIO", volume.scaleIO, serializeScaleIOVolumeSource);
        writer.writeObjectValue<SecretVolumeSource>("secret", volume.secret, serializeSecretVolumeSource);
        writer.writeObjectValue<StorageOSVolumeSource>("storageos", volume.storageos, serializeStorageOSVolumeSource);
        writer.writeObjectValue<VsphereVirtualDiskVolumeSource>("vsphereVolume", volume.vsphereVolume, serializeVsphereVirtualDiskVolumeSource);
        writer.writeAdditionalData(volume.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeDevice(writer: SerializationWriter, volumeDevice: Partial<VolumeDevice> | undefined | null = {}) : void {
    if (volumeDevice) {
        writer.writeStringValue("devicePath", volumeDevice.devicePath);
        writer.writeStringValue("name", volumeDevice.name);
        writer.writeAdditionalData(volumeDevice.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeMount(writer: SerializationWriter, volumeMount: Partial<VolumeMount> | undefined | null = {}) : void {
    if (volumeMount) {
        writer.writeStringValue("mountPath", volumeMount.mountPath);
        writer.writeStringValue("mountPropagation", volumeMount.mountPropagation);
        writer.writeStringValue("name", volumeMount.name);
        writer.writeBooleanValue("readOnly", volumeMount.readOnly);
        writer.writeStringValue("recursiveReadOnly", volumeMount.recursiveReadOnly);
        writer.writeStringValue("subPath", volumeMount.subPath);
        writer.writeStringValue("subPathExpr", volumeMount.subPathExpr);
        writer.writeAdditionalData(volumeMount.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeMountStatus(writer: SerializationWriter, volumeMountStatus: Partial<VolumeMountStatus> | undefined | null = {}) : void {
    if (volumeMountStatus) {
        writer.writeStringValue("mountPath", volumeMountStatus.mountPath);
        writer.writeStringValue("name", volumeMountStatus.name);
        writer.writeBooleanValue("readOnly", volumeMountStatus.readOnly);
        writer.writeStringValue("recursiveReadOnly", volumeMountStatus.recursiveReadOnly);
        writer.writeAdditionalData(volumeMountStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeNodeAffinity(writer: SerializationWriter, volumeNodeAffinity: Partial<VolumeNodeAffinity> | undefined | null = {}) : void {
    if (volumeNodeAffinity) {
        writer.writeObjectValue<NodeSelector>("required", volumeNodeAffinity.required, serializeNodeSelector);
        writer.writeAdditionalData(volumeNodeAffinity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeProjection(writer: SerializationWriter, volumeProjection: Partial<VolumeProjection> | undefined | null = {}) : void {
    if (volumeProjection) {
        writer.writeObjectValue<ClusterTrustBundleProjection>("clusterTrustBundle", volumeProjection.clusterTrustBundle, serializeClusterTrustBundleProjection);
        writer.writeObjectValue<ConfigMapProjection>("configMap", volumeProjection.configMap, serializeConfigMapProjection);
        writer.writeObjectValue<DownwardAPIProjection>("downwardAPI", volumeProjection.downwardAPI, serializeDownwardAPIProjection);
        writer.writeObjectValue<SecretProjection>("secret", volumeProjection.secret, serializeSecretProjection);
        writer.writeObjectValue<ServiceAccountTokenProjection>("serviceAccountToken", volumeProjection.serviceAccountToken, serializeServiceAccountTokenProjection);
        writer.writeAdditionalData(volumeProjection.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeResourceRequirements(writer: SerializationWriter, volumeResourceRequirements: Partial<VolumeResourceRequirements> | undefined | null = {}) : void {
    if (volumeResourceRequirements) {
        writer.writeObjectValue<VolumeResourceRequirements_limits>("limits", volumeResourceRequirements.limits, serializeVolumeResourceRequirements_limits);
        writer.writeObjectValue<VolumeResourceRequirements_requests>("requests", volumeResourceRequirements.requests, serializeVolumeResourceRequirements_requests);
        writer.writeAdditionalData(volumeResourceRequirements.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeResourceRequirements_limits(writer: SerializationWriter, volumeResourceRequirements_limits: Partial<VolumeResourceRequirements_limits> | undefined | null = {}) : void {
    if (volumeResourceRequirements_limits) {
        writer.writeAdditionalData(volumeResourceRequirements_limits.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumeResourceRequirements_requests(writer: SerializationWriter, volumeResourceRequirements_requests: Partial<VolumeResourceRequirements_requests> | undefined | null = {}) : void {
    if (volumeResourceRequirements_requests) {
        writer.writeAdditionalData(volumeResourceRequirements_requests.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVsphereVirtualDiskVolumeSource(writer: SerializationWriter, vsphereVirtualDiskVolumeSource: Partial<VsphereVirtualDiskVolumeSource> | undefined | null = {}) : void {
    if (vsphereVirtualDiskVolumeSource) {
        writer.writeStringValue("fsType", vsphereVirtualDiskVolumeSource.fsType);
        writer.writeStringValue("storagePolicyID", vsphereVirtualDiskVolumeSource.storagePolicyID);
        writer.writeStringValue("storagePolicyName", vsphereVirtualDiskVolumeSource.storagePolicyName);
        writer.writeStringValue("volumePath", vsphereVirtualDiskVolumeSource.volumePath);
        writer.writeAdditionalData(vsphereVirtualDiskVolumeSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWeightedPodAffinityTerm(writer: SerializationWriter, weightedPodAffinityTerm: Partial<WeightedPodAffinityTerm> | undefined | null = {}) : void {
    if (weightedPodAffinityTerm) {
        writer.writeObjectValue<PodAffinityTerm>("podAffinityTerm", weightedPodAffinityTerm.podAffinityTerm, serializePodAffinityTerm);
        writer.writeNumberValue("weight", weightedPodAffinityTerm.weight);
        writer.writeAdditionalData(weightedPodAffinityTerm.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWindowsSecurityContextOptions(writer: SerializationWriter, windowsSecurityContextOptions: Partial<WindowsSecurityContextOptions> | undefined | null = {}) : void {
    if (windowsSecurityContextOptions) {
        writer.writeStringValue("gmsaCredentialSpec", windowsSecurityContextOptions.gmsaCredentialSpec);
        writer.writeStringValue("gmsaCredentialSpecName", windowsSecurityContextOptions.gmsaCredentialSpecName);
        writer.writeBooleanValue("hostProcess", windowsSecurityContextOptions.hostProcess);
        writer.writeStringValue("runAsUserName", windowsSecurityContextOptions.runAsUserName);
        writer.writeAdditionalData(windowsSecurityContextOptions.additionalData);
    }
}
/**
 * Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
 */
export interface Service extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ServiceSpec describes the attributes that a user creates on a service.
     */
    spec?: ServiceSpec | null;
    /**
     * ServiceStatus represents the current status of a service.
     */
    status?: ServiceStatus | null;
}
/**
 * ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
 */
export interface ServiceAccount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
     */
    automountServiceAccountToken?: boolean | null;
    /**
     * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: LocalObjectReference[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". The "kubernetes.io/enforce-mountable-secrets" annotation is deprecated since v1.32. Prefer separate namespaces to isolate access to mounted secrets. This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
     */
    secrets?: ObjectReference[] | null;
}
/**
 * ServiceAccountList is a list of ServiceAccount objects
 */
export interface ServiceAccountList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     */
    items?: ServiceAccount[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
 */
export interface ServiceAccountTokenProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
     */
    audience?: string | null;
    /**
     * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
     */
    expirationSeconds?: number | null;
    /**
     * path is the path relative to the mount point of the file to project the token into.
     */
    path?: string | null;
}
/**
 * ServiceList holds a list of services.
 */
export interface ServiceList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * List of services
     */
    items?: Service[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ServicePort contains information on service's port.
 */
export interface ServicePort extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).* Kubernetes-defined prefixed names:  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
     */
    appProtocol?: string | null;
    /**
     * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
     */
    name?: string | null;
    /**
     * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
     */
    nodePort?: number | null;
    /**
     * The port that will be exposed by this service.
     */
    port?: number | null;
    /**
     * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
     */
    protocol?: string | null;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    targetPort?: string | null;
}
/**
 * ServiceSpec describes the attributes that a user creates on a service.
 */
export interface ServiceSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
     */
    allocateLoadBalancerNodePorts?: boolean | null;
    /**
     * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIP?: string | null;
    /**
     * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIPs?: string[] | null;
    /**
     * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
     */
    externalIPs?: string[] | null;
    /**
     * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
     */
    externalName?: string | null;
    /**
     * externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
     */
    externalTrafficPolicy?: string | null;
    /**
     * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
     */
    healthCheckNodePort?: number | null;
    /**
     * InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
     */
    internalTrafficPolicy?: string | null;
    /**
     * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
     */
    ipFamilies?: string[] | null;
    /**
     * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
     */
    ipFamilyPolicy?: string | null;
    /**
     * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
     */
    loadBalancerClass?: string | null;
    /**
     * Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.
     */
    loadBalancerIP?: string | null;
    /**
     * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
     */
    loadBalancerSourceRanges?: string[] | null;
    /**
     * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    ports?: ServicePort[] | null;
    /**
     * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
     */
    publishNotReadyAddresses?: boolean | null;
    /**
     * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
     */
    selector?: ServiceSpec_selector | null;
    /**
     * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    sessionAffinity?: string | null;
    /**
     * SessionAffinityConfig represents the configurations of session affinity.
     */
    sessionAffinityConfig?: SessionAffinityConfig | null;
    /**
     * TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to "PreferClose", implementations should prioritize endpoints that are topologically close (e.g., same zone). This is a beta field and requires enabling ServiceTrafficDistribution feature.
     */
    trafficDistribution?: string | null;
    /**
     * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
     */
    type?: string | null;
}
/**
 * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
 */
export interface ServiceSpec_selector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * ServiceStatus represents the current status of a service.
 */
export interface ServiceStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current service state
     */
    conditions?: Condition[] | null;
    /**
     * LoadBalancerStatus represents the status of a load-balancer.
     */
    loadBalancer?: LoadBalancerStatus | null;
}
/**
 * SessionAffinityConfig represents the configurations of session affinity.
 */
export interface SessionAffinityConfig extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ClientIPConfig represents the configurations of Client IP based session affinity.
     */
    clientIP?: ClientIPConfig | null;
}
/**
 * SleepAction describes a "sleep" action.
 */
export interface SleepAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Seconds is the number of seconds to sleep.
     */
    seconds?: number | null;
}
/**
 * Represents a StorageOS persistent volume resource.
 */
export interface StorageOSPersistentVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * ObjectReference contains enough information to let you inspect or modify the referred object.
     */
    secretRef?: ObjectReference | null;
    /**
     * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
     */
    volumeName?: string | null;
    /**
     * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
     */
    volumeNamespace?: string | null;
}
/**
 * Represents a StorageOS persistent volume resource.
 */
export interface StorageOSVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean | null;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    secretRef?: LocalObjectReference | null;
    /**
     * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
     */
    volumeName?: string | null;
    /**
     * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
     */
    volumeNamespace?: string | null;
}
/**
 * Sysctl defines a kernel parameter to be set
 */
export interface Sysctl extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of a property to set
     */
    name?: string | null;
    /**
     * Value of a property to set
     */
    value?: string | null;
}
/**
 * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
 */
export interface Taint extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string | null;
    /**
     * Required. The taint key to be applied to a node.
     */
    key?: string | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    timeAdded?: Date | null;
    /**
     * The taint value corresponding to the taint key.
     */
    value?: string | null;
}
/**
 * TCPSocketAction describes an action based on opening a socket
 */
export interface TCPSocketAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional: Host name to connect to, defaults to the pod IP.
     */
    host?: string | null;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    port?: string | null;
}
/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 */
export interface Toleration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string | null;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string | null;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string | null;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: number | null;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string | null;
}
/**
 * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
 */
export interface TopologySelectorLabelRequirement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The label key that the selector applies to.
     */
    key?: string | null;
    /**
     * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
     */
    values?: string[] | null;
}
/**
 * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
 */
export interface TopologySelectorTerm extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of topology selector requirements by labels.
     */
    matchLabelExpressions?: TopologySelectorLabelRequirement[] | null;
}
/**
 * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
 */
export interface TopologySpreadConstraint extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    labelSelector?: LabelSelector | null;
    /**
     * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
     */
    matchLabelKeys?: string[] | null;
    /**
     * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
     */
    maxSkew?: number | null;
    /**
     * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
     */
    minDomains?: number | null;
    /**
     * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
     */
    nodeAffinityPolicy?: string | null;
    /**
     * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
     */
    nodeTaintsPolicy?: string | null;
    /**
     * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
     */
    topologyKey?: string | null;
    /**
     * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,  but giving higher precedence to topologies that would help reduce the  skew.A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
     */
    whenUnsatisfiable?: string | null;
}
/**
 * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
 */
export interface TypedLocalObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup?: string | null;
    /**
     * Kind is the type of resource being referenced
     */
    kind?: string | null;
    /**
     * Name is the name of resource being referenced
     */
    name?: string | null;
}
/**
 * TypedObjectReference contains enough information to let you locate the typed referenced object
 */
export interface TypedObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup?: string | null;
    /**
     * Kind is the type of resource being referenced
     */
    kind?: string | null;
    /**
     * Name is the name of resource being referenced
     */
    name?: string | null;
    /**
     * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
     */
    namespace?: string | null;
}
/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 */
export interface Volume extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents a Persistent Disk resource in AWS.An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
     */
    awsElasticBlockStore?: AWSElasticBlockStoreVolumeSource | null;
    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: AzureDiskVolumeSource | null;
    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: AzureFileVolumeSource | null;
    /**
     * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
     */
    cephfs?: CephFSVolumeSource | null;
    /**
     * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
     */
    cinder?: CinderVolumeSource | null;
    /**
     * Adapts a ConfigMap into a volume.The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
     */
    configMap?: ConfigMapVolumeSource | null;
    /**
     * Represents a source location of a volume to mount, managed by an external CSI driver
     */
    csi?: CSIVolumeSource | null;
    /**
     * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    downwardAPI?: DownwardAPIVolumeSource | null;
    /**
     * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
     */
    emptyDir?: EmptyDirVolumeSource | null;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver.
     */
    ephemeral?: EphemeralVolumeSource | null;
    /**
     * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
     */
    fc?: FCVolumeSource | null;
    /**
     * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     */
    flexVolume?: FlexVolumeSource | null;
    /**
     * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
     */
    flocker?: FlockerVolumeSource | null;
    /**
     * Represents a Persistent Disk resource in Google Compute Engine.A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
     */
    gcePersistentDisk?: GCEPersistentDiskVolumeSource | null;
    /**
     * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
     */
    gitRepo?: GitRepoVolumeSource | null;
    /**
     * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
     */
    glusterfs?: GlusterfsVolumeSource | null;
    /**
     * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
     */
    hostPath?: HostPathVolumeSource | null;
    /**
     * ImageVolumeSource represents a image volume resource.
     */
    image?: ImageVolumeSource | null;
    /**
     * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
     */
    iscsi?: ISCSIVolumeSource | null;
    /**
     * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
    /**
     * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
     */
    nfs?: NFSVolumeSource | null;
    /**
     * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
     */
    persistentVolumeClaim?: PersistentVolumeClaimVolumeSource | null;
    /**
     * Represents a Photon Controller persistent disk resource.
     */
    photonPersistentDisk?: PhotonPersistentDiskVolumeSource | null;
    /**
     * PortworxVolumeSource represents a Portworx volume resource.
     */
    portworxVolume?: PortworxVolumeSource | null;
    /**
     * Represents a projected volume source
     */
    projected?: ProjectedVolumeSource | null;
    /**
     * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
     */
    quobyte?: QuobyteVolumeSource | null;
    /**
     * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
     */
    rbd?: RBDVolumeSource | null;
    /**
     * ScaleIOVolumeSource represents a persistent ScaleIO volume
     */
    scaleIO?: ScaleIOVolumeSource | null;
    /**
     * Adapts a Secret into a volume.The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
     */
    secret?: SecretVolumeSource | null;
    /**
     * Represents a StorageOS persistent volume resource.
     */
    storageos?: StorageOSVolumeSource | null;
    /**
     * Represents a vSphere volume resource.
     */
    vsphereVolume?: VsphereVirtualDiskVolumeSource | null;
}
/**
 * volumeDevice describes a mapping of a raw block device within a container.
 */
export interface VolumeDevice extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * devicePath is the path inside of the container that the device will be mapped to.
     */
    devicePath?: string | null;
    /**
     * name must match the name of a persistentVolumeClaim in the pod
     */
    name?: string | null;
}
/**
 * VolumeMount describes a mounting of a Volume within a container.
 */
export interface VolumeMount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     */
    mountPath?: string | null;
    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     */
    mountPropagation?: string | null;
    /**
     * This must match the Name of a Volume.
     */
    name?: string | null;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean | null;
    /**
     * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.If ReadOnly is false, this field has no meaning and must be unspecified.If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).If this field is not specified, it is treated as an equivalent of Disabled.
     */
    recursiveReadOnly?: string | null;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string | null;
    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     */
    subPathExpr?: string | null;
}
/**
 * VolumeMountStatus shows status of volume mounts.
 */
export interface VolumeMountStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MountPath corresponds to the original VolumeMount.
     */
    mountPath?: string | null;
    /**
     * Name corresponds to the name of the original VolumeMount.
     */
    name?: string | null;
    /**
     * ReadOnly corresponds to the original VolumeMount.
     */
    readOnly?: boolean | null;
    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
     */
    recursiveReadOnly?: string | null;
}
/**
 * VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
 */
export interface VolumeNodeAffinity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
     */
    required?: NodeSelector | null;
}
/**
 * Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.
 */
export interface VolumeProjection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
     */
    clusterTrustBundle?: ClusterTrustBundleProjection | null;
    /**
     * Adapts a ConfigMap into a projected volume.The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
     */
    configMap?: ConfigMapProjection | null;
    /**
     * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
     */
    downwardAPI?: DownwardAPIProjection | null;
    /**
     * Adapts a secret into a projected volume.The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
     */
    secret?: SecretProjection | null;
    /**
     * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
     */
    serviceAccountToken?: ServiceAccountTokenProjection | null;
}
/**
 * VolumeResourceRequirements describes the storage resource requirements for a volume.
 */
export interface VolumeResourceRequirements extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: VolumeResourceRequirements_limits | null;
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: VolumeResourceRequirements_requests | null;
}
/**
 * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 */
export interface VolumeResourceRequirements_limits extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 */
export interface VolumeResourceRequirements_requests extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Represents a vSphere volume resource.
 */
export interface VsphereVirtualDiskVolumeSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string | null;
    /**
     * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
     */
    storagePolicyID?: string | null;
    /**
     * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
     */
    storagePolicyName?: string | null;
    /**
     * volumePath is the path that identifies vSphere volume vmdk
     */
    volumePath?: string | null;
}
/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 */
export interface WeightedPodAffinityTerm extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
     */
    podAffinityTerm?: PodAffinityTerm | null;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
     */
    weight?: number | null;
}
/**
 * WindowsSecurityContextOptions contain Windows-specific options and credentials.
 */
export interface WindowsSecurityContextOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
     */
    gmsaCredentialSpec?: string | null;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string | null;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
     */
    hostProcess?: boolean | null;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUserName?: string | null;
}
/* tslint:enable */
/* eslint-enable */
