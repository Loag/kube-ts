/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeListMeta, serializeObjectMeta, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CrossVersionObjectReference}
 */
// @ts-ignore
export function createCrossVersionObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCrossVersionObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscaler}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscaler;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerList}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerSpec}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerStatus}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Scale}
 */
// @ts-ignore
export function createScaleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScale;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScaleSpec}
 */
// @ts-ignore
export function createScaleSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScaleSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ScaleStatus}
 */
// @ts-ignore
export function createScaleStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoScaleStatus;
}
/**
 * CrossVersionObjectReference contains enough information to let you identify the referred resource.
 */
export interface CrossVersionObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * apiVersion is the API version of the referent
     */
    apiVersion?: string | null;
    /**
     * kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCrossVersionObjectReference(crossVersionObjectReference: Partial<CrossVersionObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { crossVersionObjectReference.apiVersion = n.getStringValue(); },
        "kind": n => { crossVersionObjectReference.kind = n.getStringValue(); },
        "name": n => { crossVersionObjectReference.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscaler(horizontalPodAutoscaler: Partial<HorizontalPodAutoscaler> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { horizontalPodAutoscaler.apiVersion = n.getStringValue(); },
        "kind": n => { horizontalPodAutoscaler.kind = n.getStringValue(); },
        "metadata": n => { horizontalPodAutoscaler.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { horizontalPodAutoscaler.spec = n.getObjectValue<HorizontalPodAutoscalerSpec>(createHorizontalPodAutoscalerSpecFromDiscriminatorValue); },
        "status": n => { horizontalPodAutoscaler.status = n.getObjectValue<HorizontalPodAutoscalerStatus>(createHorizontalPodAutoscalerStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerList(horizontalPodAutoscalerList: Partial<HorizontalPodAutoscalerList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { horizontalPodAutoscalerList.apiVersion = n.getStringValue(); },
        "items": n => { horizontalPodAutoscalerList.items = n.getCollectionOfObjectValues<HorizontalPodAutoscaler>(createHorizontalPodAutoscalerFromDiscriminatorValue); },
        "kind": n => { horizontalPodAutoscalerList.kind = n.getStringValue(); },
        "metadata": n => { horizontalPodAutoscalerList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerSpec(horizontalPodAutoscalerSpec: Partial<HorizontalPodAutoscalerSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "maxReplicas": n => { horizontalPodAutoscalerSpec.maxReplicas = n.getNumberValue(); },
        "minReplicas": n => { horizontalPodAutoscalerSpec.minReplicas = n.getNumberValue(); },
        "scaleTargetRef": n => { horizontalPodAutoscalerSpec.scaleTargetRef = n.getObjectValue<CrossVersionObjectReference>(createCrossVersionObjectReferenceFromDiscriminatorValue); },
        "targetCPUUtilizationPercentage": n => { horizontalPodAutoscalerSpec.targetCPUUtilizationPercentage = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerStatus(horizontalPodAutoscalerStatus: Partial<HorizontalPodAutoscalerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currentCPUUtilizationPercentage": n => { horizontalPodAutoscalerStatus.currentCPUUtilizationPercentage = n.getNumberValue(); },
        "currentReplicas": n => { horizontalPodAutoscalerStatus.currentReplicas = n.getNumberValue(); },
        "desiredReplicas": n => { horizontalPodAutoscalerStatus.desiredReplicas = n.getNumberValue(); },
        "lastScaleTime": n => { horizontalPodAutoscalerStatus.lastScaleTime = n.getDateValue(); },
        "observedGeneration": n => { horizontalPodAutoscalerStatus.observedGeneration = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScale(scale: Partial<Scale> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { scale.apiVersion = n.getStringValue(); },
        "kind": n => { scale.kind = n.getStringValue(); },
        "metadata": n => { scale.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { scale.spec = n.getObjectValue<ScaleSpec>(createScaleSpecFromDiscriminatorValue); },
        "status": n => { scale.status = n.getObjectValue<ScaleStatus>(createScaleStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScaleSpec(scaleSpec: Partial<ScaleSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "replicas": n => { scaleSpec.replicas = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoScaleStatus(scaleStatus: Partial<ScaleStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "replicas": n => { scaleStatus.replicas = n.getNumberValue(); },
        "selector": n => { scaleStatus.selector = n.getStringValue(); },
    }
}
/**
 * configuration of a horizontal pod autoscaler.
 */
export interface HorizontalPodAutoscaler extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * specification of a horizontal pod autoscaler.
     */
    spec?: HorizontalPodAutoscalerSpec | null;
    /**
     * current status of a horizontal pod autoscaler
     */
    status?: HorizontalPodAutoscalerStatus | null;
}
/**
 * list of horizontal pod autoscaler objects.
 */
export interface HorizontalPodAutoscalerList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of horizontal pod autoscaler objects.
     */
    items?: HorizontalPodAutoscaler[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * specification of a horizontal pod autoscaler.
 */
export interface HorizontalPodAutoscalerSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
     */
    maxReplicas?: number | null;
    /**
     * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
     */
    minReplicas?: number | null;
    /**
     * CrossVersionObjectReference contains enough information to let you identify the referred resource.
     */
    scaleTargetRef?: CrossVersionObjectReference | null;
    /**
     * targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
     */
    targetCPUUtilizationPercentage?: number | null;
}
/**
 * current status of a horizontal pod autoscaler
 */
export interface HorizontalPodAutoscalerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
     */
    currentCPUUtilizationPercentage?: number | null;
    /**
     * currentReplicas is the current number of replicas of pods managed by this autoscaler.
     */
    currentReplicas?: number | null;
    /**
     * desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
     */
    desiredReplicas?: number | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastScaleTime?: Date | null;
    /**
     * observedGeneration is the most recent generation observed by this autoscaler.
     */
    observedGeneration?: number | null;
}
/**
 * Scale represents a scaling request for a resource.
 */
export interface Scale extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ScaleSpec describes the attributes of a scale subresource.
     */
    spec?: ScaleSpec | null;
    /**
     * ScaleStatus represents the current status of a scale subresource.
     */
    status?: ScaleStatus | null;
}
/**
 * ScaleSpec describes the attributes of a scale subresource.
 */
export interface ScaleSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * replicas is the desired number of instances for the scaled object.
     */
    replicas?: number | null;
}
/**
 * ScaleStatus represents the current status of a scale subresource.
 */
export interface ScaleStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * replicas is the actual number of observed instances of the scaled object.
     */
    replicas?: number | null;
    /**
     * selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    selector?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCrossVersionObjectReference(writer: SerializationWriter, crossVersionObjectReference: Partial<CrossVersionObjectReference> | undefined | null = {}) : void {
    if (crossVersionObjectReference) {
        writer.writeStringValue("apiVersion", crossVersionObjectReference.apiVersion);
        writer.writeStringValue("kind", crossVersionObjectReference.kind);
        writer.writeStringValue("name", crossVersionObjectReference.name);
        writer.writeAdditionalData(crossVersionObjectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscaler(writer: SerializationWriter, horizontalPodAutoscaler: Partial<HorizontalPodAutoscaler> | undefined | null = {}) : void {
    if (horizontalPodAutoscaler) {
        writer.writeStringValue("apiVersion", horizontalPodAutoscaler.apiVersion);
        writer.writeStringValue("kind", horizontalPodAutoscaler.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", horizontalPodAutoscaler.metadata, serializeObjectMeta);
        writer.writeObjectValue<HorizontalPodAutoscalerSpec>("spec", horizontalPodAutoscaler.spec, serializeHorizontalPodAutoscalerSpec);
        writer.writeObjectValue<HorizontalPodAutoscalerStatus>("status", horizontalPodAutoscaler.status, serializeHorizontalPodAutoscalerStatus);
        writer.writeAdditionalData(horizontalPodAutoscaler.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerList(writer: SerializationWriter, horizontalPodAutoscalerList: Partial<HorizontalPodAutoscalerList> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerList) {
        writer.writeStringValue("apiVersion", horizontalPodAutoscalerList.apiVersion);
        writer.writeCollectionOfObjectValues<HorizontalPodAutoscaler>("items", horizontalPodAutoscalerList.items, serializeHorizontalPodAutoscaler);
        writer.writeStringValue("kind", horizontalPodAutoscalerList.kind);
        writer.writeObjectValue<ListMeta>("metadata", horizontalPodAutoscalerList.metadata, serializeListMeta);
        writer.writeAdditionalData(horizontalPodAutoscalerList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerSpec(writer: SerializationWriter, horizontalPodAutoscalerSpec: Partial<HorizontalPodAutoscalerSpec> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerSpec) {
        writer.writeNumberValue("maxReplicas", horizontalPodAutoscalerSpec.maxReplicas);
        writer.writeNumberValue("minReplicas", horizontalPodAutoscalerSpec.minReplicas);
        writer.writeObjectValue<CrossVersionObjectReference>("scaleTargetRef", horizontalPodAutoscalerSpec.scaleTargetRef, serializeCrossVersionObjectReference);
        writer.writeNumberValue("targetCPUUtilizationPercentage", horizontalPodAutoscalerSpec.targetCPUUtilizationPercentage);
        writer.writeAdditionalData(horizontalPodAutoscalerSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerStatus(writer: SerializationWriter, horizontalPodAutoscalerStatus: Partial<HorizontalPodAutoscalerStatus> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerStatus) {
        writer.writeNumberValue("currentCPUUtilizationPercentage", horizontalPodAutoscalerStatus.currentCPUUtilizationPercentage);
        writer.writeNumberValue("currentReplicas", horizontalPodAutoscalerStatus.currentReplicas);
        writer.writeNumberValue("desiredReplicas", horizontalPodAutoscalerStatus.desiredReplicas);
        writer.writeDateValue("lastScaleTime", horizontalPodAutoscalerStatus.lastScaleTime);
        writer.writeNumberValue("observedGeneration", horizontalPodAutoscalerStatus.observedGeneration);
        writer.writeAdditionalData(horizontalPodAutoscalerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScale(writer: SerializationWriter, scale: Partial<Scale> | undefined | null = {}) : void {
    if (scale) {
        writer.writeStringValue("apiVersion", scale.apiVersion);
        writer.writeStringValue("kind", scale.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", scale.metadata, serializeObjectMeta);
        writer.writeObjectValue<ScaleSpec>("spec", scale.spec, serializeScaleSpec);
        writer.writeObjectValue<ScaleStatus>("status", scale.status, serializeScaleStatus);
        writer.writeAdditionalData(scale.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScaleSpec(writer: SerializationWriter, scaleSpec: Partial<ScaleSpec> | undefined | null = {}) : void {
    if (scaleSpec) {
        writer.writeNumberValue("replicas", scaleSpec.replicas);
        writer.writeAdditionalData(scaleSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeScaleStatus(writer: SerializationWriter, scaleStatus: Partial<ScaleStatus> | undefined | null = {}) : void {
    if (scaleStatus) {
        writer.writeNumberValue("replicas", scaleStatus.replicas);
        writer.writeStringValue("selector", scaleStatus.selector);
        writer.writeAdditionalData(scaleStatus.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
