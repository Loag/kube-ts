/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
 */
export interface ContainerResourceMetricSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * container is the name of the container in the pods of the scaling target
     */
    container?: string | null;
    /**
     * name is the name of the resource in question.
     */
    name?: string | null;
    /**
     * MetricTarget defines the target value, average value, or average utilization of a specific metric
     */
    target?: MetricTarget | null;
}
/**
 * ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
 */
export interface ContainerResourceMetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * container is the name of the container in the pods of the scaling target
     */
    container?: string | null;
    /**
     * MetricValueStatus holds the current value for a metric
     */
    current?: MetricValueStatus | null;
    /**
     * name is the name of the resource in question.
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerResourceMetricSource}
 */
// @ts-ignore
export function createContainerResourceMetricSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerResourceMetricSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ContainerResourceMetricStatus}
 */
// @ts-ignore
export function createContainerResourceMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContainerResourceMetricStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CrossVersionObjectReference}
 */
// @ts-ignore
export function createCrossVersionObjectReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCrossVersionObjectReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExternalMetricSource}
 */
// @ts-ignore
export function createExternalMetricSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExternalMetricSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExternalMetricStatus}
 */
// @ts-ignore
export function createExternalMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExternalMetricStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerBehavior}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerBehaviorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerBehavior;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerCondition}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscaler}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscaler;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerList}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerSpec}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HorizontalPodAutoscalerStatus}
 */
// @ts-ignore
export function createHorizontalPodAutoscalerStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHorizontalPodAutoscalerStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HPAScalingPolicy}
 */
// @ts-ignore
export function createHPAScalingPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHPAScalingPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HPAScalingRules}
 */
// @ts-ignore
export function createHPAScalingRulesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHPAScalingRules;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MetricIdentifier}
 */
// @ts-ignore
export function createMetricIdentifierFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMetricIdentifier;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MetricSpec}
 */
// @ts-ignore
export function createMetricSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMetricSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MetricStatus}
 */
// @ts-ignore
export function createMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMetricStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MetricTarget}
 */
// @ts-ignore
export function createMetricTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMetricTarget;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MetricValueStatus}
 */
// @ts-ignore
export function createMetricValueStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMetricValueStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectMetricSource}
 */
// @ts-ignore
export function createObjectMetricSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectMetricSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectMetricStatus}
 */
// @ts-ignore
export function createObjectMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectMetricStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodsMetricSource}
 */
// @ts-ignore
export function createPodsMetricSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodsMetricSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodsMetricStatus}
 */
// @ts-ignore
export function createPodsMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodsMetricStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceMetricSource}
 */
// @ts-ignore
export function createResourceMetricSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceMetricSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceMetricStatus}
 */
// @ts-ignore
export function createResourceMetricStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceMetricStatus;
}
/**
 * CrossVersionObjectReference contains enough information to let you identify the referred resource.
 */
export interface CrossVersionObjectReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * apiVersion is the API version of the referent
     */
    apiVersion?: string | null;
    /**
     * kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerResourceMetricSource(containerResourceMetricSource: Partial<ContainerResourceMetricSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "container": n => { containerResourceMetricSource.container = n.getStringValue(); },
        "name": n => { containerResourceMetricSource.name = n.getStringValue(); },
        "target": n => { containerResourceMetricSource.target = n.getObjectValue<MetricTarget>(createMetricTargetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoContainerResourceMetricStatus(containerResourceMetricStatus: Partial<ContainerResourceMetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "container": n => { containerResourceMetricStatus.container = n.getStringValue(); },
        "current": n => { containerResourceMetricStatus.current = n.getObjectValue<MetricValueStatus>(createMetricValueStatusFromDiscriminatorValue); },
        "name": n => { containerResourceMetricStatus.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCrossVersionObjectReference(crossVersionObjectReference: Partial<CrossVersionObjectReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { crossVersionObjectReference.apiVersion = n.getStringValue(); },
        "kind": n => { crossVersionObjectReference.kind = n.getStringValue(); },
        "name": n => { crossVersionObjectReference.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExternalMetricSource(externalMetricSource: Partial<ExternalMetricSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "metric": n => { externalMetricSource.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
        "target": n => { externalMetricSource.target = n.getObjectValue<MetricTarget>(createMetricTargetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExternalMetricStatus(externalMetricStatus: Partial<ExternalMetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "current": n => { externalMetricStatus.current = n.getObjectValue<MetricValueStatus>(createMetricValueStatusFromDiscriminatorValue); },
        "metric": n => { externalMetricStatus.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscaler(horizontalPodAutoscaler: Partial<HorizontalPodAutoscaler> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { horizontalPodAutoscaler.apiVersion = n.getStringValue(); },
        "kind": n => { horizontalPodAutoscaler.kind = n.getStringValue(); },
        "metadata": n => { horizontalPodAutoscaler.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { horizontalPodAutoscaler.spec = n.getObjectValue<HorizontalPodAutoscalerSpec>(createHorizontalPodAutoscalerSpecFromDiscriminatorValue); },
        "status": n => { horizontalPodAutoscaler.status = n.getObjectValue<HorizontalPodAutoscalerStatus>(createHorizontalPodAutoscalerStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerBehavior(horizontalPodAutoscalerBehavior: Partial<HorizontalPodAutoscalerBehavior> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "scaleDown": n => { horizontalPodAutoscalerBehavior.scaleDown = n.getObjectValue<HPAScalingRules>(createHPAScalingRulesFromDiscriminatorValue); },
        "scaleUp": n => { horizontalPodAutoscalerBehavior.scaleUp = n.getObjectValue<HPAScalingRules>(createHPAScalingRulesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerCondition(horizontalPodAutoscalerCondition: Partial<HorizontalPodAutoscalerCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { horizontalPodAutoscalerCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { horizontalPodAutoscalerCondition.message = n.getStringValue(); },
        "reason": n => { horizontalPodAutoscalerCondition.reason = n.getStringValue(); },
        "status": n => { horizontalPodAutoscalerCondition.status = n.getStringValue(); },
        "type": n => { horizontalPodAutoscalerCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerList(horizontalPodAutoscalerList: Partial<HorizontalPodAutoscalerList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { horizontalPodAutoscalerList.apiVersion = n.getStringValue(); },
        "items": n => { horizontalPodAutoscalerList.items = n.getCollectionOfObjectValues<HorizontalPodAutoscaler>(createHorizontalPodAutoscalerFromDiscriminatorValue); },
        "kind": n => { horizontalPodAutoscalerList.kind = n.getStringValue(); },
        "metadata": n => { horizontalPodAutoscalerList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerSpec(horizontalPodAutoscalerSpec: Partial<HorizontalPodAutoscalerSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "behavior": n => { horizontalPodAutoscalerSpec.behavior = n.getObjectValue<HorizontalPodAutoscalerBehavior>(createHorizontalPodAutoscalerBehaviorFromDiscriminatorValue); },
        "maxReplicas": n => { horizontalPodAutoscalerSpec.maxReplicas = n.getNumberValue(); },
        "metrics": n => { horizontalPodAutoscalerSpec.metrics = n.getCollectionOfObjectValues<MetricSpec>(createMetricSpecFromDiscriminatorValue); },
        "minReplicas": n => { horizontalPodAutoscalerSpec.minReplicas = n.getNumberValue(); },
        "scaleTargetRef": n => { horizontalPodAutoscalerSpec.scaleTargetRef = n.getObjectValue<CrossVersionObjectReference>(createCrossVersionObjectReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHorizontalPodAutoscalerStatus(horizontalPodAutoscalerStatus: Partial<HorizontalPodAutoscalerStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { horizontalPodAutoscalerStatus.conditions = n.getCollectionOfObjectValues<HorizontalPodAutoscalerCondition>(createHorizontalPodAutoscalerConditionFromDiscriminatorValue); },
        "currentMetrics": n => { horizontalPodAutoscalerStatus.currentMetrics = n.getCollectionOfObjectValues<MetricStatus>(createMetricStatusFromDiscriminatorValue); },
        "currentReplicas": n => { horizontalPodAutoscalerStatus.currentReplicas = n.getNumberValue(); },
        "desiredReplicas": n => { horizontalPodAutoscalerStatus.desiredReplicas = n.getNumberValue(); },
        "lastScaleTime": n => { horizontalPodAutoscalerStatus.lastScaleTime = n.getDateValue(); },
        "observedGeneration": n => { horizontalPodAutoscalerStatus.observedGeneration = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHPAScalingPolicy(hPAScalingPolicy: Partial<HPAScalingPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "periodSeconds": n => { hPAScalingPolicy.periodSeconds = n.getNumberValue(); },
        "type": n => { hPAScalingPolicy.type = n.getStringValue(); },
        "value": n => { hPAScalingPolicy.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHPAScalingRules(hPAScalingRules: Partial<HPAScalingRules> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "policies": n => { hPAScalingRules.policies = n.getCollectionOfObjectValues<HPAScalingPolicy>(createHPAScalingPolicyFromDiscriminatorValue); },
        "selectPolicy": n => { hPAScalingRules.selectPolicy = n.getStringValue(); },
        "stabilizationWindowSeconds": n => { hPAScalingRules.stabilizationWindowSeconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMetricIdentifier(metricIdentifier: Partial<MetricIdentifier> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { metricIdentifier.name = n.getStringValue(); },
        "selector": n => { metricIdentifier.selector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMetricSpec(metricSpec: Partial<MetricSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "containerResource": n => { metricSpec.containerResource = n.getObjectValue<ContainerResourceMetricSource>(createContainerResourceMetricSourceFromDiscriminatorValue); },
        "external": n => { metricSpec.external = n.getObjectValue<ExternalMetricSource>(createExternalMetricSourceFromDiscriminatorValue); },
        "object": n => { metricSpec.object = n.getObjectValue<ObjectMetricSource>(createObjectMetricSourceFromDiscriminatorValue); },
        "pods": n => { metricSpec.pods = n.getObjectValue<PodsMetricSource>(createPodsMetricSourceFromDiscriminatorValue); },
        "resource": n => { metricSpec.resource = n.getObjectValue<ResourceMetricSource>(createResourceMetricSourceFromDiscriminatorValue); },
        "type": n => { metricSpec.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMetricStatus(metricStatus: Partial<MetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "containerResource": n => { metricStatus.containerResource = n.getObjectValue<ContainerResourceMetricStatus>(createContainerResourceMetricStatusFromDiscriminatorValue); },
        "external": n => { metricStatus.external = n.getObjectValue<ExternalMetricStatus>(createExternalMetricStatusFromDiscriminatorValue); },
        "object": n => { metricStatus.object = n.getObjectValue<ObjectMetricStatus>(createObjectMetricStatusFromDiscriminatorValue); },
        "pods": n => { metricStatus.pods = n.getObjectValue<PodsMetricStatus>(createPodsMetricStatusFromDiscriminatorValue); },
        "resource": n => { metricStatus.resource = n.getObjectValue<ResourceMetricStatus>(createResourceMetricStatusFromDiscriminatorValue); },
        "type": n => { metricStatus.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMetricTarget(metricTarget: Partial<MetricTarget> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "averageUtilization": n => { metricTarget.averageUtilization = n.getNumberValue(); },
        "averageValue": n => { metricTarget.averageValue = n.getStringValue(); },
        "type": n => { metricTarget.type = n.getStringValue(); },
        "value": n => { metricTarget.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMetricValueStatus(metricValueStatus: Partial<MetricValueStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "averageUtilization": n => { metricValueStatus.averageUtilization = n.getNumberValue(); },
        "averageValue": n => { metricValueStatus.averageValue = n.getStringValue(); },
        "value": n => { metricValueStatus.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectMetricSource(objectMetricSource: Partial<ObjectMetricSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "describedObject": n => { objectMetricSource.describedObject = n.getObjectValue<CrossVersionObjectReference>(createCrossVersionObjectReferenceFromDiscriminatorValue); },
        "metric": n => { objectMetricSource.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
        "target": n => { objectMetricSource.target = n.getObjectValue<MetricTarget>(createMetricTargetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectMetricStatus(objectMetricStatus: Partial<ObjectMetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "current": n => { objectMetricStatus.current = n.getObjectValue<MetricValueStatus>(createMetricValueStatusFromDiscriminatorValue); },
        "describedObject": n => { objectMetricStatus.describedObject = n.getObjectValue<CrossVersionObjectReference>(createCrossVersionObjectReferenceFromDiscriminatorValue); },
        "metric": n => { objectMetricStatus.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodsMetricSource(podsMetricSource: Partial<PodsMetricSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "metric": n => { podsMetricSource.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
        "target": n => { podsMetricSource.target = n.getObjectValue<MetricTarget>(createMetricTargetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodsMetricStatus(podsMetricStatus: Partial<PodsMetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "current": n => { podsMetricStatus.current = n.getObjectValue<MetricValueStatus>(createMetricValueStatusFromDiscriminatorValue); },
        "metric": n => { podsMetricStatus.metric = n.getObjectValue<MetricIdentifier>(createMetricIdentifierFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceMetricSource(resourceMetricSource: Partial<ResourceMetricSource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { resourceMetricSource.name = n.getStringValue(); },
        "target": n => { resourceMetricSource.target = n.getObjectValue<MetricTarget>(createMetricTargetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceMetricStatus(resourceMetricStatus: Partial<ResourceMetricStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "current": n => { resourceMetricStatus.current = n.getObjectValue<MetricValueStatus>(createMetricValueStatusFromDiscriminatorValue); },
        "name": n => { resourceMetricStatus.name = n.getStringValue(); },
    }
}
/**
 * ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
 */
export interface ExternalMetricSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
    /**
     * MetricTarget defines the target value, average value, or average utilization of a specific metric
     */
    target?: MetricTarget | null;
}
/**
 * ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
 */
export interface ExternalMetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricValueStatus holds the current value for a metric
     */
    current?: MetricValueStatus | null;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
}
/**
 * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
 */
export interface HorizontalPodAutoscaler extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
     */
    spec?: HorizontalPodAutoscalerSpec | null;
    /**
     * HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
     */
    status?: HorizontalPodAutoscalerStatus | null;
}
/**
 * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
 */
export interface HorizontalPodAutoscalerBehavior extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
     */
    scaleDown?: HPAScalingRules | null;
    /**
     * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
     */
    scaleUp?: HPAScalingRules | null;
}
/**
 * HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
 */
export interface HorizontalPodAutoscalerCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * message is a human-readable explanation containing details about the transition
     */
    message?: string | null;
    /**
     * reason is the reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * status is the status of the condition (True, False, Unknown)
     */
    status?: string | null;
    /**
     * type describes the current condition
     */
    type?: string | null;
}
/**
 * HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
 */
export interface HorizontalPodAutoscalerList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is the list of horizontal pod autoscaler objects.
     */
    items?: HorizontalPodAutoscaler[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
 */
export interface HorizontalPodAutoscalerSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
     */
    behavior?: HorizontalPodAutoscalerBehavior | null;
    /**
     * maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
     */
    maxReplicas?: number | null;
    /**
     * metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
     */
    metrics?: MetricSpec[] | null;
    /**
     * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
     */
    minReplicas?: number | null;
    /**
     * CrossVersionObjectReference contains enough information to let you identify the referred resource.
     */
    scaleTargetRef?: CrossVersionObjectReference | null;
}
/**
 * HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
 */
export interface HorizontalPodAutoscalerStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
     */
    conditions?: HorizontalPodAutoscalerCondition[] | null;
    /**
     * currentMetrics is the last read state of the metrics used by this autoscaler.
     */
    currentMetrics?: MetricStatus[] | null;
    /**
     * currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
     */
    currentReplicas?: number | null;
    /**
     * desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
     */
    desiredReplicas?: number | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastScaleTime?: Date | null;
    /**
     * observedGeneration is the most recent generation observed by this autoscaler.
     */
    observedGeneration?: number | null;
}
/**
 * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
 */
export interface HPAScalingPolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds?: number | null;
    /**
     * type is used to specify the scaling policy.
     */
    type?: string | null;
    /**
     * value contains the amount of change which is permitted by the policy. It must be greater than zero
     */
    value?: number | null;
}
/**
 * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
 */
export interface HPAScalingRules extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
     */
    policies?: HPAScalingPolicy[] | null;
    /**
     * selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string | null;
    /**
     * stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number | null;
}
/**
 * MetricIdentifier defines the name and optionally selector for a metric
 */
export interface MetricIdentifier extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is the name of the given metric
     */
    name?: string | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    selector?: LabelSelector | null;
}
/**
 * MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
 */
export interface MetricSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
     */
    containerResource?: ContainerResourceMetricSource | null;
    /**
     * ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
     */
    external?: ExternalMetricSource | null;
    /**
     * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
     */
    object?: ObjectMetricSource | null;
    /**
     * PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
     */
    pods?: PodsMetricSource | null;
    /**
     * ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
     */
    resource?: ResourceMetricSource | null;
    /**
     * type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object.
     */
    type?: string | null;
}
/**
 * MetricStatus describes the last-read state of a single metric.
 */
export interface MetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
     */
    containerResource?: ContainerResourceMetricStatus | null;
    /**
     * ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
     */
    external?: ExternalMetricStatus | null;
    /**
     * ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
     */
    object?: ObjectMetricStatus | null;
    /**
     * PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
     */
    pods?: PodsMetricStatus | null;
    /**
     * ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
     */
    resource?: ResourceMetricStatus | null;
    /**
     * type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
     */
    type?: string | null;
}
/**
 * MetricTarget defines the target value, average value, or average utilization of a specific metric
 */
export interface MetricTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    averageValue?: string | null;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    value?: string | null;
}
/**
 * MetricValueStatus holds the current value for a metric
 */
export interface MetricValueStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
     */
    averageUtilization?: number | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    averageValue?: string | null;
    /**
     * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.The serialization format is:``` <quantity>        ::= <signedNumber><suffix>(Note that <suffix> may be empty, from the "" case in <decimalSI>.)<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)<decimalSI>       ::= m | "" | k | M | G | T | P | E(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.The sign will be omitted unless the number is negative.Examples:- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
     */
    value?: string | null;
}
/**
 * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
 */
export interface ObjectMetricSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * CrossVersionObjectReference contains enough information to let you identify the referred resource.
     */
    describedObject?: CrossVersionObjectReference | null;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
    /**
     * MetricTarget defines the target value, average value, or average utilization of a specific metric
     */
    target?: MetricTarget | null;
}
/**
 * ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
 */
export interface ObjectMetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricValueStatus holds the current value for a metric
     */
    current?: MetricValueStatus | null;
    /**
     * CrossVersionObjectReference contains enough information to let you identify the referred resource.
     */
    describedObject?: CrossVersionObjectReference | null;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
}
/**
 * PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
 */
export interface PodsMetricSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
    /**
     * MetricTarget defines the target value, average value, or average utilization of a specific metric
     */
    target?: MetricTarget | null;
}
/**
 * PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
 */
export interface PodsMetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricValueStatus holds the current value for a metric
     */
    current?: MetricValueStatus | null;
    /**
     * MetricIdentifier defines the name and optionally selector for a metric
     */
    metric?: MetricIdentifier | null;
}
/**
 * ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
 */
export interface ResourceMetricSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is the name of the resource in question.
     */
    name?: string | null;
    /**
     * MetricTarget defines the target value, average value, or average utilization of a specific metric
     */
    target?: MetricTarget | null;
}
/**
 * ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
 */
export interface ResourceMetricStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MetricValueStatus holds the current value for a metric
     */
    current?: MetricValueStatus | null;
    /**
     * name is the name of the resource in question.
     */
    name?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerResourceMetricSource(writer: SerializationWriter, containerResourceMetricSource: Partial<ContainerResourceMetricSource> | undefined | null = {}) : void {
    if (containerResourceMetricSource) {
        writer.writeStringValue("container", containerResourceMetricSource.container);
        writer.writeStringValue("name", containerResourceMetricSource.name);
        writer.writeObjectValue<MetricTarget>("target", containerResourceMetricSource.target, serializeMetricTarget);
        writer.writeAdditionalData(containerResourceMetricSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeContainerResourceMetricStatus(writer: SerializationWriter, containerResourceMetricStatus: Partial<ContainerResourceMetricStatus> | undefined | null = {}) : void {
    if (containerResourceMetricStatus) {
        writer.writeStringValue("container", containerResourceMetricStatus.container);
        writer.writeObjectValue<MetricValueStatus>("current", containerResourceMetricStatus.current, serializeMetricValueStatus);
        writer.writeStringValue("name", containerResourceMetricStatus.name);
        writer.writeAdditionalData(containerResourceMetricStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCrossVersionObjectReference(writer: SerializationWriter, crossVersionObjectReference: Partial<CrossVersionObjectReference> | undefined | null = {}) : void {
    if (crossVersionObjectReference) {
        writer.writeStringValue("apiVersion", crossVersionObjectReference.apiVersion);
        writer.writeStringValue("kind", crossVersionObjectReference.kind);
        writer.writeStringValue("name", crossVersionObjectReference.name);
        writer.writeAdditionalData(crossVersionObjectReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExternalMetricSource(writer: SerializationWriter, externalMetricSource: Partial<ExternalMetricSource> | undefined | null = {}) : void {
    if (externalMetricSource) {
        writer.writeObjectValue<MetricIdentifier>("metric", externalMetricSource.metric, serializeMetricIdentifier);
        writer.writeObjectValue<MetricTarget>("target", externalMetricSource.target, serializeMetricTarget);
        writer.writeAdditionalData(externalMetricSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExternalMetricStatus(writer: SerializationWriter, externalMetricStatus: Partial<ExternalMetricStatus> | undefined | null = {}) : void {
    if (externalMetricStatus) {
        writer.writeObjectValue<MetricValueStatus>("current", externalMetricStatus.current, serializeMetricValueStatus);
        writer.writeObjectValue<MetricIdentifier>("metric", externalMetricStatus.metric, serializeMetricIdentifier);
        writer.writeAdditionalData(externalMetricStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscaler(writer: SerializationWriter, horizontalPodAutoscaler: Partial<HorizontalPodAutoscaler> | undefined | null = {}) : void {
    if (horizontalPodAutoscaler) {
        writer.writeStringValue("apiVersion", horizontalPodAutoscaler.apiVersion);
        writer.writeStringValue("kind", horizontalPodAutoscaler.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", horizontalPodAutoscaler.metadata, serializeObjectMeta);
        writer.writeObjectValue<HorizontalPodAutoscalerSpec>("spec", horizontalPodAutoscaler.spec, serializeHorizontalPodAutoscalerSpec);
        writer.writeObjectValue<HorizontalPodAutoscalerStatus>("status", horizontalPodAutoscaler.status, serializeHorizontalPodAutoscalerStatus);
        writer.writeAdditionalData(horizontalPodAutoscaler.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerBehavior(writer: SerializationWriter, horizontalPodAutoscalerBehavior: Partial<HorizontalPodAutoscalerBehavior> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerBehavior) {
        writer.writeObjectValue<HPAScalingRules>("scaleDown", horizontalPodAutoscalerBehavior.scaleDown, serializeHPAScalingRules);
        writer.writeObjectValue<HPAScalingRules>("scaleUp", horizontalPodAutoscalerBehavior.scaleUp, serializeHPAScalingRules);
        writer.writeAdditionalData(horizontalPodAutoscalerBehavior.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerCondition(writer: SerializationWriter, horizontalPodAutoscalerCondition: Partial<HorizontalPodAutoscalerCondition> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerCondition) {
        writer.writeDateValue("lastTransitionTime", horizontalPodAutoscalerCondition.lastTransitionTime);
        writer.writeStringValue("message", horizontalPodAutoscalerCondition.message);
        writer.writeStringValue("reason", horizontalPodAutoscalerCondition.reason);
        writer.writeStringValue("status", horizontalPodAutoscalerCondition.status);
        writer.writeStringValue("type", horizontalPodAutoscalerCondition.type);
        writer.writeAdditionalData(horizontalPodAutoscalerCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerList(writer: SerializationWriter, horizontalPodAutoscalerList: Partial<HorizontalPodAutoscalerList> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerList) {
        writer.writeStringValue("apiVersion", horizontalPodAutoscalerList.apiVersion);
        writer.writeCollectionOfObjectValues<HorizontalPodAutoscaler>("items", horizontalPodAutoscalerList.items, serializeHorizontalPodAutoscaler);
        writer.writeStringValue("kind", horizontalPodAutoscalerList.kind);
        writer.writeObjectValue<ListMeta>("metadata", horizontalPodAutoscalerList.metadata, serializeListMeta);
        writer.writeAdditionalData(horizontalPodAutoscalerList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerSpec(writer: SerializationWriter, horizontalPodAutoscalerSpec: Partial<HorizontalPodAutoscalerSpec> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerSpec) {
        writer.writeObjectValue<HorizontalPodAutoscalerBehavior>("behavior", horizontalPodAutoscalerSpec.behavior, serializeHorizontalPodAutoscalerBehavior);
        writer.writeNumberValue("maxReplicas", horizontalPodAutoscalerSpec.maxReplicas);
        writer.writeCollectionOfObjectValues<MetricSpec>("metrics", horizontalPodAutoscalerSpec.metrics, serializeMetricSpec);
        writer.writeNumberValue("minReplicas", horizontalPodAutoscalerSpec.minReplicas);
        writer.writeObjectValue<CrossVersionObjectReference>("scaleTargetRef", horizontalPodAutoscalerSpec.scaleTargetRef, serializeCrossVersionObjectReference);
        writer.writeAdditionalData(horizontalPodAutoscalerSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHorizontalPodAutoscalerStatus(writer: SerializationWriter, horizontalPodAutoscalerStatus: Partial<HorizontalPodAutoscalerStatus> | undefined | null = {}) : void {
    if (horizontalPodAutoscalerStatus) {
        writer.writeCollectionOfObjectValues<HorizontalPodAutoscalerCondition>("conditions", horizontalPodAutoscalerStatus.conditions, serializeHorizontalPodAutoscalerCondition);
        writer.writeCollectionOfObjectValues<MetricStatus>("currentMetrics", horizontalPodAutoscalerStatus.currentMetrics, serializeMetricStatus);
        writer.writeNumberValue("currentReplicas", horizontalPodAutoscalerStatus.currentReplicas);
        writer.writeNumberValue("desiredReplicas", horizontalPodAutoscalerStatus.desiredReplicas);
        writer.writeDateValue("lastScaleTime", horizontalPodAutoscalerStatus.lastScaleTime);
        writer.writeNumberValue("observedGeneration", horizontalPodAutoscalerStatus.observedGeneration);
        writer.writeAdditionalData(horizontalPodAutoscalerStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHPAScalingPolicy(writer: SerializationWriter, hPAScalingPolicy: Partial<HPAScalingPolicy> | undefined | null = {}) : void {
    if (hPAScalingPolicy) {
        writer.writeNumberValue("periodSeconds", hPAScalingPolicy.periodSeconds);
        writer.writeStringValue("type", hPAScalingPolicy.type);
        writer.writeNumberValue("value", hPAScalingPolicy.value);
        writer.writeAdditionalData(hPAScalingPolicy.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHPAScalingRules(writer: SerializationWriter, hPAScalingRules: Partial<HPAScalingRules> | undefined | null = {}) : void {
    if (hPAScalingRules) {
        writer.writeCollectionOfObjectValues<HPAScalingPolicy>("policies", hPAScalingRules.policies, serializeHPAScalingPolicy);
        writer.writeStringValue("selectPolicy", hPAScalingRules.selectPolicy);
        writer.writeNumberValue("stabilizationWindowSeconds", hPAScalingRules.stabilizationWindowSeconds);
        writer.writeAdditionalData(hPAScalingRules.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMetricIdentifier(writer: SerializationWriter, metricIdentifier: Partial<MetricIdentifier> | undefined | null = {}) : void {
    if (metricIdentifier) {
        writer.writeStringValue("name", metricIdentifier.name);
        writer.writeObjectValue<LabelSelector>("selector", metricIdentifier.selector, serializeLabelSelector);
        writer.writeAdditionalData(metricIdentifier.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMetricSpec(writer: SerializationWriter, metricSpec: Partial<MetricSpec> | undefined | null = {}) : void {
    if (metricSpec) {
        writer.writeObjectValue<ContainerResourceMetricSource>("containerResource", metricSpec.containerResource, serializeContainerResourceMetricSource);
        writer.writeObjectValue<ExternalMetricSource>("external", metricSpec.external, serializeExternalMetricSource);
        writer.writeObjectValue<ObjectMetricSource>("object", metricSpec.object, serializeObjectMetricSource);
        writer.writeObjectValue<PodsMetricSource>("pods", metricSpec.pods, serializePodsMetricSource);
        writer.writeObjectValue<ResourceMetricSource>("resource", metricSpec.resource, serializeResourceMetricSource);
        writer.writeStringValue("type", metricSpec.type);
        writer.writeAdditionalData(metricSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMetricStatus(writer: SerializationWriter, metricStatus: Partial<MetricStatus> | undefined | null = {}) : void {
    if (metricStatus) {
        writer.writeObjectValue<ContainerResourceMetricStatus>("containerResource", metricStatus.containerResource, serializeContainerResourceMetricStatus);
        writer.writeObjectValue<ExternalMetricStatus>("external", metricStatus.external, serializeExternalMetricStatus);
        writer.writeObjectValue<ObjectMetricStatus>("object", metricStatus.object, serializeObjectMetricStatus);
        writer.writeObjectValue<PodsMetricStatus>("pods", metricStatus.pods, serializePodsMetricStatus);
        writer.writeObjectValue<ResourceMetricStatus>("resource", metricStatus.resource, serializeResourceMetricStatus);
        writer.writeStringValue("type", metricStatus.type);
        writer.writeAdditionalData(metricStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMetricTarget(writer: SerializationWriter, metricTarget: Partial<MetricTarget> | undefined | null = {}) : void {
    if (metricTarget) {
        writer.writeNumberValue("averageUtilization", metricTarget.averageUtilization);
        writer.writeStringValue("averageValue", metricTarget.averageValue);
        writer.writeStringValue("type", metricTarget.type);
        writer.writeStringValue("value", metricTarget.value);
        writer.writeAdditionalData(metricTarget.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMetricValueStatus(writer: SerializationWriter, metricValueStatus: Partial<MetricValueStatus> | undefined | null = {}) : void {
    if (metricValueStatus) {
        writer.writeNumberValue("averageUtilization", metricValueStatus.averageUtilization);
        writer.writeStringValue("averageValue", metricValueStatus.averageValue);
        writer.writeStringValue("value", metricValueStatus.value);
        writer.writeAdditionalData(metricValueStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectMetricSource(writer: SerializationWriter, objectMetricSource: Partial<ObjectMetricSource> | undefined | null = {}) : void {
    if (objectMetricSource) {
        writer.writeObjectValue<CrossVersionObjectReference>("describedObject", objectMetricSource.describedObject, serializeCrossVersionObjectReference);
        writer.writeObjectValue<MetricIdentifier>("metric", objectMetricSource.metric, serializeMetricIdentifier);
        writer.writeObjectValue<MetricTarget>("target", objectMetricSource.target, serializeMetricTarget);
        writer.writeAdditionalData(objectMetricSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectMetricStatus(writer: SerializationWriter, objectMetricStatus: Partial<ObjectMetricStatus> | undefined | null = {}) : void {
    if (objectMetricStatus) {
        writer.writeObjectValue<MetricValueStatus>("current", objectMetricStatus.current, serializeMetricValueStatus);
        writer.writeObjectValue<CrossVersionObjectReference>("describedObject", objectMetricStatus.describedObject, serializeCrossVersionObjectReference);
        writer.writeObjectValue<MetricIdentifier>("metric", objectMetricStatus.metric, serializeMetricIdentifier);
        writer.writeAdditionalData(objectMetricStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodsMetricSource(writer: SerializationWriter, podsMetricSource: Partial<PodsMetricSource> | undefined | null = {}) : void {
    if (podsMetricSource) {
        writer.writeObjectValue<MetricIdentifier>("metric", podsMetricSource.metric, serializeMetricIdentifier);
        writer.writeObjectValue<MetricTarget>("target", podsMetricSource.target, serializeMetricTarget);
        writer.writeAdditionalData(podsMetricSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodsMetricStatus(writer: SerializationWriter, podsMetricStatus: Partial<PodsMetricStatus> | undefined | null = {}) : void {
    if (podsMetricStatus) {
        writer.writeObjectValue<MetricValueStatus>("current", podsMetricStatus.current, serializeMetricValueStatus);
        writer.writeObjectValue<MetricIdentifier>("metric", podsMetricStatus.metric, serializeMetricIdentifier);
        writer.writeAdditionalData(podsMetricStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceMetricSource(writer: SerializationWriter, resourceMetricSource: Partial<ResourceMetricSource> | undefined | null = {}) : void {
    if (resourceMetricSource) {
        writer.writeStringValue("name", resourceMetricSource.name);
        writer.writeObjectValue<MetricTarget>("target", resourceMetricSource.target, serializeMetricTarget);
        writer.writeAdditionalData(resourceMetricSource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceMetricStatus(writer: SerializationWriter, resourceMetricStatus: Partial<ResourceMetricStatus> | undefined | null = {}) : void {
    if (resourceMetricStatus) {
        writer.writeObjectValue<MetricValueStatus>("current", resourceMetricStatus.current, serializeMetricValueStatus);
        writer.writeStringValue("name", resourceMetricStatus.name);
        writer.writeAdditionalData(resourceMetricStatus.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
