/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeListMeta, serializeObjectMeta, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExemptPriorityLevelConfiguration}
 */
// @ts-ignore
export function createExemptPriorityLevelConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExemptPriorityLevelConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowDistinguisherMethod}
 */
// @ts-ignore
export function createFlowDistinguisherMethodFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowDistinguisherMethod;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowSchemaCondition}
 */
// @ts-ignore
export function createFlowSchemaConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowSchemaCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowSchema}
 */
// @ts-ignore
export function createFlowSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowSchema;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowSchemaList}
 */
// @ts-ignore
export function createFlowSchemaListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowSchemaList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowSchemaSpec}
 */
// @ts-ignore
export function createFlowSchemaSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowSchemaSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FlowSchemaStatus}
 */
// @ts-ignore
export function createFlowSchemaStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFlowSchemaStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GroupSubject}
 */
// @ts-ignore
export function createGroupSubjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGroupSubject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitedPriorityLevelConfiguration}
 */
// @ts-ignore
export function createLimitedPriorityLevelConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitedPriorityLevelConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LimitResponse}
 */
// @ts-ignore
export function createLimitResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLimitResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NonResourcePolicyRule}
 */
// @ts-ignore
export function createNonResourcePolicyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNonResourcePolicyRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyRulesWithSubjects}
 */
// @ts-ignore
export function createPolicyRulesWithSubjectsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPolicyRulesWithSubjects;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfigurationCondition}
 */
// @ts-ignore
export function createPriorityLevelConfigurationConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfigurationCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfiguration}
 */
// @ts-ignore
export function createPriorityLevelConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfigurationList}
 */
// @ts-ignore
export function createPriorityLevelConfigurationListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfigurationList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfigurationReference}
 */
// @ts-ignore
export function createPriorityLevelConfigurationReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfigurationReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfigurationSpec}
 */
// @ts-ignore
export function createPriorityLevelConfigurationSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfigurationSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriorityLevelConfigurationStatus}
 */
// @ts-ignore
export function createPriorityLevelConfigurationStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriorityLevelConfigurationStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueuingConfiguration}
 */
// @ts-ignore
export function createQueuingConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueuingConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourcePolicyRule}
 */
// @ts-ignore
export function createResourcePolicyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourcePolicyRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountSubject}
 */
// @ts-ignore
export function createServiceAccountSubjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountSubject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Subject}
 */
// @ts-ignore
export function createSubjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserSubject}
 */
// @ts-ignore
export function createUserSubjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserSubject;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExemptPriorityLevelConfiguration(exemptPriorityLevelConfiguration: Partial<ExemptPriorityLevelConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lendablePercent": n => { exemptPriorityLevelConfiguration.lendablePercent = n.getNumberValue(); },
        "nominalConcurrencyShares": n => { exemptPriorityLevelConfiguration.nominalConcurrencyShares = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowDistinguisherMethod(flowDistinguisherMethod: Partial<FlowDistinguisherMethod> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "type": n => { flowDistinguisherMethod.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowSchema(flowSchema: Partial<FlowSchema> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { flowSchema.apiVersion = n.getStringValue(); },
        "kind": n => { flowSchema.kind = n.getStringValue(); },
        "metadata": n => { flowSchema.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { flowSchema.spec = n.getObjectValue<FlowSchemaSpec>(createFlowSchemaSpecFromDiscriminatorValue); },
        "status": n => { flowSchema.status = n.getObjectValue<FlowSchemaStatus>(createFlowSchemaStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowSchemaCondition(flowSchemaCondition: Partial<FlowSchemaCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { flowSchemaCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { flowSchemaCondition.message = n.getStringValue(); },
        "reason": n => { flowSchemaCondition.reason = n.getStringValue(); },
        "status": n => { flowSchemaCondition.status = n.getStringValue(); },
        "type": n => { flowSchemaCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowSchemaList(flowSchemaList: Partial<FlowSchemaList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { flowSchemaList.apiVersion = n.getStringValue(); },
        "items": n => { flowSchemaList.items = n.getCollectionOfObjectValues<FlowSchema>(createFlowSchemaFromDiscriminatorValue); },
        "kind": n => { flowSchemaList.kind = n.getStringValue(); },
        "metadata": n => { flowSchemaList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowSchemaSpec(flowSchemaSpec: Partial<FlowSchemaSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "distinguisherMethod": n => { flowSchemaSpec.distinguisherMethod = n.getObjectValue<FlowDistinguisherMethod>(createFlowDistinguisherMethodFromDiscriminatorValue); },
        "matchingPrecedence": n => { flowSchemaSpec.matchingPrecedence = n.getNumberValue(); },
        "priorityLevelConfiguration": n => { flowSchemaSpec.priorityLevelConfiguration = n.getObjectValue<PriorityLevelConfigurationReference>(createPriorityLevelConfigurationReferenceFromDiscriminatorValue); },
        "rules": n => { flowSchemaSpec.rules = n.getCollectionOfObjectValues<PolicyRulesWithSubjects>(createPolicyRulesWithSubjectsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFlowSchemaStatus(flowSchemaStatus: Partial<FlowSchemaStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { flowSchemaStatus.conditions = n.getCollectionOfObjectValues<FlowSchemaCondition>(createFlowSchemaConditionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGroupSubject(groupSubject: Partial<GroupSubject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { groupSubject.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitedPriorityLevelConfiguration(limitedPriorityLevelConfiguration: Partial<LimitedPriorityLevelConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "borrowingLimitPercent": n => { limitedPriorityLevelConfiguration.borrowingLimitPercent = n.getNumberValue(); },
        "lendablePercent": n => { limitedPriorityLevelConfiguration.lendablePercent = n.getNumberValue(); },
        "limitResponse": n => { limitedPriorityLevelConfiguration.limitResponse = n.getObjectValue<LimitResponse>(createLimitResponseFromDiscriminatorValue); },
        "nominalConcurrencyShares": n => { limitedPriorityLevelConfiguration.nominalConcurrencyShares = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLimitResponse(limitResponse: Partial<LimitResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "queuing": n => { limitResponse.queuing = n.getObjectValue<QueuingConfiguration>(createQueuingConfigurationFromDiscriminatorValue); },
        "type": n => { limitResponse.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNonResourcePolicyRule(nonResourcePolicyRule: Partial<NonResourcePolicyRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nonResourceURLs": n => { nonResourcePolicyRule.nonResourceURLs = n.getCollectionOfPrimitiveValues<string>(); },
        "verbs": n => { nonResourcePolicyRule.verbs = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPolicyRulesWithSubjects(policyRulesWithSubjects: Partial<PolicyRulesWithSubjects> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nonResourceRules": n => { policyRulesWithSubjects.nonResourceRules = n.getCollectionOfObjectValues<NonResourcePolicyRule>(createNonResourcePolicyRuleFromDiscriminatorValue); },
        "resourceRules": n => { policyRulesWithSubjects.resourceRules = n.getCollectionOfObjectValues<ResourcePolicyRule>(createResourcePolicyRuleFromDiscriminatorValue); },
        "subjects": n => { policyRulesWithSubjects.subjects = n.getCollectionOfObjectValues<Subject>(createSubjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfiguration(priorityLevelConfiguration: Partial<PriorityLevelConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { priorityLevelConfiguration.apiVersion = n.getStringValue(); },
        "kind": n => { priorityLevelConfiguration.kind = n.getStringValue(); },
        "metadata": n => { priorityLevelConfiguration.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { priorityLevelConfiguration.spec = n.getObjectValue<PriorityLevelConfigurationSpec>(createPriorityLevelConfigurationSpecFromDiscriminatorValue); },
        "status": n => { priorityLevelConfiguration.status = n.getObjectValue<PriorityLevelConfigurationStatus>(createPriorityLevelConfigurationStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfigurationCondition(priorityLevelConfigurationCondition: Partial<PriorityLevelConfigurationCondition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { priorityLevelConfigurationCondition.lastTransitionTime = n.getDateValue(); },
        "message": n => { priorityLevelConfigurationCondition.message = n.getStringValue(); },
        "reason": n => { priorityLevelConfigurationCondition.reason = n.getStringValue(); },
        "status": n => { priorityLevelConfigurationCondition.status = n.getStringValue(); },
        "type": n => { priorityLevelConfigurationCondition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfigurationList(priorityLevelConfigurationList: Partial<PriorityLevelConfigurationList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { priorityLevelConfigurationList.apiVersion = n.getStringValue(); },
        "items": n => { priorityLevelConfigurationList.items = n.getCollectionOfObjectValues<PriorityLevelConfiguration>(createPriorityLevelConfigurationFromDiscriminatorValue); },
        "kind": n => { priorityLevelConfigurationList.kind = n.getStringValue(); },
        "metadata": n => { priorityLevelConfigurationList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfigurationReference(priorityLevelConfigurationReference: Partial<PriorityLevelConfigurationReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { priorityLevelConfigurationReference.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfigurationSpec(priorityLevelConfigurationSpec: Partial<PriorityLevelConfigurationSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "exempt": n => { priorityLevelConfigurationSpec.exempt = n.getObjectValue<ExemptPriorityLevelConfiguration>(createExemptPriorityLevelConfigurationFromDiscriminatorValue); },
        "limited": n => { priorityLevelConfigurationSpec.limited = n.getObjectValue<LimitedPriorityLevelConfiguration>(createLimitedPriorityLevelConfigurationFromDiscriminatorValue); },
        "type": n => { priorityLevelConfigurationSpec.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriorityLevelConfigurationStatus(priorityLevelConfigurationStatus: Partial<PriorityLevelConfigurationStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { priorityLevelConfigurationStatus.conditions = n.getCollectionOfObjectValues<PriorityLevelConfigurationCondition>(createPriorityLevelConfigurationConditionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueuingConfiguration(queuingConfiguration: Partial<QueuingConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "handSize": n => { queuingConfiguration.handSize = n.getNumberValue(); },
        "queueLengthLimit": n => { queuingConfiguration.queueLengthLimit = n.getNumberValue(); },
        "queues": n => { queuingConfiguration.queues = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourcePolicyRule(resourcePolicyRule: Partial<ResourcePolicyRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroups": n => { resourcePolicyRule.apiGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "clusterScope": n => { resourcePolicyRule.clusterScope = n.getBooleanValue(); },
        "namespaces": n => { resourcePolicyRule.namespaces = n.getCollectionOfPrimitiveValues<string>(); },
        "resources": n => { resourcePolicyRule.resources = n.getCollectionOfPrimitiveValues<string>(); },
        "verbs": n => { resourcePolicyRule.verbs = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountSubject(serviceAccountSubject: Partial<ServiceAccountSubject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { serviceAccountSubject.name = n.getStringValue(); },
        "namespace": n => { serviceAccountSubject.namespace = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubject(subject: Partial<Subject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "group": n => { subject.group = n.getObjectValue<GroupSubject>(createGroupSubjectFromDiscriminatorValue); },
        "kind": n => { subject.kind = n.getStringValue(); },
        "serviceAccount": n => { subject.serviceAccount = n.getObjectValue<ServiceAccountSubject>(createServiceAccountSubjectFromDiscriminatorValue); },
        "user": n => { subject.user = n.getObjectValue<UserSubject>(createUserSubjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserSubject(userSubject: Partial<UserSubject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { userSubject.name = n.getStringValue(); },
    }
}
/**
 * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
 */
export interface ExemptPriorityLevelConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
     */
    lendablePercent?: number | null;
    /**
     * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.
     */
    nominalConcurrencyShares?: number | null;
}
/**
 * FlowDistinguisherMethod specifies the method of a flow distinguisher.
 */
export interface FlowDistinguisherMethod extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
     */
    type?: string | null;
}
/**
 * FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
 */
export interface FlowSchema extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * FlowSchemaSpec describes how the FlowSchema's specification looks like.
     */
    spec?: FlowSchemaSpec | null;
    /**
     * FlowSchemaStatus represents the current state of a FlowSchema.
     */
    status?: FlowSchemaStatus | null;
}
/**
 * FlowSchemaCondition describes conditions for a FlowSchema.
 */
export interface FlowSchemaCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * `message` is a human-readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * `status` is the status of the condition. Can be True, False, Unknown. Required.
     */
    status?: string | null;
    /**
     * `type` is the type of the condition. Required.
     */
    type?: string | null;
}
/**
 * FlowSchemaList is a list of FlowSchema objects.
 */
export interface FlowSchemaList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * `items` is a list of FlowSchemas.
     */
    items?: FlowSchema[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * FlowSchemaSpec describes how the FlowSchema's specification looks like.
 */
export interface FlowSchemaSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * FlowDistinguisherMethod specifies the method of a flow distinguisher.
     */
    distinguisherMethod?: FlowDistinguisherMethod | null;
    /**
     * `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
     */
    matchingPrecedence?: number | null;
    /**
     * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
     */
    priorityLevelConfiguration?: PriorityLevelConfigurationReference | null;
    /**
     * `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
     */
    rules?: PolicyRulesWithSubjects[] | null;
}
/**
 * FlowSchemaStatus represents the current state of a FlowSchema.
 */
export interface FlowSchemaStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `conditions` is a list of the current states of FlowSchema.
     */
    conditions?: FlowSchemaCondition[] | null;
}
/**
 * GroupSubject holds detailed information for group-kind subject.
 */
export interface GroupSubject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
     */
    name?: string | null;
}
/**
 * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  - How are requests for this priority level limited?  - What should be done with requests that exceed the limit?
 */
export interface LimitedPriorityLevelConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
     */
    borrowingLimitPercent?: number | null;
    /**
     * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
     */
    lendablePercent?: number | null;
    /**
     * LimitResponse defines how to handle requests that can not be executed right now.
     */
    limitResponse?: LimitResponse | null;
    /**
     * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.If not specified, this field defaults to a value of 30.Setting this field to zero supports the construction of a "jail" for this priority level that is used to hold some request(s)
     */
    nominalConcurrencyShares?: number | null;
}
/**
 * LimitResponse defines how to handle requests that can not be executed right now.
 */
export interface LimitResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * QueuingConfiguration holds the configuration parameters for queuing
     */
    queuing?: QueuingConfiguration | null;
    /**
     * `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
     */
    type?: string | null;
}
/**
 * NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
 */
export interface NonResourcePolicyRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:  - "/healthz" is legal  - "/hea*" is illegal  - "/hea" is legal but matches nothing  - "/hea//*" also matches nothing  - "/healthz//*" matches all per-component health checks."*" matches all non-resource urls. if it is present, it must be the only entry. Required.
     */
    nonResourceURLs?: string[] | null;
    /**
     * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
     */
    verbs?: string[] | null;
}
/**
 * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
 */
export interface PolicyRulesWithSubjects extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
     */
    nonResourceRules?: NonResourcePolicyRule[] | null;
    /**
     * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
     */
    resourceRules?: ResourcePolicyRule[] | null;
    /**
     * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
     */
    subjects?: Subject[] | null;
}
/**
 * PriorityLevelConfiguration represents the configuration of a priority level.
 */
export interface PriorityLevelConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
     */
    spec?: PriorityLevelConfigurationSpec | null;
    /**
     * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
     */
    status?: PriorityLevelConfigurationStatus | null;
}
/**
 * PriorityLevelConfigurationCondition defines the condition of priority level.
 */
export interface PriorityLevelConfigurationCondition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * `message` is a human-readable message indicating details about last transition.
     */
    message?: string | null;
    /**
     * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
     */
    reason?: string | null;
    /**
     * `status` is the status of the condition. Can be True, False, Unknown. Required.
     */
    status?: string | null;
    /**
     * `type` is the type of the condition. Required.
     */
    type?: string | null;
}
/**
 * PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
 */
export interface PriorityLevelConfigurationList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * `items` is a list of request-priorities.
     */
    items?: PriorityLevelConfiguration[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
 */
export interface PriorityLevelConfigurationReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `name` is the name of the priority level configuration being referenced Required.
     */
    name?: string | null;
}
/**
 * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
 */
export interface PriorityLevelConfigurationSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
     */
    exempt?: ExemptPriorityLevelConfiguration | null;
    /**
     * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  - How are requests for this priority level limited?  - What should be done with requests that exceed the limit?
     */
    limited?: LimitedPriorityLevelConfiguration | null;
    /**
     * `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
     */
    type?: string | null;
}
/**
 * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
 */
export interface PriorityLevelConfigurationStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `conditions` is the current state of "request-priority".
     */
    conditions?: PriorityLevelConfigurationCondition[] | null;
}
/**
 * QueuingConfiguration holds the configuration parameters for queuing
 */
export interface QueuingConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
     */
    handSize?: number | null;
    /**
     * `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
     */
    queueLengthLimit?: number | null;
    /**
     * `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
     */
    queues?: number | null;
}
/**
 * ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
 */
export interface ResourcePolicyRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
     */
    apiGroups?: string[] | null;
    /**
     * `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
     */
    clusterScope?: boolean | null;
    /**
     * `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
     */
    namespaces?: string[] | null;
    /**
     * `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
     */
    resources?: string[] | null;
    /**
     * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
     */
    verbs?: string[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExemptPriorityLevelConfiguration(writer: SerializationWriter, exemptPriorityLevelConfiguration: Partial<ExemptPriorityLevelConfiguration> | undefined | null = {}) : void {
    if (exemptPriorityLevelConfiguration) {
        writer.writeNumberValue("lendablePercent", exemptPriorityLevelConfiguration.lendablePercent);
        writer.writeNumberValue("nominalConcurrencyShares", exemptPriorityLevelConfiguration.nominalConcurrencyShares);
        writer.writeAdditionalData(exemptPriorityLevelConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowDistinguisherMethod(writer: SerializationWriter, flowDistinguisherMethod: Partial<FlowDistinguisherMethod> | undefined | null = {}) : void {
    if (flowDistinguisherMethod) {
        writer.writeStringValue("type", flowDistinguisherMethod.type);
        writer.writeAdditionalData(flowDistinguisherMethod.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowSchema(writer: SerializationWriter, flowSchema: Partial<FlowSchema> | undefined | null = {}) : void {
    if (flowSchema) {
        writer.writeStringValue("apiVersion", flowSchema.apiVersion);
        writer.writeStringValue("kind", flowSchema.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", flowSchema.metadata, serializeObjectMeta);
        writer.writeObjectValue<FlowSchemaSpec>("spec", flowSchema.spec, serializeFlowSchemaSpec);
        writer.writeObjectValue<FlowSchemaStatus>("status", flowSchema.status, serializeFlowSchemaStatus);
        writer.writeAdditionalData(flowSchema.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowSchemaCondition(writer: SerializationWriter, flowSchemaCondition: Partial<FlowSchemaCondition> | undefined | null = {}) : void {
    if (flowSchemaCondition) {
        writer.writeDateValue("lastTransitionTime", flowSchemaCondition.lastTransitionTime);
        writer.writeStringValue("message", flowSchemaCondition.message);
        writer.writeStringValue("reason", flowSchemaCondition.reason);
        writer.writeStringValue("status", flowSchemaCondition.status);
        writer.writeStringValue("type", flowSchemaCondition.type);
        writer.writeAdditionalData(flowSchemaCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowSchemaList(writer: SerializationWriter, flowSchemaList: Partial<FlowSchemaList> | undefined | null = {}) : void {
    if (flowSchemaList) {
        writer.writeStringValue("apiVersion", flowSchemaList.apiVersion);
        writer.writeCollectionOfObjectValues<FlowSchema>("items", flowSchemaList.items, serializeFlowSchema);
        writer.writeStringValue("kind", flowSchemaList.kind);
        writer.writeObjectValue<ListMeta>("metadata", flowSchemaList.metadata, serializeListMeta);
        writer.writeAdditionalData(flowSchemaList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowSchemaSpec(writer: SerializationWriter, flowSchemaSpec: Partial<FlowSchemaSpec> | undefined | null = {}) : void {
    if (flowSchemaSpec) {
        writer.writeObjectValue<FlowDistinguisherMethod>("distinguisherMethod", flowSchemaSpec.distinguisherMethod, serializeFlowDistinguisherMethod);
        writer.writeNumberValue("matchingPrecedence", flowSchemaSpec.matchingPrecedence);
        writer.writeObjectValue<PriorityLevelConfigurationReference>("priorityLevelConfiguration", flowSchemaSpec.priorityLevelConfiguration, serializePriorityLevelConfigurationReference);
        writer.writeCollectionOfObjectValues<PolicyRulesWithSubjects>("rules", flowSchemaSpec.rules, serializePolicyRulesWithSubjects);
        writer.writeAdditionalData(flowSchemaSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFlowSchemaStatus(writer: SerializationWriter, flowSchemaStatus: Partial<FlowSchemaStatus> | undefined | null = {}) : void {
    if (flowSchemaStatus) {
        writer.writeCollectionOfObjectValues<FlowSchemaCondition>("conditions", flowSchemaStatus.conditions, serializeFlowSchemaCondition);
        writer.writeAdditionalData(flowSchemaStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGroupSubject(writer: SerializationWriter, groupSubject: Partial<GroupSubject> | undefined | null = {}) : void {
    if (groupSubject) {
        writer.writeStringValue("name", groupSubject.name);
        writer.writeAdditionalData(groupSubject.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitedPriorityLevelConfiguration(writer: SerializationWriter, limitedPriorityLevelConfiguration: Partial<LimitedPriorityLevelConfiguration> | undefined | null = {}) : void {
    if (limitedPriorityLevelConfiguration) {
        writer.writeNumberValue("borrowingLimitPercent", limitedPriorityLevelConfiguration.borrowingLimitPercent);
        writer.writeNumberValue("lendablePercent", limitedPriorityLevelConfiguration.lendablePercent);
        writer.writeObjectValue<LimitResponse>("limitResponse", limitedPriorityLevelConfiguration.limitResponse, serializeLimitResponse);
        writer.writeNumberValue("nominalConcurrencyShares", limitedPriorityLevelConfiguration.nominalConcurrencyShares);
        writer.writeAdditionalData(limitedPriorityLevelConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLimitResponse(writer: SerializationWriter, limitResponse: Partial<LimitResponse> | undefined | null = {}) : void {
    if (limitResponse) {
        writer.writeObjectValue<QueuingConfiguration>("queuing", limitResponse.queuing, serializeQueuingConfiguration);
        writer.writeStringValue("type", limitResponse.type);
        writer.writeAdditionalData(limitResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNonResourcePolicyRule(writer: SerializationWriter, nonResourcePolicyRule: Partial<NonResourcePolicyRule> | undefined | null = {}) : void {
    if (nonResourcePolicyRule) {
        writer.writeCollectionOfPrimitiveValues<string>("nonResourceURLs", nonResourcePolicyRule.nonResourceURLs);
        writer.writeCollectionOfPrimitiveValues<string>("verbs", nonResourcePolicyRule.verbs);
        writer.writeAdditionalData(nonResourcePolicyRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePolicyRulesWithSubjects(writer: SerializationWriter, policyRulesWithSubjects: Partial<PolicyRulesWithSubjects> | undefined | null = {}) : void {
    if (policyRulesWithSubjects) {
        writer.writeCollectionOfObjectValues<NonResourcePolicyRule>("nonResourceRules", policyRulesWithSubjects.nonResourceRules, serializeNonResourcePolicyRule);
        writer.writeCollectionOfObjectValues<ResourcePolicyRule>("resourceRules", policyRulesWithSubjects.resourceRules, serializeResourcePolicyRule);
        writer.writeCollectionOfObjectValues<Subject>("subjects", policyRulesWithSubjects.subjects, serializeSubject);
        writer.writeAdditionalData(policyRulesWithSubjects.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfiguration(writer: SerializationWriter, priorityLevelConfiguration: Partial<PriorityLevelConfiguration> | undefined | null = {}) : void {
    if (priorityLevelConfiguration) {
        writer.writeStringValue("apiVersion", priorityLevelConfiguration.apiVersion);
        writer.writeStringValue("kind", priorityLevelConfiguration.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", priorityLevelConfiguration.metadata, serializeObjectMeta);
        writer.writeObjectValue<PriorityLevelConfigurationSpec>("spec", priorityLevelConfiguration.spec, serializePriorityLevelConfigurationSpec);
        writer.writeObjectValue<PriorityLevelConfigurationStatus>("status", priorityLevelConfiguration.status, serializePriorityLevelConfigurationStatus);
        writer.writeAdditionalData(priorityLevelConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfigurationCondition(writer: SerializationWriter, priorityLevelConfigurationCondition: Partial<PriorityLevelConfigurationCondition> | undefined | null = {}) : void {
    if (priorityLevelConfigurationCondition) {
        writer.writeDateValue("lastTransitionTime", priorityLevelConfigurationCondition.lastTransitionTime);
        writer.writeStringValue("message", priorityLevelConfigurationCondition.message);
        writer.writeStringValue("reason", priorityLevelConfigurationCondition.reason);
        writer.writeStringValue("status", priorityLevelConfigurationCondition.status);
        writer.writeStringValue("type", priorityLevelConfigurationCondition.type);
        writer.writeAdditionalData(priorityLevelConfigurationCondition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfigurationList(writer: SerializationWriter, priorityLevelConfigurationList: Partial<PriorityLevelConfigurationList> | undefined | null = {}) : void {
    if (priorityLevelConfigurationList) {
        writer.writeStringValue("apiVersion", priorityLevelConfigurationList.apiVersion);
        writer.writeCollectionOfObjectValues<PriorityLevelConfiguration>("items", priorityLevelConfigurationList.items, serializePriorityLevelConfiguration);
        writer.writeStringValue("kind", priorityLevelConfigurationList.kind);
        writer.writeObjectValue<ListMeta>("metadata", priorityLevelConfigurationList.metadata, serializeListMeta);
        writer.writeAdditionalData(priorityLevelConfigurationList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfigurationReference(writer: SerializationWriter, priorityLevelConfigurationReference: Partial<PriorityLevelConfigurationReference> | undefined | null = {}) : void {
    if (priorityLevelConfigurationReference) {
        writer.writeStringValue("name", priorityLevelConfigurationReference.name);
        writer.writeAdditionalData(priorityLevelConfigurationReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfigurationSpec(writer: SerializationWriter, priorityLevelConfigurationSpec: Partial<PriorityLevelConfigurationSpec> | undefined | null = {}) : void {
    if (priorityLevelConfigurationSpec) {
        writer.writeObjectValue<ExemptPriorityLevelConfiguration>("exempt", priorityLevelConfigurationSpec.exempt, serializeExemptPriorityLevelConfiguration);
        writer.writeObjectValue<LimitedPriorityLevelConfiguration>("limited", priorityLevelConfigurationSpec.limited, serializeLimitedPriorityLevelConfiguration);
        writer.writeStringValue("type", priorityLevelConfigurationSpec.type);
        writer.writeAdditionalData(priorityLevelConfigurationSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriorityLevelConfigurationStatus(writer: SerializationWriter, priorityLevelConfigurationStatus: Partial<PriorityLevelConfigurationStatus> | undefined | null = {}) : void {
    if (priorityLevelConfigurationStatus) {
        writer.writeCollectionOfObjectValues<PriorityLevelConfigurationCondition>("conditions", priorityLevelConfigurationStatus.conditions, serializePriorityLevelConfigurationCondition);
        writer.writeAdditionalData(priorityLevelConfigurationStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueuingConfiguration(writer: SerializationWriter, queuingConfiguration: Partial<QueuingConfiguration> | undefined | null = {}) : void {
    if (queuingConfiguration) {
        writer.writeNumberValue("handSize", queuingConfiguration.handSize);
        writer.writeNumberValue("queueLengthLimit", queuingConfiguration.queueLengthLimit);
        writer.writeNumberValue("queues", queuingConfiguration.queues);
        writer.writeAdditionalData(queuingConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourcePolicyRule(writer: SerializationWriter, resourcePolicyRule: Partial<ResourcePolicyRule> | undefined | null = {}) : void {
    if (resourcePolicyRule) {
        writer.writeCollectionOfPrimitiveValues<string>("apiGroups", resourcePolicyRule.apiGroups);
        writer.writeBooleanValue("clusterScope", resourcePolicyRule.clusterScope);
        writer.writeCollectionOfPrimitiveValues<string>("namespaces", resourcePolicyRule.namespaces);
        writer.writeCollectionOfPrimitiveValues<string>("resources", resourcePolicyRule.resources);
        writer.writeCollectionOfPrimitiveValues<string>("verbs", resourcePolicyRule.verbs);
        writer.writeAdditionalData(resourcePolicyRule.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountSubject(writer: SerializationWriter, serviceAccountSubject: Partial<ServiceAccountSubject> | undefined | null = {}) : void {
    if (serviceAccountSubject) {
        writer.writeStringValue("name", serviceAccountSubject.name);
        writer.writeStringValue("namespace", serviceAccountSubject.namespace);
        writer.writeAdditionalData(serviceAccountSubject.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubject(writer: SerializationWriter, subject: Partial<Subject> | undefined | null = {}) : void {
    if (subject) {
        writer.writeObjectValue<GroupSubject>("group", subject.group, serializeGroupSubject);
        writer.writeStringValue("kind", subject.kind);
        writer.writeObjectValue<ServiceAccountSubject>("serviceAccount", subject.serviceAccount, serializeServiceAccountSubject);
        writer.writeObjectValue<UserSubject>("user", subject.user, serializeUserSubject);
        writer.writeAdditionalData(subject.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserSubject(writer: SerializationWriter, userSubject: Partial<UserSubject> | undefined | null = {}) : void {
    if (userSubject) {
        writer.writeStringValue("name", userSubject.name);
        writer.writeAdditionalData(userSubject.additionalData);
    }
}
/**
 * ServiceAccountSubject holds detailed information for service-account-kind subject.
 */
export interface ServiceAccountSubject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
     */
    name?: string | null;
    /**
     * `namespace` is the namespace of matching ServiceAccount objects. Required.
     */
    namespace?: string | null;
}
/**
 * Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
 */
export interface Subject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * GroupSubject holds detailed information for group-kind subject.
     */
    group?: GroupSubject | null;
    /**
     * `kind` indicates which one of the other fields is non-empty. Required
     */
    kind?: string | null;
    /**
     * ServiceAccountSubject holds detailed information for service-account-kind subject.
     */
    serviceAccount?: ServiceAccountSubject | null;
    /**
     * UserSubject holds detailed information for user-kind subject.
     */
    user?: UserSubject | null;
}
/**
 * UserSubject holds detailed information for user-kind subject.
 */
export interface UserSubject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * `name` is the username that matches, or "*" to match all usernames. Required.
     */
    name?: string | null;
}
/* tslint:enable */
/* eslint-enable */
