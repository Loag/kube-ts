/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConditionFromDiscriminatorValue, createDeleteOptionsFromDiscriminatorValue, createLabelSelectorFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeCondition, serializeDeleteOptions, serializeLabelSelector, serializeListMeta, serializeObjectMeta, type Condition, type DeleteOptions, type LabelSelector, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Eviction}
 */
// @ts-ignore
export function createEvictionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEviction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDisruptionBudget}
 */
// @ts-ignore
export function createPodDisruptionBudgetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDisruptionBudget;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDisruptionBudgetList}
 */
// @ts-ignore
export function createPodDisruptionBudgetListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDisruptionBudgetList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDisruptionBudgetSpec}
 */
// @ts-ignore
export function createPodDisruptionBudgetSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDisruptionBudgetSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDisruptionBudgetStatus_disruptedPods}
 */
// @ts-ignore
export function createPodDisruptionBudgetStatus_disruptedPodsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDisruptionBudgetStatus_disruptedPods;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PodDisruptionBudgetStatus}
 */
// @ts-ignore
export function createPodDisruptionBudgetStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPodDisruptionBudgetStatus;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEviction(eviction: Partial<Eviction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { eviction.apiVersion = n.getStringValue(); },
        "deleteOptions": n => { eviction.deleteOptions = n.getObjectValue<DeleteOptions>(createDeleteOptionsFromDiscriminatorValue); },
        "kind": n => { eviction.kind = n.getStringValue(); },
        "metadata": n => { eviction.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDisruptionBudget(podDisruptionBudget: Partial<PodDisruptionBudget> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { podDisruptionBudget.apiVersion = n.getStringValue(); },
        "kind": n => { podDisruptionBudget.kind = n.getStringValue(); },
        "metadata": n => { podDisruptionBudget.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { podDisruptionBudget.spec = n.getObjectValue<PodDisruptionBudgetSpec>(createPodDisruptionBudgetSpecFromDiscriminatorValue); },
        "status": n => { podDisruptionBudget.status = n.getObjectValue<PodDisruptionBudgetStatus>(createPodDisruptionBudgetStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDisruptionBudgetList(podDisruptionBudgetList: Partial<PodDisruptionBudgetList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { podDisruptionBudgetList.apiVersion = n.getStringValue(); },
        "items": n => { podDisruptionBudgetList.items = n.getCollectionOfObjectValues<PodDisruptionBudget>(createPodDisruptionBudgetFromDiscriminatorValue); },
        "kind": n => { podDisruptionBudgetList.kind = n.getStringValue(); },
        "metadata": n => { podDisruptionBudgetList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDisruptionBudgetSpec(podDisruptionBudgetSpec: Partial<PodDisruptionBudgetSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "maxUnavailable": n => { podDisruptionBudgetSpec.maxUnavailable = n.getStringValue(); },
        "minAvailable": n => { podDisruptionBudgetSpec.minAvailable = n.getStringValue(); },
        "selector": n => { podDisruptionBudgetSpec.selector = n.getObjectValue<LabelSelector>(createLabelSelectorFromDiscriminatorValue); },
        "unhealthyPodEvictionPolicy": n => { podDisruptionBudgetSpec.unhealthyPodEvictionPolicy = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDisruptionBudgetStatus(podDisruptionBudgetStatus: Partial<PodDisruptionBudgetStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { podDisruptionBudgetStatus.conditions = n.getCollectionOfObjectValues<Condition>(createConditionFromDiscriminatorValue); },
        "currentHealthy": n => { podDisruptionBudgetStatus.currentHealthy = n.getNumberValue(); },
        "desiredHealthy": n => { podDisruptionBudgetStatus.desiredHealthy = n.getNumberValue(); },
        "disruptedPods": n => { podDisruptionBudgetStatus.disruptedPods = n.getObjectValue<PodDisruptionBudgetStatus_disruptedPods>(createPodDisruptionBudgetStatus_disruptedPodsFromDiscriminatorValue); },
        "disruptionsAllowed": n => { podDisruptionBudgetStatus.disruptionsAllowed = n.getNumberValue(); },
        "expectedPods": n => { podDisruptionBudgetStatus.expectedPods = n.getNumberValue(); },
        "observedGeneration": n => { podDisruptionBudgetStatus.observedGeneration = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPodDisruptionBudgetStatus_disruptedPods(podDisruptionBudgetStatus_disruptedPods: Partial<PodDisruptionBudgetStatus_disruptedPods> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
 */
export interface Eviction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * DeleteOptions may be provided when deleting an API object.
     */
    deleteOptions?: DeleteOptions | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
}
/**
 * PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
 */
export interface PodDisruptionBudget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
     */
    spec?: PodDisruptionBudgetSpec | null;
    /**
     * PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
     */
    status?: PodDisruptionBudgetStatus | null;
}
/**
 * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
 */
export interface PodDisruptionBudgetList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is a list of PodDisruptionBudgets
     */
    items?: PodDisruptionBudget[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
 */
export interface PodDisruptionBudgetSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    maxUnavailable?: string | null;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    minAvailable?: string | null;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    selector?: LabelSelector | null;
    /**
     * UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
     */
    unhealthyPodEvictionPolicy?: string | null;
}
/**
 * PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
 */
export interface PodDisruptionBudgetStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute              the number of allowed disruptions. Therefore no disruptions are              allowed and the status of the condition will be False.- InsufficientPods: The number of pods are either at or below the number                    required by the PodDisruptionBudget. No disruptions are                    allowed and the status of the condition will be False.- SufficientPods: There are more pods than required by the PodDisruptionBudget.                  The condition will be True, and the number of allowed                  disruptions are provided by the disruptionsAllowed property.
     */
    conditions?: Condition[] | null;
    /**
     * current number of healthy pods
     */
    currentHealthy?: number | null;
    /**
     * minimum desired number of healthy pods
     */
    desiredHealthy?: number | null;
    /**
     * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
     */
    disruptedPods?: PodDisruptionBudgetStatus_disruptedPods | null;
    /**
     * Number of pod disruptions that are currently allowed.
     */
    disruptionsAllowed?: number | null;
    /**
     * total number of pods counted by this disruption budget
     */
    expectedPods?: number | null;
    /**
     * Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
     */
    observedGeneration?: number | null;
}
/**
 * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
 */
export interface PodDisruptionBudgetStatus_disruptedPods extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEviction(writer: SerializationWriter, eviction: Partial<Eviction> | undefined | null = {}) : void {
    if (eviction) {
        writer.writeStringValue("apiVersion", eviction.apiVersion);
        writer.writeObjectValue<DeleteOptions>("deleteOptions", eviction.deleteOptions, serializeDeleteOptions);
        writer.writeStringValue("kind", eviction.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", eviction.metadata, serializeObjectMeta);
        writer.writeAdditionalData(eviction.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDisruptionBudget(writer: SerializationWriter, podDisruptionBudget: Partial<PodDisruptionBudget> | undefined | null = {}) : void {
    if (podDisruptionBudget) {
        writer.writeStringValue("apiVersion", podDisruptionBudget.apiVersion);
        writer.writeStringValue("kind", podDisruptionBudget.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", podDisruptionBudget.metadata, serializeObjectMeta);
        writer.writeObjectValue<PodDisruptionBudgetSpec>("spec", podDisruptionBudget.spec, serializePodDisruptionBudgetSpec);
        writer.writeObjectValue<PodDisruptionBudgetStatus>("status", podDisruptionBudget.status, serializePodDisruptionBudgetStatus);
        writer.writeAdditionalData(podDisruptionBudget.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDisruptionBudgetList(writer: SerializationWriter, podDisruptionBudgetList: Partial<PodDisruptionBudgetList> | undefined | null = {}) : void {
    if (podDisruptionBudgetList) {
        writer.writeStringValue("apiVersion", podDisruptionBudgetList.apiVersion);
        writer.writeCollectionOfObjectValues<PodDisruptionBudget>("items", podDisruptionBudgetList.items, serializePodDisruptionBudget);
        writer.writeStringValue("kind", podDisruptionBudgetList.kind);
        writer.writeObjectValue<ListMeta>("metadata", podDisruptionBudgetList.metadata, serializeListMeta);
        writer.writeAdditionalData(podDisruptionBudgetList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDisruptionBudgetSpec(writer: SerializationWriter, podDisruptionBudgetSpec: Partial<PodDisruptionBudgetSpec> | undefined | null = {}) : void {
    if (podDisruptionBudgetSpec) {
        writer.writeStringValue("maxUnavailable", podDisruptionBudgetSpec.maxUnavailable);
        writer.writeStringValue("minAvailable", podDisruptionBudgetSpec.minAvailable);
        writer.writeObjectValue<LabelSelector>("selector", podDisruptionBudgetSpec.selector, serializeLabelSelector);
        writer.writeStringValue("unhealthyPodEvictionPolicy", podDisruptionBudgetSpec.unhealthyPodEvictionPolicy);
        writer.writeAdditionalData(podDisruptionBudgetSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDisruptionBudgetStatus(writer: SerializationWriter, podDisruptionBudgetStatus: Partial<PodDisruptionBudgetStatus> | undefined | null = {}) : void {
    if (podDisruptionBudgetStatus) {
        writer.writeCollectionOfObjectValues<Condition>("conditions", podDisruptionBudgetStatus.conditions, serializeCondition);
        writer.writeNumberValue("currentHealthy", podDisruptionBudgetStatus.currentHealthy);
        writer.writeNumberValue("desiredHealthy", podDisruptionBudgetStatus.desiredHealthy);
        writer.writeObjectValue<PodDisruptionBudgetStatus_disruptedPods>("disruptedPods", podDisruptionBudgetStatus.disruptedPods, serializePodDisruptionBudgetStatus_disruptedPods);
        writer.writeNumberValue("disruptionsAllowed", podDisruptionBudgetStatus.disruptionsAllowed);
        writer.writeNumberValue("expectedPods", podDisruptionBudgetStatus.expectedPods);
        writer.writeNumberValue("observedGeneration", podDisruptionBudgetStatus.observedGeneration);
        writer.writeAdditionalData(podDisruptionBudgetStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePodDisruptionBudgetStatus_disruptedPods(writer: SerializationWriter, podDisruptionBudgetStatus_disruptedPods: Partial<PodDisruptionBudgetStatus_disruptedPods> | undefined | null = {}) : void {
    if (podDisruptionBudgetStatus_disruptedPods) {
        writer.writeAdditionalData(podDisruptionBudgetStatus_disruptedPods.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
