/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createObjectMetaFromDiscriminatorValue, serializeObjectMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { createUserInfoFromDiscriminatorValue, serializeUserInfo, type UserInfo } from '../v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectReview}
 */
// @ts-ignore
export function createSelfSubjectReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SelfSubjectReviewStatus}
 */
// @ts-ignore
export function createSelfSubjectReviewStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSelfSubjectReviewStatus;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectReview(selfSubjectReview: Partial<SelfSubjectReview> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { selfSubjectReview.apiVersion = n.getStringValue(); },
        "kind": n => { selfSubjectReview.kind = n.getStringValue(); },
        "metadata": n => { selfSubjectReview.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "status": n => { selfSubjectReview.status = n.getObjectValue<SelfSubjectReviewStatus>(createSelfSubjectReviewStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSelfSubjectReviewStatus(selfSubjectReviewStatus: Partial<SelfSubjectReviewStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "userInfo": n => { selfSubjectReviewStatus.userInfo = n.getObjectValue<UserInfo>(createUserInfoFromDiscriminatorValue); },
    }
}
/**
 * SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
 */
export interface SelfSubjectReview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
     */
    status?: SelfSubjectReviewStatus | null;
}
/**
 * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
 */
export interface SelfSubjectReviewStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * UserInfo holds the information about the user needed to implement the user.Info interface.
     */
    userInfo?: UserInfo | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectReview(writer: SerializationWriter, selfSubjectReview: Partial<SelfSubjectReview> | undefined | null = {}) : void {
    if (selfSubjectReview) {
        writer.writeStringValue("apiVersion", selfSubjectReview.apiVersion);
        writer.writeStringValue("kind", selfSubjectReview.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", selfSubjectReview.metadata, serializeObjectMeta);
        writer.writeObjectValue<SelfSubjectReviewStatus>("status", selfSubjectReview.status, serializeSelfSubjectReviewStatus);
        writer.writeAdditionalData(selfSubjectReview.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSelfSubjectReviewStatus(writer: SerializationWriter, selfSubjectReviewStatus: Partial<SelfSubjectReviewStatus> | undefined | null = {}) : void {
    if (selfSubjectReviewStatus) {
        writer.writeObjectValue<UserInfo>("userInfo", selfSubjectReviewStatus.userInfo, serializeUserInfo);
        writer.writeAdditionalData(selfSubjectReviewStatus.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
