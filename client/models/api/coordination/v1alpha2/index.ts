/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeListMeta, serializeObjectMeta, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LeaseCandidate}
 */
// @ts-ignore
export function createLeaseCandidateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLeaseCandidate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LeaseCandidateList}
 */
// @ts-ignore
export function createLeaseCandidateListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLeaseCandidateList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LeaseCandidateSpec}
 */
// @ts-ignore
export function createLeaseCandidateSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLeaseCandidateSpec;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLeaseCandidate(leaseCandidate: Partial<LeaseCandidate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { leaseCandidate.apiVersion = n.getStringValue(); },
        "kind": n => { leaseCandidate.kind = n.getStringValue(); },
        "metadata": n => { leaseCandidate.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { leaseCandidate.spec = n.getObjectValue<LeaseCandidateSpec>(createLeaseCandidateSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLeaseCandidateList(leaseCandidateList: Partial<LeaseCandidateList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { leaseCandidateList.apiVersion = n.getStringValue(); },
        "items": n => { leaseCandidateList.items = n.getCollectionOfObjectValues<LeaseCandidate>(createLeaseCandidateFromDiscriminatorValue); },
        "kind": n => { leaseCandidateList.kind = n.getStringValue(); },
        "metadata": n => { leaseCandidateList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLeaseCandidateSpec(leaseCandidateSpec: Partial<LeaseCandidateSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "binaryVersion": n => { leaseCandidateSpec.binaryVersion = n.getStringValue(); },
        "emulationVersion": n => { leaseCandidateSpec.emulationVersion = n.getStringValue(); },
        "leaseName": n => { leaseCandidateSpec.leaseName = n.getStringValue(); },
        "pingTime": n => { leaseCandidateSpec.pingTime = n.getDateValue(); },
        "renewTime": n => { leaseCandidateSpec.renewTime = n.getDateValue(); },
        "strategy": n => { leaseCandidateSpec.strategy = n.getStringValue(); },
    }
}
/**
 * LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
 */
export interface LeaseCandidate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * LeaseCandidateSpec is a specification of a Lease.
     */
    spec?: LeaseCandidateSpec | null;
}
/**
 * LeaseCandidateList is a list of Lease objects.
 */
export interface LeaseCandidateList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * items is a list of schema objects.
     */
    items?: LeaseCandidate[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * LeaseCandidateSpec is a specification of a Lease.
 */
export interface LeaseCandidateSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
     */
    binaryVersion?: string | null;
    /**
     * EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
     */
    emulationVersion?: string | null;
    /**
     * LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
     */
    leaseName?: string | null;
    /**
     * MicroTime is version of Time with microsecond level precision.
     */
    pingTime?: Date | null;
    /**
     * MicroTime is version of Time with microsecond level precision.
     */
    renewTime?: Date | null;
    /**
     * Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
     */
    strategy?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLeaseCandidate(writer: SerializationWriter, leaseCandidate: Partial<LeaseCandidate> | undefined | null = {}) : void {
    if (leaseCandidate) {
        writer.writeStringValue("apiVersion", leaseCandidate.apiVersion);
        writer.writeStringValue("kind", leaseCandidate.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", leaseCandidate.metadata, serializeObjectMeta);
        writer.writeObjectValue<LeaseCandidateSpec>("spec", leaseCandidate.spec, serializeLeaseCandidateSpec);
        writer.writeAdditionalData(leaseCandidate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLeaseCandidateList(writer: SerializationWriter, leaseCandidateList: Partial<LeaseCandidateList> | undefined | null = {}) : void {
    if (leaseCandidateList) {
        writer.writeStringValue("apiVersion", leaseCandidateList.apiVersion);
        writer.writeCollectionOfObjectValues<LeaseCandidate>("items", leaseCandidateList.items, serializeLeaseCandidate);
        writer.writeStringValue("kind", leaseCandidateList.kind);
        writer.writeObjectValue<ListMeta>("metadata", leaseCandidateList.metadata, serializeListMeta);
        writer.writeAdditionalData(leaseCandidateList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLeaseCandidateSpec(writer: SerializationWriter, leaseCandidateSpec: Partial<LeaseCandidateSpec> | undefined | null = {}) : void {
    if (leaseCandidateSpec) {
        writer.writeStringValue("binaryVersion", leaseCandidateSpec.binaryVersion);
        writer.writeStringValue("emulationVersion", leaseCandidateSpec.emulationVersion);
        writer.writeStringValue("leaseName", leaseCandidateSpec.leaseName);
        writer.writeDateValue("pingTime", leaseCandidateSpec.pingTime);
        writer.writeDateValue("renewTime", leaseCandidateSpec.renewTime);
        writer.writeStringValue("strategy", leaseCandidateSpec.strategy);
        writer.writeAdditionalData(leaseCandidateSpec.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
