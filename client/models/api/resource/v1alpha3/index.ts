/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConditionFromDiscriminatorValue, createListMetaFromDiscriminatorValue, createObjectMetaFromDiscriminatorValue, serializeCondition, serializeListMeta, serializeObjectMeta, type Condition, type ListMeta, type ObjectMeta } from '../../../apimachinery/pkg/apis/meta/v1/index.js';
// @ts-ignore
import { createRawExtensionFromDiscriminatorValue, serializeRawExtension, type RawExtension } from '../../../apimachinery/pkg/runtime/index.js';
// @ts-ignore
import { createNodeSelectorFromDiscriminatorValue, serializeNodeSelector, type NodeSelector } from '../../core/v1/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.
 */
export interface AllocatedDeviceStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.
     */
    conditions?: Condition[] | null;
    /**
     * RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.Object `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.RawExtension `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// On the wire, the JSON will look something like this:{"kind":"MyAPIObject","apiVersion":"v1","myPlugin": {"kind":"PluginA","aOption":"foo",},}So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
     */
    data?: RawExtension | null;
    /**
     * Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
     */
    device?: string | null;
    /**
     * Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     */
    driver?: string | null;
    /**
     * NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.
     */
    networkData?: NetworkDeviceData | null;
    /**
     * This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
     */
    pool?: string | null;
}
/**
 * AllocationResult contains attributes of an allocated resource.
 */
export interface AllocationResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * DeviceAllocationResult is the result of allocating devices.
     */
    devices?: DeviceAllocationResult | null;
    /**
     * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
     */
    nodeSelector?: NodeSelector | null;
}
/**
 * BasicDevice defines one device instance.
 */
export interface BasicDevice extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.The maximum number of attributes and capacities combined is 32.
     */
    attributes?: BasicDevice_attributes | null;
    /**
     * Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.The maximum number of attributes and capacities combined is 32.
     */
    capacity?: BasicDevice_capacity | null;
}
/**
 * Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.The maximum number of attributes and capacities combined is 32.
 */
export interface BasicDevice_attributes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.The maximum number of attributes and capacities combined is 32.
 */
export interface BasicDevice_capacity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * CELDeviceSelector contains a CEL expression for selecting a device.
 */
export interface CELDeviceSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.The expression's input is an object named "device", which carries the following properties: - driver (string): the name of the driver which defines this device. - attributes (map[string]object): the device's attributes, grouped by prefix   (e.g. device.attributes["dra.example.com"] evaluates to an object with all   of the attributes which were prefixed by "dra.example.com". - capacity (map[string]object): the device's capacities, grouped by prefix.Example: Consider a device with driver="dra.example.com", which exposes two attributes named "model" and "ext.example.com/family" and which exposes one capacity named "modules". This input to this expression would have the following fields:    device.driver    device.attributes["dra.example.com"].model    device.attributes["ext.example.com"].family    device.capacity["dra.example.com"].modulesThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.A robust expression should check for the existence of attributes before referencing them.For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:    cel.bind(dra, device.attributes["dra.example.com"], dra.someBool && dra.anotherBool)The length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.
     */
    expression?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AllocatedDeviceStatus}
 */
// @ts-ignore
export function createAllocatedDeviceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAllocatedDeviceStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AllocationResult}
 */
// @ts-ignore
export function createAllocationResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAllocationResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BasicDevice_attributes}
 */
// @ts-ignore
export function createBasicDevice_attributesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBasicDevice_attributes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BasicDevice_capacity}
 */
// @ts-ignore
export function createBasicDevice_capacityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBasicDevice_capacity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BasicDevice}
 */
// @ts-ignore
export function createBasicDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBasicDevice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CELDeviceSelector}
 */
// @ts-ignore
export function createCELDeviceSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCELDeviceSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceAllocationConfiguration}
 */
// @ts-ignore
export function createDeviceAllocationConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceAllocationConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceAllocationResult}
 */
// @ts-ignore
export function createDeviceAllocationResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceAllocationResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClaimConfiguration}
 */
// @ts-ignore
export function createDeviceClaimConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClaimConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClaim}
 */
// @ts-ignore
export function createDeviceClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClaim;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClassConfiguration}
 */
// @ts-ignore
export function createDeviceClassConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClassConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClass}
 */
// @ts-ignore
export function createDeviceClassFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClass;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClassList}
 */
// @ts-ignore
export function createDeviceClassListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClassList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceClassSpec}
 */
// @ts-ignore
export function createDeviceClassSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceClassSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceConstraint}
 */
// @ts-ignore
export function createDeviceConstraintFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceConstraint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Device}
 */
// @ts-ignore
export function createDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDevice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceRequestAllocationResult}
 */
// @ts-ignore
export function createDeviceRequestAllocationResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceRequestAllocationResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceRequest}
 */
// @ts-ignore
export function createDeviceRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceSelector}
 */
// @ts-ignore
export function createDeviceSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkDeviceData}
 */
// @ts-ignore
export function createNetworkDeviceDataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkDeviceData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OpaqueDeviceConfiguration}
 */
// @ts-ignore
export function createOpaqueDeviceConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOpaqueDeviceConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimConsumerReference}
 */
// @ts-ignore
export function createResourceClaimConsumerReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimConsumerReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaim}
 */
// @ts-ignore
export function createResourceClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaim;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimList}
 */
// @ts-ignore
export function createResourceClaimListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimSpec}
 */
// @ts-ignore
export function createResourceClaimSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimStatus}
 */
// @ts-ignore
export function createResourceClaimStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimTemplate}
 */
// @ts-ignore
export function createResourceClaimTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimTemplateList}
 */
// @ts-ignore
export function createResourceClaimTemplateListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimTemplateList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceClaimTemplateSpec}
 */
// @ts-ignore
export function createResourceClaimTemplateSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceClaimTemplateSpec;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourcePool}
 */
// @ts-ignore
export function createResourcePoolFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourcePool;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceSlice}
 */
// @ts-ignore
export function createResourceSliceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceSlice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceSliceList}
 */
// @ts-ignore
export function createResourceSliceListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceSliceList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourceSliceSpec}
 */
// @ts-ignore
export function createResourceSliceSpecFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourceSliceSpec;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAllocatedDeviceStatus(allocatedDeviceStatus: Partial<AllocatedDeviceStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { allocatedDeviceStatus.conditions = n.getCollectionOfObjectValues<Condition>(createConditionFromDiscriminatorValue); },
        "data": n => { allocatedDeviceStatus.data = n.getObjectValue<RawExtension>(createRawExtensionFromDiscriminatorValue); },
        "device": n => { allocatedDeviceStatus.device = n.getStringValue(); },
        "driver": n => { allocatedDeviceStatus.driver = n.getStringValue(); },
        "networkData": n => { allocatedDeviceStatus.networkData = n.getObjectValue<NetworkDeviceData>(createNetworkDeviceDataFromDiscriminatorValue); },
        "pool": n => { allocatedDeviceStatus.pool = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAllocationResult(allocationResult: Partial<AllocationResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "devices": n => { allocationResult.devices = n.getObjectValue<DeviceAllocationResult>(createDeviceAllocationResultFromDiscriminatorValue); },
        "nodeSelector": n => { allocationResult.nodeSelector = n.getObjectValue<NodeSelector>(createNodeSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBasicDevice(basicDevice: Partial<BasicDevice> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attributes": n => { basicDevice.attributes = n.getObjectValue<BasicDevice_attributes>(createBasicDevice_attributesFromDiscriminatorValue); },
        "capacity": n => { basicDevice.capacity = n.getObjectValue<BasicDevice_capacity>(createBasicDevice_capacityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBasicDevice_attributes(basicDevice_attributes: Partial<BasicDevice_attributes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBasicDevice_capacity(basicDevice_capacity: Partial<BasicDevice_capacity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCELDeviceSelector(cELDeviceSelector: Partial<CELDeviceSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { cELDeviceSelector.expression = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDevice(device: Partial<Device> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "basic": n => { device.basic = n.getObjectValue<BasicDevice>(createBasicDeviceFromDiscriminatorValue); },
        "name": n => { device.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceAllocationConfiguration(deviceAllocationConfiguration: Partial<DeviceAllocationConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "opaque": n => { deviceAllocationConfiguration.opaque = n.getObjectValue<OpaqueDeviceConfiguration>(createOpaqueDeviceConfigurationFromDiscriminatorValue); },
        "requests": n => { deviceAllocationConfiguration.requests = n.getCollectionOfPrimitiveValues<string>(); },
        "source": n => { deviceAllocationConfiguration.source = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceAllocationResult(deviceAllocationResult: Partial<DeviceAllocationResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "config": n => { deviceAllocationResult.config = n.getCollectionOfObjectValues<DeviceAllocationConfiguration>(createDeviceAllocationConfigurationFromDiscriminatorValue); },
        "results": n => { deviceAllocationResult.results = n.getCollectionOfObjectValues<DeviceRequestAllocationResult>(createDeviceRequestAllocationResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClaim(deviceClaim: Partial<DeviceClaim> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "config": n => { deviceClaim.config = n.getCollectionOfObjectValues<DeviceClaimConfiguration>(createDeviceClaimConfigurationFromDiscriminatorValue); },
        "constraints": n => { deviceClaim.constraints = n.getCollectionOfObjectValues<DeviceConstraint>(createDeviceConstraintFromDiscriminatorValue); },
        "requests": n => { deviceClaim.requests = n.getCollectionOfObjectValues<DeviceRequest>(createDeviceRequestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClaimConfiguration(deviceClaimConfiguration: Partial<DeviceClaimConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "opaque": n => { deviceClaimConfiguration.opaque = n.getObjectValue<OpaqueDeviceConfiguration>(createOpaqueDeviceConfigurationFromDiscriminatorValue); },
        "requests": n => { deviceClaimConfiguration.requests = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClass(deviceClass: Partial<DeviceClass> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { deviceClass.apiVersion = n.getStringValue(); },
        "kind": n => { deviceClass.kind = n.getStringValue(); },
        "metadata": n => { deviceClass.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { deviceClass.spec = n.getObjectValue<DeviceClassSpec>(createDeviceClassSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClassConfiguration(deviceClassConfiguration: Partial<DeviceClassConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "opaque": n => { deviceClassConfiguration.opaque = n.getObjectValue<OpaqueDeviceConfiguration>(createOpaqueDeviceConfigurationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClassList(deviceClassList: Partial<DeviceClassList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { deviceClassList.apiVersion = n.getStringValue(); },
        "items": n => { deviceClassList.items = n.getCollectionOfObjectValues<DeviceClass>(createDeviceClassFromDiscriminatorValue); },
        "kind": n => { deviceClassList.kind = n.getStringValue(); },
        "metadata": n => { deviceClassList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceClassSpec(deviceClassSpec: Partial<DeviceClassSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "config": n => { deviceClassSpec.config = n.getCollectionOfObjectValues<DeviceClassConfiguration>(createDeviceClassConfigurationFromDiscriminatorValue); },
        "selectors": n => { deviceClassSpec.selectors = n.getCollectionOfObjectValues<DeviceSelector>(createDeviceSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceConstraint(deviceConstraint: Partial<DeviceConstraint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchAttribute": n => { deviceConstraint.matchAttribute = n.getStringValue(); },
        "requests": n => { deviceConstraint.requests = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceRequest(deviceRequest: Partial<DeviceRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "adminAccess": n => { deviceRequest.adminAccess = n.getBooleanValue(); },
        "allocationMode": n => { deviceRequest.allocationMode = n.getStringValue(); },
        "count": n => { deviceRequest.count = n.getNumberValue(); },
        "deviceClassName": n => { deviceRequest.deviceClassName = n.getStringValue(); },
        "name": n => { deviceRequest.name = n.getStringValue(); },
        "selectors": n => { deviceRequest.selectors = n.getCollectionOfObjectValues<DeviceSelector>(createDeviceSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceRequestAllocationResult(deviceRequestAllocationResult: Partial<DeviceRequestAllocationResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "adminAccess": n => { deviceRequestAllocationResult.adminAccess = n.getBooleanValue(); },
        "device": n => { deviceRequestAllocationResult.device = n.getStringValue(); },
        "driver": n => { deviceRequestAllocationResult.driver = n.getStringValue(); },
        "pool": n => { deviceRequestAllocationResult.pool = n.getStringValue(); },
        "request": n => { deviceRequestAllocationResult.request = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeviceSelector(deviceSelector: Partial<DeviceSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cel": n => { deviceSelector.cel = n.getObjectValue<CELDeviceSelector>(createCELDeviceSelectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNetworkDeviceData(networkDeviceData: Partial<NetworkDeviceData> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hardwareAddress": n => { networkDeviceData.hardwareAddress = n.getStringValue(); },
        "interfaceName": n => { networkDeviceData.interfaceName = n.getStringValue(); },
        "ips": n => { networkDeviceData.ips = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOpaqueDeviceConfiguration(opaqueDeviceConfiguration: Partial<OpaqueDeviceConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "driver": n => { opaqueDeviceConfiguration.driver = n.getStringValue(); },
        "parameters": n => { opaqueDeviceConfiguration.parameters = n.getObjectValue<RawExtension>(createRawExtensionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaim(resourceClaim: Partial<ResourceClaim> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceClaim.apiVersion = n.getStringValue(); },
        "kind": n => { resourceClaim.kind = n.getStringValue(); },
        "metadata": n => { resourceClaim.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { resourceClaim.spec = n.getObjectValue<ResourceClaimSpec>(createResourceClaimSpecFromDiscriminatorValue); },
        "status": n => { resourceClaim.status = n.getObjectValue<ResourceClaimStatus>(createResourceClaimStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimConsumerReference(resourceClaimConsumerReference: Partial<ResourceClaimConsumerReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiGroup": n => { resourceClaimConsumerReference.apiGroup = n.getStringValue(); },
        "name": n => { resourceClaimConsumerReference.name = n.getStringValue(); },
        "resource": n => { resourceClaimConsumerReference.resource = n.getStringValue(); },
        "uid": n => { resourceClaimConsumerReference.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimList(resourceClaimList: Partial<ResourceClaimList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceClaimList.apiVersion = n.getStringValue(); },
        "items": n => { resourceClaimList.items = n.getCollectionOfObjectValues<ResourceClaim>(createResourceClaimFromDiscriminatorValue); },
        "kind": n => { resourceClaimList.kind = n.getStringValue(); },
        "metadata": n => { resourceClaimList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimSpec(resourceClaimSpec: Partial<ResourceClaimSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "devices": n => { resourceClaimSpec.devices = n.getObjectValue<DeviceClaim>(createDeviceClaimFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimStatus(resourceClaimStatus: Partial<ResourceClaimStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allocation": n => { resourceClaimStatus.allocation = n.getObjectValue<AllocationResult>(createAllocationResultFromDiscriminatorValue); },
        "devices": n => { resourceClaimStatus.devices = n.getCollectionOfObjectValues<AllocatedDeviceStatus>(createAllocatedDeviceStatusFromDiscriminatorValue); },
        "reservedFor": n => { resourceClaimStatus.reservedFor = n.getCollectionOfObjectValues<ResourceClaimConsumerReference>(createResourceClaimConsumerReferenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimTemplate(resourceClaimTemplate: Partial<ResourceClaimTemplate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceClaimTemplate.apiVersion = n.getStringValue(); },
        "kind": n => { resourceClaimTemplate.kind = n.getStringValue(); },
        "metadata": n => { resourceClaimTemplate.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { resourceClaimTemplate.spec = n.getObjectValue<ResourceClaimTemplateSpec>(createResourceClaimTemplateSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimTemplateList(resourceClaimTemplateList: Partial<ResourceClaimTemplateList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceClaimTemplateList.apiVersion = n.getStringValue(); },
        "items": n => { resourceClaimTemplateList.items = n.getCollectionOfObjectValues<ResourceClaimTemplate>(createResourceClaimTemplateFromDiscriminatorValue); },
        "kind": n => { resourceClaimTemplateList.kind = n.getStringValue(); },
        "metadata": n => { resourceClaimTemplateList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceClaimTemplateSpec(resourceClaimTemplateSpec: Partial<ResourceClaimTemplateSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "metadata": n => { resourceClaimTemplateSpec.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { resourceClaimTemplateSpec.spec = n.getObjectValue<ResourceClaimSpec>(createResourceClaimSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourcePool(resourcePool: Partial<ResourcePool> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "generation": n => { resourcePool.generation = n.getNumberValue(); },
        "name": n => { resourcePool.name = n.getStringValue(); },
        "resourceSliceCount": n => { resourcePool.resourceSliceCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceSlice(resourceSlice: Partial<ResourceSlice> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceSlice.apiVersion = n.getStringValue(); },
        "kind": n => { resourceSlice.kind = n.getStringValue(); },
        "metadata": n => { resourceSlice.metadata = n.getObjectValue<ObjectMeta>(createObjectMetaFromDiscriminatorValue); },
        "spec": n => { resourceSlice.spec = n.getObjectValue<ResourceSliceSpec>(createResourceSliceSpecFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceSliceList(resourceSliceList: Partial<ResourceSliceList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { resourceSliceList.apiVersion = n.getStringValue(); },
        "items": n => { resourceSliceList.items = n.getCollectionOfObjectValues<ResourceSlice>(createResourceSliceFromDiscriminatorValue); },
        "kind": n => { resourceSliceList.kind = n.getStringValue(); },
        "metadata": n => { resourceSliceList.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourceSliceSpec(resourceSliceSpec: Partial<ResourceSliceSpec> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allNodes": n => { resourceSliceSpec.allNodes = n.getBooleanValue(); },
        "devices": n => { resourceSliceSpec.devices = n.getCollectionOfObjectValues<Device>(createDeviceFromDiscriminatorValue); },
        "driver": n => { resourceSliceSpec.driver = n.getStringValue(); },
        "nodeName": n => { resourceSliceSpec.nodeName = n.getStringValue(); },
        "nodeSelector": n => { resourceSliceSpec.nodeSelector = n.getObjectValue<NodeSelector>(createNodeSelectorFromDiscriminatorValue); },
        "pool": n => { resourceSliceSpec.pool = n.getObjectValue<ResourcePool>(createResourcePoolFromDiscriminatorValue); },
    }
}
/**
 * Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
 */
export interface Device extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * BasicDevice defines one device instance.
     */
    basic?: BasicDevice | null;
    /**
     * Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
     */
    name?: string | null;
}
/**
 * DeviceAllocationConfiguration gets embedded in an AllocationResult.
 */
export interface DeviceAllocationConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
     */
    opaque?: OpaqueDeviceConfiguration | null;
    /**
     * Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
     */
    requests?: string[] | null;
    /**
     * Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
     */
    source?: string | null;
}
/**
 * DeviceAllocationResult is the result of allocating devices.
 */
export interface DeviceAllocationResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.This includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.
     */
    config?: DeviceAllocationConfiguration[] | null;
    /**
     * Results lists all allocated devices.
     */
    results?: DeviceRequestAllocationResult[] | null;
}
/**
 * DeviceClaim defines how to request devices with a ResourceClaim.
 */
export interface DeviceClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
     */
    config?: DeviceClaimConfiguration[] | null;
    /**
     * These constraints must be satisfied by the set of devices that get allocated for the claim.
     */
    constraints?: DeviceConstraint[] | null;
    /**
     * Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
     */
    requests?: DeviceRequest[] | null;
}
/**
 * DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.
 */
export interface DeviceClaimConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
     */
    opaque?: OpaqueDeviceConfiguration | null;
    /**
     * Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.
     */
    requests?: string[] | null;
}
/**
 * DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
 */
export interface DeviceClass extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
     */
    spec?: DeviceClassSpec | null;
}
/**
 * DeviceClassConfiguration is used in DeviceClass.
 */
export interface DeviceClassConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
     */
    opaque?: OpaqueDeviceConfiguration | null;
}
/**
 * DeviceClassList is a collection of classes.
 */
export interface DeviceClassList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of resource classes.
     */
    items?: DeviceClass[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
 */
export interface DeviceClassSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.They are passed to the driver, but are not considered while allocating the claim.
     */
    config?: DeviceClassConfiguration[] | null;
    /**
     * Each selector must be satisfied by a device which is claimed via this class.
     */
    selectors?: DeviceSelector[] | null;
}
/**
 * DeviceConstraint must have exactly one field set besides Requests.
 */
export interface DeviceConstraint extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.For example, if you specified "dra.example.com/numa" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.Must include the domain qualifier.
     */
    matchAttribute?: string | null;
    /**
     * Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
     */
    requests?: string[] | null;
}
/**
 * DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.A DeviceClassName is currently required. Clients must check that it is indeed set. It's absence indicates that something changed in a way that is not supported by the client yet, in which case it must refuse to handle the request.
 */
export interface DeviceRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
     */
    adminAccess?: boolean | null;
    /**
     * AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:- ExactCount: This request is for a specific number of devices.  This is the default. The exact number is provided in the  count field.- All: This request is for all of the matching devices in a pool.  At least one device must exist on the node for the allocation to succeed.  Allocation will fail if some devices are already allocated,  unless adminAccess is requested.If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
     */
    allocationMode?: string | null;
    /**
     * Count is used only when the count mode is "ExactCount". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
     */
    count?: number | null;
    /**
     * DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.A class is required. Which classes are available depends on the cluster.Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
     */
    deviceClassName?: string | null;
    /**
     * Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.Must be a DNS label.
     */
    name?: string | null;
    /**
     * Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
     */
    selectors?: DeviceSelector[] | null;
}
/**
 * DeviceRequestAllocationResult contains the allocation result for one request.
 */
export interface DeviceRequestAllocationResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
     */
    adminAccess?: boolean | null;
    /**
     * Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
     */
    device?: string | null;
    /**
     * Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     */
    driver?: string | null;
    /**
     * This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
     */
    pool?: string | null;
    /**
     * Request is the name of the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request.
     */
    request?: string | null;
}
/**
 * DeviceSelector must have exactly one field set.
 */
export interface DeviceSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * CELDeviceSelector contains a CEL expression for selecting a device.
     */
    cel?: CELDeviceSelector | null;
}
/**
 * NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.
 */
export interface NetworkDeviceData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.Must not be longer than 128 characters.
     */
    hardwareAddress?: string | null;
    /**
     * InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.Must not be longer than 256 characters.
     */
    interfaceName?: string | null;
    /**
     * IPs lists the network addresses assigned to the device's network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: "192.0.2.5/24" for IPv4 and "2001:db8::5/64" for IPv6.
     */
    ips?: string[] | null;
}
/**
 * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
 */
export interface OpaqueDeviceConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.An admission policy provided by the driver developer could use this to decide whether it needs to validate them.Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     */
    driver?: string | null;
    /**
     * RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.Object `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.RawExtension `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// On the wire, the JSON will look something like this:{"kind":"MyAPIObject","apiVersion":"v1","myPlugin": {"kind":"PluginA","aOption":"foo",},}So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
     */
    parameters?: RawExtension | null;
}
/**
 * ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
 */
export interface ResourceClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
     */
    spec?: ResourceClaimSpec | null;
    /**
     * ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
     */
    status?: ResourceClaimStatus | null;
}
/**
 * ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
 */
export interface ResourceClaimConsumerReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
     */
    apiGroup?: string | null;
    /**
     * Name is the name of resource being referenced.
     */
    name?: string | null;
    /**
     * Resource is the type of resource being referenced, for example "pods".
     */
    resource?: string | null;
    /**
     * UID identifies exactly one incarnation of the resource.
     */
    uid?: string | null;
}
/**
 * ResourceClaimList is a collection of claims.
 */
export interface ResourceClaimList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of resource claims.
     */
    items?: ResourceClaim[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
 */
export interface ResourceClaimSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * DeviceClaim defines how to request devices with a ResourceClaim.
     */
    devices?: DeviceClaim | null;
}
/**
 * ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
 */
export interface ResourceClaimStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AllocationResult contains attributes of an allocated resource.
     */
    allocation?: AllocationResult | null;
    /**
     * Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.
     */
    devices?: AllocatedDeviceStatus[] | null;
    /**
     * ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.In a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.Both schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.There can be at most 256 such reservations. This may get increased in the future, but not reduced.
     */
    reservedFor?: ResourceClaimConsumerReference[] | null;
}
/**
 * ResourceClaimTemplate is used to produce ResourceClaim objects.This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
 */
export interface ResourceClaimTemplate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
     */
    spec?: ResourceClaimTemplateSpec | null;
}
/**
 * ResourceClaimTemplateList is a collection of claim templates.
 */
export interface ResourceClaimTemplateList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of resource claim templates.
     */
    items?: ResourceClaimTemplate[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
 */
export interface ResourceClaimTemplateSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
     */
    spec?: ResourceClaimSpec | null;
}
/**
 * ResourcePool describes the pool that ResourceSlices belong to.
 */
export interface ResourcePool extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.Combined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.
     */
    generation?: number | null;
    /**
     * Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.It must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable.
     */
    name?: string | null;
    /**
     * ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.Consumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.
     */
    resourceSliceCount?: number | null;
}
/**
 * ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.At the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.Whenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.When allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.For resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
 */
export interface ResourceSlice extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    metadata?: ObjectMeta | null;
    /**
     * ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
     */
    spec?: ResourceSliceSpec | null;
}
/**
 * ResourceSliceList is a collection of ResourceSlices.
 */
export interface ResourceSliceList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Items is the list of resource ResourceSlices.
     */
    items?: ResourceSlice[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
}
/**
 * ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
 */
export interface ResourceSliceSpec extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * AllNodes indicates that all nodes have access to the resources in the pool.Exactly one of NodeName, NodeSelector and AllNodes must be set.
     */
    allNodes?: boolean | null;
    /**
     * Devices lists some or all of the devices in this pool.Must not have more than 128 entries.
     */
    devices?: Device[] | null;
    /**
     * Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable.
     */
    driver?: string | null;
    /**
     * NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.This field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.Exactly one of NodeName, NodeSelector and AllNodes must be set. This field is immutable.
     */
    nodeName?: string | null;
    /**
     * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
     */
    nodeSelector?: NodeSelector | null;
    /**
     * ResourcePool describes the pool that ResourceSlices belong to.
     */
    pool?: ResourcePool | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAllocatedDeviceStatus(writer: SerializationWriter, allocatedDeviceStatus: Partial<AllocatedDeviceStatus> | undefined | null = {}) : void {
    if (allocatedDeviceStatus) {
        writer.writeCollectionOfObjectValues<Condition>("conditions", allocatedDeviceStatus.conditions, serializeCondition);
        writer.writeObjectValue<RawExtension>("data", allocatedDeviceStatus.data, serializeRawExtension);
        writer.writeStringValue("device", allocatedDeviceStatus.device);
        writer.writeStringValue("driver", allocatedDeviceStatus.driver);
        writer.writeObjectValue<NetworkDeviceData>("networkData", allocatedDeviceStatus.networkData, serializeNetworkDeviceData);
        writer.writeStringValue("pool", allocatedDeviceStatus.pool);
        writer.writeAdditionalData(allocatedDeviceStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAllocationResult(writer: SerializationWriter, allocationResult: Partial<AllocationResult> | undefined | null = {}) : void {
    if (allocationResult) {
        writer.writeObjectValue<DeviceAllocationResult>("devices", allocationResult.devices, serializeDeviceAllocationResult);
        writer.writeObjectValue<NodeSelector>("nodeSelector", allocationResult.nodeSelector, serializeNodeSelector);
        writer.writeAdditionalData(allocationResult.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBasicDevice(writer: SerializationWriter, basicDevice: Partial<BasicDevice> | undefined | null = {}) : void {
    if (basicDevice) {
        writer.writeObjectValue<BasicDevice_attributes>("attributes", basicDevice.attributes, serializeBasicDevice_attributes);
        writer.writeObjectValue<BasicDevice_capacity>("capacity", basicDevice.capacity, serializeBasicDevice_capacity);
        writer.writeAdditionalData(basicDevice.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBasicDevice_attributes(writer: SerializationWriter, basicDevice_attributes: Partial<BasicDevice_attributes> | undefined | null = {}) : void {
    if (basicDevice_attributes) {
        writer.writeAdditionalData(basicDevice_attributes.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBasicDevice_capacity(writer: SerializationWriter, basicDevice_capacity: Partial<BasicDevice_capacity> | undefined | null = {}) : void {
    if (basicDevice_capacity) {
        writer.writeAdditionalData(basicDevice_capacity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCELDeviceSelector(writer: SerializationWriter, cELDeviceSelector: Partial<CELDeviceSelector> | undefined | null = {}) : void {
    if (cELDeviceSelector) {
        writer.writeStringValue("expression", cELDeviceSelector.expression);
        writer.writeAdditionalData(cELDeviceSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDevice(writer: SerializationWriter, device: Partial<Device> | undefined | null = {}) : void {
    if (device) {
        writer.writeObjectValue<BasicDevice>("basic", device.basic, serializeBasicDevice);
        writer.writeStringValue("name", device.name);
        writer.writeAdditionalData(device.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceAllocationConfiguration(writer: SerializationWriter, deviceAllocationConfiguration: Partial<DeviceAllocationConfiguration> | undefined | null = {}) : void {
    if (deviceAllocationConfiguration) {
        writer.writeObjectValue<OpaqueDeviceConfiguration>("opaque", deviceAllocationConfiguration.opaque, serializeOpaqueDeviceConfiguration);
        writer.writeCollectionOfPrimitiveValues<string>("requests", deviceAllocationConfiguration.requests);
        writer.writeStringValue("source", deviceAllocationConfiguration.source);
        writer.writeAdditionalData(deviceAllocationConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceAllocationResult(writer: SerializationWriter, deviceAllocationResult: Partial<DeviceAllocationResult> | undefined | null = {}) : void {
    if (deviceAllocationResult) {
        writer.writeCollectionOfObjectValues<DeviceAllocationConfiguration>("config", deviceAllocationResult.config, serializeDeviceAllocationConfiguration);
        writer.writeCollectionOfObjectValues<DeviceRequestAllocationResult>("results", deviceAllocationResult.results, serializeDeviceRequestAllocationResult);
        writer.writeAdditionalData(deviceAllocationResult.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClaim(writer: SerializationWriter, deviceClaim: Partial<DeviceClaim> | undefined | null = {}) : void {
    if (deviceClaim) {
        writer.writeCollectionOfObjectValues<DeviceClaimConfiguration>("config", deviceClaim.config, serializeDeviceClaimConfiguration);
        writer.writeCollectionOfObjectValues<DeviceConstraint>("constraints", deviceClaim.constraints, serializeDeviceConstraint);
        writer.writeCollectionOfObjectValues<DeviceRequest>("requests", deviceClaim.requests, serializeDeviceRequest);
        writer.writeAdditionalData(deviceClaim.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClaimConfiguration(writer: SerializationWriter, deviceClaimConfiguration: Partial<DeviceClaimConfiguration> | undefined | null = {}) : void {
    if (deviceClaimConfiguration) {
        writer.writeObjectValue<OpaqueDeviceConfiguration>("opaque", deviceClaimConfiguration.opaque, serializeOpaqueDeviceConfiguration);
        writer.writeCollectionOfPrimitiveValues<string>("requests", deviceClaimConfiguration.requests);
        writer.writeAdditionalData(deviceClaimConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClass(writer: SerializationWriter, deviceClass: Partial<DeviceClass> | undefined | null = {}) : void {
    if (deviceClass) {
        writer.writeStringValue("apiVersion", deviceClass.apiVersion);
        writer.writeStringValue("kind", deviceClass.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", deviceClass.metadata, serializeObjectMeta);
        writer.writeObjectValue<DeviceClassSpec>("spec", deviceClass.spec, serializeDeviceClassSpec);
        writer.writeAdditionalData(deviceClass.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClassConfiguration(writer: SerializationWriter, deviceClassConfiguration: Partial<DeviceClassConfiguration> | undefined | null = {}) : void {
    if (deviceClassConfiguration) {
        writer.writeObjectValue<OpaqueDeviceConfiguration>("opaque", deviceClassConfiguration.opaque, serializeOpaqueDeviceConfiguration);
        writer.writeAdditionalData(deviceClassConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClassList(writer: SerializationWriter, deviceClassList: Partial<DeviceClassList> | undefined | null = {}) : void {
    if (deviceClassList) {
        writer.writeStringValue("apiVersion", deviceClassList.apiVersion);
        writer.writeCollectionOfObjectValues<DeviceClass>("items", deviceClassList.items, serializeDeviceClass);
        writer.writeStringValue("kind", deviceClassList.kind);
        writer.writeObjectValue<ListMeta>("metadata", deviceClassList.metadata, serializeListMeta);
        writer.writeAdditionalData(deviceClassList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceClassSpec(writer: SerializationWriter, deviceClassSpec: Partial<DeviceClassSpec> | undefined | null = {}) : void {
    if (deviceClassSpec) {
        writer.writeCollectionOfObjectValues<DeviceClassConfiguration>("config", deviceClassSpec.config, serializeDeviceClassConfiguration);
        writer.writeCollectionOfObjectValues<DeviceSelector>("selectors", deviceClassSpec.selectors, serializeDeviceSelector);
        writer.writeAdditionalData(deviceClassSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceConstraint(writer: SerializationWriter, deviceConstraint: Partial<DeviceConstraint> | undefined | null = {}) : void {
    if (deviceConstraint) {
        writer.writeStringValue("matchAttribute", deviceConstraint.matchAttribute);
        writer.writeCollectionOfPrimitiveValues<string>("requests", deviceConstraint.requests);
        writer.writeAdditionalData(deviceConstraint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceRequest(writer: SerializationWriter, deviceRequest: Partial<DeviceRequest> | undefined | null = {}) : void {
    if (deviceRequest) {
        writer.writeBooleanValue("adminAccess", deviceRequest.adminAccess);
        writer.writeStringValue("allocationMode", deviceRequest.allocationMode);
        writer.writeNumberValue("count", deviceRequest.count);
        writer.writeStringValue("deviceClassName", deviceRequest.deviceClassName);
        writer.writeStringValue("name", deviceRequest.name);
        writer.writeCollectionOfObjectValues<DeviceSelector>("selectors", deviceRequest.selectors, serializeDeviceSelector);
        writer.writeAdditionalData(deviceRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceRequestAllocationResult(writer: SerializationWriter, deviceRequestAllocationResult: Partial<DeviceRequestAllocationResult> | undefined | null = {}) : void {
    if (deviceRequestAllocationResult) {
        writer.writeBooleanValue("adminAccess", deviceRequestAllocationResult.adminAccess);
        writer.writeStringValue("device", deviceRequestAllocationResult.device);
        writer.writeStringValue("driver", deviceRequestAllocationResult.driver);
        writer.writeStringValue("pool", deviceRequestAllocationResult.pool);
        writer.writeStringValue("request", deviceRequestAllocationResult.request);
        writer.writeAdditionalData(deviceRequestAllocationResult.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeviceSelector(writer: SerializationWriter, deviceSelector: Partial<DeviceSelector> | undefined | null = {}) : void {
    if (deviceSelector) {
        writer.writeObjectValue<CELDeviceSelector>("cel", deviceSelector.cel, serializeCELDeviceSelector);
        writer.writeAdditionalData(deviceSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNetworkDeviceData(writer: SerializationWriter, networkDeviceData: Partial<NetworkDeviceData> | undefined | null = {}) : void {
    if (networkDeviceData) {
        writer.writeStringValue("hardwareAddress", networkDeviceData.hardwareAddress);
        writer.writeStringValue("interfaceName", networkDeviceData.interfaceName);
        writer.writeCollectionOfPrimitiveValues<string>("ips", networkDeviceData.ips);
        writer.writeAdditionalData(networkDeviceData.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOpaqueDeviceConfiguration(writer: SerializationWriter, opaqueDeviceConfiguration: Partial<OpaqueDeviceConfiguration> | undefined | null = {}) : void {
    if (opaqueDeviceConfiguration) {
        writer.writeStringValue("driver", opaqueDeviceConfiguration.driver);
        writer.writeObjectValue<RawExtension>("parameters", opaqueDeviceConfiguration.parameters, serializeRawExtension);
        writer.writeAdditionalData(opaqueDeviceConfiguration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaim(writer: SerializationWriter, resourceClaim: Partial<ResourceClaim> | undefined | null = {}) : void {
    if (resourceClaim) {
        writer.writeStringValue("apiVersion", resourceClaim.apiVersion);
        writer.writeStringValue("kind", resourceClaim.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", resourceClaim.metadata, serializeObjectMeta);
        writer.writeObjectValue<ResourceClaimSpec>("spec", resourceClaim.spec, serializeResourceClaimSpec);
        writer.writeObjectValue<ResourceClaimStatus>("status", resourceClaim.status, serializeResourceClaimStatus);
        writer.writeAdditionalData(resourceClaim.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimConsumerReference(writer: SerializationWriter, resourceClaimConsumerReference: Partial<ResourceClaimConsumerReference> | undefined | null = {}) : void {
    if (resourceClaimConsumerReference) {
        writer.writeStringValue("apiGroup", resourceClaimConsumerReference.apiGroup);
        writer.writeStringValue("name", resourceClaimConsumerReference.name);
        writer.writeStringValue("resource", resourceClaimConsumerReference.resource);
        writer.writeStringValue("uid", resourceClaimConsumerReference.uid);
        writer.writeAdditionalData(resourceClaimConsumerReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimList(writer: SerializationWriter, resourceClaimList: Partial<ResourceClaimList> | undefined | null = {}) : void {
    if (resourceClaimList) {
        writer.writeStringValue("apiVersion", resourceClaimList.apiVersion);
        writer.writeCollectionOfObjectValues<ResourceClaim>("items", resourceClaimList.items, serializeResourceClaim);
        writer.writeStringValue("kind", resourceClaimList.kind);
        writer.writeObjectValue<ListMeta>("metadata", resourceClaimList.metadata, serializeListMeta);
        writer.writeAdditionalData(resourceClaimList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimSpec(writer: SerializationWriter, resourceClaimSpec: Partial<ResourceClaimSpec> | undefined | null = {}) : void {
    if (resourceClaimSpec) {
        writer.writeObjectValue<DeviceClaim>("devices", resourceClaimSpec.devices, serializeDeviceClaim);
        writer.writeAdditionalData(resourceClaimSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimStatus(writer: SerializationWriter, resourceClaimStatus: Partial<ResourceClaimStatus> | undefined | null = {}) : void {
    if (resourceClaimStatus) {
        writer.writeObjectValue<AllocationResult>("allocation", resourceClaimStatus.allocation, serializeAllocationResult);
        writer.writeCollectionOfObjectValues<AllocatedDeviceStatus>("devices", resourceClaimStatus.devices, serializeAllocatedDeviceStatus);
        writer.writeCollectionOfObjectValues<ResourceClaimConsumerReference>("reservedFor", resourceClaimStatus.reservedFor, serializeResourceClaimConsumerReference);
        writer.writeAdditionalData(resourceClaimStatus.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimTemplate(writer: SerializationWriter, resourceClaimTemplate: Partial<ResourceClaimTemplate> | undefined | null = {}) : void {
    if (resourceClaimTemplate) {
        writer.writeStringValue("apiVersion", resourceClaimTemplate.apiVersion);
        writer.writeStringValue("kind", resourceClaimTemplate.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", resourceClaimTemplate.metadata, serializeObjectMeta);
        writer.writeObjectValue<ResourceClaimTemplateSpec>("spec", resourceClaimTemplate.spec, serializeResourceClaimTemplateSpec);
        writer.writeAdditionalData(resourceClaimTemplate.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimTemplateList(writer: SerializationWriter, resourceClaimTemplateList: Partial<ResourceClaimTemplateList> | undefined | null = {}) : void {
    if (resourceClaimTemplateList) {
        writer.writeStringValue("apiVersion", resourceClaimTemplateList.apiVersion);
        writer.writeCollectionOfObjectValues<ResourceClaimTemplate>("items", resourceClaimTemplateList.items, serializeResourceClaimTemplate);
        writer.writeStringValue("kind", resourceClaimTemplateList.kind);
        writer.writeObjectValue<ListMeta>("metadata", resourceClaimTemplateList.metadata, serializeListMeta);
        writer.writeAdditionalData(resourceClaimTemplateList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceClaimTemplateSpec(writer: SerializationWriter, resourceClaimTemplateSpec: Partial<ResourceClaimTemplateSpec> | undefined | null = {}) : void {
    if (resourceClaimTemplateSpec) {
        writer.writeObjectValue<ObjectMeta>("metadata", resourceClaimTemplateSpec.metadata, serializeObjectMeta);
        writer.writeObjectValue<ResourceClaimSpec>("spec", resourceClaimTemplateSpec.spec, serializeResourceClaimSpec);
        writer.writeAdditionalData(resourceClaimTemplateSpec.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourcePool(writer: SerializationWriter, resourcePool: Partial<ResourcePool> | undefined | null = {}) : void {
    if (resourcePool) {
        writer.writeNumberValue("generation", resourcePool.generation);
        writer.writeStringValue("name", resourcePool.name);
        writer.writeNumberValue("resourceSliceCount", resourcePool.resourceSliceCount);
        writer.writeAdditionalData(resourcePool.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceSlice(writer: SerializationWriter, resourceSlice: Partial<ResourceSlice> | undefined | null = {}) : void {
    if (resourceSlice) {
        writer.writeStringValue("apiVersion", resourceSlice.apiVersion);
        writer.writeStringValue("kind", resourceSlice.kind);
        writer.writeObjectValue<ObjectMeta>("metadata", resourceSlice.metadata, serializeObjectMeta);
        writer.writeObjectValue<ResourceSliceSpec>("spec", resourceSlice.spec, serializeResourceSliceSpec);
        writer.writeAdditionalData(resourceSlice.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceSliceList(writer: SerializationWriter, resourceSliceList: Partial<ResourceSliceList> | undefined | null = {}) : void {
    if (resourceSliceList) {
        writer.writeStringValue("apiVersion", resourceSliceList.apiVersion);
        writer.writeCollectionOfObjectValues<ResourceSlice>("items", resourceSliceList.items, serializeResourceSlice);
        writer.writeStringValue("kind", resourceSliceList.kind);
        writer.writeObjectValue<ListMeta>("metadata", resourceSliceList.metadata, serializeListMeta);
        writer.writeAdditionalData(resourceSliceList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourceSliceSpec(writer: SerializationWriter, resourceSliceSpec: Partial<ResourceSliceSpec> | undefined | null = {}) : void {
    if (resourceSliceSpec) {
        writer.writeBooleanValue("allNodes", resourceSliceSpec.allNodes);
        writer.writeCollectionOfObjectValues<Device>("devices", resourceSliceSpec.devices, serializeDevice);
        writer.writeStringValue("driver", resourceSliceSpec.driver);
        writer.writeStringValue("nodeName", resourceSliceSpec.nodeName);
        writer.writeObjectValue<NodeSelector>("nodeSelector", resourceSliceSpec.nodeSelector, serializeNodeSelector);
        writer.writeObjectValue<ResourcePool>("pool", resourceSliceSpec.pool, serializeResourcePool);
        writer.writeAdditionalData(resourceSliceSpec.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
