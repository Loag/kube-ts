/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRawExtensionFromDiscriminatorValue, serializeRawExtension, type RawExtension } from '../../../runtime/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * APIGroup contains the name, the supported versions, and the preferred version of a group.
 */
export interface APIGroup extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * name is the name of the group.
     */
    name?: string | null;
    /**
     * GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
     */
    preferredVersion?: GroupVersionForDiscovery | null;
    /**
     * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
     */
    serverAddressByClientCIDRs?: ServerAddressByClientCIDR[] | null;
    /**
     * versions are the versions supported in this group.
     */
    versions?: GroupVersionForDiscovery[] | null;
}
/**
 * APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
 */
export interface APIGroupList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * groups is a list of APIGroup.
     */
    groups?: APIGroup[] | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
}
/**
 * APIResource specifies the name of a resource and whether it is namespaced.
 */
export interface APIResource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * categories is a list of the grouped resources this resource belongs to (e.g. 'all')
     */
    categories?: string[] | null;
    /**
     * group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
     */
    group?: string | null;
    /**
     * kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
     */
    kind?: string | null;
    /**
     * name is the plural name of the resource.
     */
    name?: string | null;
    /**
     * namespaced indicates if a resource is namespaced or not.
     */
    namespaced?: boolean | null;
    /**
     * shortNames is a list of suggested short names of the resource.
     */
    shortNames?: string[] | null;
    /**
     * singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
     */
    singularName?: string | null;
    /**
     * The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
     */
    storageVersionHash?: string | null;
    /**
     * verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
     */
    verbs?: string[] | null;
    /**
     * version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
     */
    version?: string | null;
}
/**
 * APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
 */
export interface APIResourceList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * groupVersion is the group and version this APIResourceList is for.
     */
    groupVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * resources contains the name of the resources and if they are namespaced.
     */
    resources?: APIResource[] | null;
}
/**
 * APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
 */
export interface APIVersions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
     */
    serverAddressByClientCIDRs?: ServerAddressByClientCIDR[] | null;
    /**
     * versions are the api versions that are available.
     */
    versions?: string[] | null;
}
/**
 * Condition contains details for one aspect of the current state of this API Resource.
 */
export interface Condition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    lastTransitionTime?: Date | null;
    /**
     * message is a human readable message indicating details about the transition. This may be an empty string.
     */
    message?: string | null;
    /**
     * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
     */
    observedGeneration?: number | null;
    /**
     * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
     */
    reason?: string | null;
    /**
     * status of the condition, one of True, False, Unknown.
     */
    status?: string | null;
    /**
     * type of condition in CamelCase or in foo.example.com/CamelCase.
     */
    type?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {APIGroup}
 */
// @ts-ignore
export function createAPIGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAPIGroup;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {APIGroupList}
 */
// @ts-ignore
export function createAPIGroupListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAPIGroupList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {APIResource}
 */
// @ts-ignore
export function createAPIResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAPIResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {APIResourceList}
 */
// @ts-ignore
export function createAPIResourceListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAPIResourceList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {APIVersions}
 */
// @ts-ignore
export function createAPIVersionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAPIVersions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Condition}
 */
// @ts-ignore
export function createConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeleteOptions}
 */
// @ts-ignore
export function createDeleteOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeleteOptions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FieldSelectorRequirement}
 */
// @ts-ignore
export function createFieldSelectorRequirementFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFieldSelectorRequirement;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FieldsV1}
 */
// @ts-ignore
export function createFieldsV1FromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFieldsV1;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GroupVersionForDiscovery}
 */
// @ts-ignore
export function createGroupVersionForDiscoveryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGroupVersionForDiscovery;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelSelector_matchLabels}
 */
// @ts-ignore
export function createLabelSelector_matchLabelsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelSelector_matchLabels;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelSelector}
 */
// @ts-ignore
export function createLabelSelectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelSelector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelSelectorRequirement}
 */
// @ts-ignore
export function createLabelSelectorRequirementFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelSelectorRequirement;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListMeta}
 */
// @ts-ignore
export function createListMetaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListMeta;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ManagedFieldsEntry}
 */
// @ts-ignore
export function createManagedFieldsEntryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoManagedFieldsEntry;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectMeta_annotations}
 */
// @ts-ignore
export function createObjectMeta_annotationsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectMeta_annotations;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectMeta_labels}
 */
// @ts-ignore
export function createObjectMeta_labelsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectMeta_labels;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ObjectMeta}
 */
// @ts-ignore
export function createObjectMetaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoObjectMeta;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OwnerReference}
 */
// @ts-ignore
export function createOwnerReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOwnerReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Patch}
 */
// @ts-ignore
export function createPatchFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatch;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Preconditions}
 */
// @ts-ignore
export function createPreconditionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreconditions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServerAddressByClientCIDR}
 */
// @ts-ignore
export function createServerAddressByClientCIDRFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServerAddressByClientCIDR;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StatusCause}
 */
// @ts-ignore
export function createStatusCauseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStatusCause;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StatusDetails}
 */
// @ts-ignore
export function createStatusDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStatusDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Status}
 */
// @ts-ignore
export function createStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WatchEvent}
 */
// @ts-ignore
export function createWatchEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWatchEvent;
}
/**
 * DeleteOptions may be provided when deleting an API object.
 */
export interface DeleteOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string[] | null;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number | null;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean | null;
    /**
     * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
     */
    preconditions?: Preconditions | null;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAPIGroup(aPIGroup: Partial<APIGroup> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { aPIGroup.apiVersion = n.getStringValue(); },
        "kind": n => { aPIGroup.kind = n.getStringValue(); },
        "name": n => { aPIGroup.name = n.getStringValue(); },
        "preferredVersion": n => { aPIGroup.preferredVersion = n.getObjectValue<GroupVersionForDiscovery>(createGroupVersionForDiscoveryFromDiscriminatorValue); },
        "serverAddressByClientCIDRs": n => { aPIGroup.serverAddressByClientCIDRs = n.getCollectionOfObjectValues<ServerAddressByClientCIDR>(createServerAddressByClientCIDRFromDiscriminatorValue); },
        "versions": n => { aPIGroup.versions = n.getCollectionOfObjectValues<GroupVersionForDiscovery>(createGroupVersionForDiscoveryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAPIGroupList(aPIGroupList: Partial<APIGroupList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { aPIGroupList.apiVersion = n.getStringValue(); },
        "groups": n => { aPIGroupList.groups = n.getCollectionOfObjectValues<APIGroup>(createAPIGroupFromDiscriminatorValue); },
        "kind": n => { aPIGroupList.kind = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAPIResource(aPIResource: Partial<APIResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categories": n => { aPIResource.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "group": n => { aPIResource.group = n.getStringValue(); },
        "kind": n => { aPIResource.kind = n.getStringValue(); },
        "name": n => { aPIResource.name = n.getStringValue(); },
        "namespaced": n => { aPIResource.namespaced = n.getBooleanValue(); },
        "shortNames": n => { aPIResource.shortNames = n.getCollectionOfPrimitiveValues<string>(); },
        "singularName": n => { aPIResource.singularName = n.getStringValue(); },
        "storageVersionHash": n => { aPIResource.storageVersionHash = n.getStringValue(); },
        "verbs": n => { aPIResource.verbs = n.getCollectionOfPrimitiveValues<string>(); },
        "version": n => { aPIResource.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAPIResourceList(aPIResourceList: Partial<APIResourceList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { aPIResourceList.apiVersion = n.getStringValue(); },
        "groupVersion": n => { aPIResourceList.groupVersion = n.getStringValue(); },
        "kind": n => { aPIResourceList.kind = n.getStringValue(); },
        "resources": n => { aPIResourceList.resources = n.getCollectionOfObjectValues<APIResource>(createAPIResourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAPIVersions(aPIVersions: Partial<APIVersions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { aPIVersions.apiVersion = n.getStringValue(); },
        "kind": n => { aPIVersions.kind = n.getStringValue(); },
        "serverAddressByClientCIDRs": n => { aPIVersions.serverAddressByClientCIDRs = n.getCollectionOfObjectValues<ServerAddressByClientCIDR>(createServerAddressByClientCIDRFromDiscriminatorValue); },
        "versions": n => { aPIVersions.versions = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCondition(condition: Partial<Condition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastTransitionTime": n => { condition.lastTransitionTime = n.getDateValue(); },
        "message": n => { condition.message = n.getStringValue(); },
        "observedGeneration": n => { condition.observedGeneration = n.getNumberValue(); },
        "reason": n => { condition.reason = n.getStringValue(); },
        "status": n => { condition.status = n.getStringValue(); },
        "type": n => { condition.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeleteOptions(deleteOptions: Partial<DeleteOptions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { deleteOptions.apiVersion = n.getStringValue(); },
        "dryRun": n => { deleteOptions.dryRun = n.getCollectionOfPrimitiveValues<string>(); },
        "gracePeriodSeconds": n => { deleteOptions.gracePeriodSeconds = n.getNumberValue(); },
        "ignoreStoreReadErrorWithClusterBreakingPotential": n => { deleteOptions.ignoreStoreReadErrorWithClusterBreakingPotential = n.getBooleanValue(); },
        "kind": n => { deleteOptions.kind = n.getStringValue(); },
        "orphanDependents": n => { deleteOptions.orphanDependents = n.getBooleanValue(); },
        "preconditions": n => { deleteOptions.preconditions = n.getObjectValue<Preconditions>(createPreconditionsFromDiscriminatorValue); },
        "propagationPolicy": n => { deleteOptions.propagationPolicy = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFieldSelectorRequirement(fieldSelectorRequirement: Partial<FieldSelectorRequirement> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { fieldSelectorRequirement.key = n.getStringValue(); },
        "operator": n => { fieldSelectorRequirement.operator = n.getStringValue(); },
        "values": n => { fieldSelectorRequirement.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFieldsV1(fieldsV1: Partial<FieldsV1> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGroupVersionForDiscovery(groupVersionForDiscovery: Partial<GroupVersionForDiscovery> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "groupVersion": n => { groupVersionForDiscovery.groupVersion = n.getStringValue(); },
        "version": n => { groupVersionForDiscovery.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelSelector(labelSelector: Partial<LabelSelector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "matchExpressions": n => { labelSelector.matchExpressions = n.getCollectionOfObjectValues<LabelSelectorRequirement>(createLabelSelectorRequirementFromDiscriminatorValue); },
        "matchLabels": n => { labelSelector.matchLabels = n.getObjectValue<LabelSelector_matchLabels>(createLabelSelector_matchLabelsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelSelector_matchLabels(labelSelector_matchLabels: Partial<LabelSelector_matchLabels> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelSelectorRequirement(labelSelectorRequirement: Partial<LabelSelectorRequirement> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { labelSelectorRequirement.key = n.getStringValue(); },
        "operator": n => { labelSelectorRequirement.operator = n.getStringValue(); },
        "values": n => { labelSelectorRequirement.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListMeta(listMeta: Partial<ListMeta> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "continue": n => { listMeta.continueEscaped = n.getStringValue(); },
        "remainingItemCount": n => { listMeta.remainingItemCount = n.getNumberValue(); },
        "resourceVersion": n => { listMeta.resourceVersion = n.getStringValue(); },
        "selfLink": n => { listMeta.selfLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoManagedFieldsEntry(managedFieldsEntry: Partial<ManagedFieldsEntry> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { managedFieldsEntry.apiVersion = n.getStringValue(); },
        "fieldsType": n => { managedFieldsEntry.fieldsType = n.getStringValue(); },
        "fieldsV1": n => { managedFieldsEntry.fieldsV1 = n.getObjectValue<FieldsV1>(createFieldsV1FromDiscriminatorValue); },
        "manager": n => { managedFieldsEntry.manager = n.getStringValue(); },
        "operation": n => { managedFieldsEntry.operation = n.getStringValue(); },
        "subresource": n => { managedFieldsEntry.subresource = n.getStringValue(); },
        "time": n => { managedFieldsEntry.time = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectMeta(objectMeta: Partial<ObjectMeta> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "annotations": n => { objectMeta.annotations = n.getObjectValue<ObjectMeta_annotations>(createObjectMeta_annotationsFromDiscriminatorValue); },
        "creationTimestamp": n => { objectMeta.creationTimestamp = n.getDateValue(); },
        "deletionGracePeriodSeconds": n => { objectMeta.deletionGracePeriodSeconds = n.getNumberValue(); },
        "deletionTimestamp": n => { objectMeta.deletionTimestamp = n.getDateValue(); },
        "finalizers": n => { objectMeta.finalizers = n.getCollectionOfPrimitiveValues<string>(); },
        "generateName": n => { objectMeta.generateName = n.getStringValue(); },
        "generation": n => { objectMeta.generation = n.getNumberValue(); },
        "labels": n => { objectMeta.labels = n.getObjectValue<ObjectMeta_labels>(createObjectMeta_labelsFromDiscriminatorValue); },
        "managedFields": n => { objectMeta.managedFields = n.getCollectionOfObjectValues<ManagedFieldsEntry>(createManagedFieldsEntryFromDiscriminatorValue); },
        "name": n => { objectMeta.name = n.getStringValue(); },
        "namespace": n => { objectMeta.namespace = n.getStringValue(); },
        "ownerReferences": n => { objectMeta.ownerReferences = n.getCollectionOfObjectValues<OwnerReference>(createOwnerReferenceFromDiscriminatorValue); },
        "resourceVersion": n => { objectMeta.resourceVersion = n.getStringValue(); },
        "selfLink": n => { objectMeta.selfLink = n.getStringValue(); },
        "uid": n => { objectMeta.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectMeta_annotations(objectMeta_annotations: Partial<ObjectMeta_annotations> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoObjectMeta_labels(objectMeta_labels: Partial<ObjectMeta_labels> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOwnerReference(ownerReference: Partial<OwnerReference> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { ownerReference.apiVersion = n.getStringValue(); },
        "blockOwnerDeletion": n => { ownerReference.blockOwnerDeletion = n.getBooleanValue(); },
        "controller": n => { ownerReference.controller = n.getBooleanValue(); },
        "kind": n => { ownerReference.kind = n.getStringValue(); },
        "name": n => { ownerReference.name = n.getStringValue(); },
        "uid": n => { ownerReference.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatch(patch: Partial<Patch> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreconditions(preconditions: Partial<Preconditions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "resourceVersion": n => { preconditions.resourceVersion = n.getStringValue(); },
        "uid": n => { preconditions.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServerAddressByClientCIDR(serverAddressByClientCIDR: Partial<ServerAddressByClientCIDR> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "clientCIDR": n => { serverAddressByClientCIDR.clientCIDR = n.getStringValue(); },
        "serverAddress": n => { serverAddressByClientCIDR.serverAddress = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStatus(status: Partial<Status> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "apiVersion": n => { status.apiVersion = n.getStringValue(); },
        "code": n => { status.code = n.getNumberValue(); },
        "details": n => { status.details = n.getObjectValue<StatusDetails>(createStatusDetailsFromDiscriminatorValue); },
        "kind": n => { status.kind = n.getStringValue(); },
        "message": n => { status.message = n.getStringValue(); },
        "metadata": n => { status.metadata = n.getObjectValue<ListMeta>(createListMetaFromDiscriminatorValue); },
        "reason": n => { status.reason = n.getStringValue(); },
        "status": n => { status.status = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStatusCause(statusCause: Partial<StatusCause> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "field": n => { statusCause.field = n.getStringValue(); },
        "message": n => { statusCause.message = n.getStringValue(); },
        "reason": n => { statusCause.reason = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStatusDetails(statusDetails: Partial<StatusDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "causes": n => { statusDetails.causes = n.getCollectionOfObjectValues<StatusCause>(createStatusCauseFromDiscriminatorValue); },
        "group": n => { statusDetails.group = n.getStringValue(); },
        "kind": n => { statusDetails.kind = n.getStringValue(); },
        "name": n => { statusDetails.name = n.getStringValue(); },
        "retryAfterSeconds": n => { statusDetails.retryAfterSeconds = n.getNumberValue(); },
        "uid": n => { statusDetails.uid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWatchEvent(watchEvent: Partial<WatchEvent> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "object": n => { watchEvent.object = n.getObjectValue<RawExtension>(createRawExtensionFromDiscriminatorValue); },
        "type": n => { watchEvent.type = n.getStringValue(); },
    }
}
/**
 * FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.
 */
export interface FieldSelectorRequirement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * key is the field selector key that the requirement applies to.
     */
    key?: string | null;
    /**
     * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
     */
    operator?: string | null;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
     */
    values?: string[] | null;
}
/**
 * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.The exact format is defined in sigs.k8s.io/structured-merge-diff
 */
export interface FieldsV1 extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
 */
export interface GroupVersionForDiscovery extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * groupVersion specifies the API group and version in the form "group/version"
     */
    groupVersion?: string | null;
    /**
     * version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
     */
    version?: string | null;
}
/**
 * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
 */
export interface LabelSelector extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: LabelSelectorRequirement[] | null;
    /**
     * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: LabelSelector_matchLabels | null;
}
/**
 * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
 */
export interface LabelSelector_matchLabels extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 */
export interface LabelSelectorRequirement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * key is the label key that the selector applies to.
     */
    key?: string | null;
    /**
     * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
     */
    operator?: string | null;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[] | null;
}
/**
 * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
 */
export interface ListMeta extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
     */
    continueEscaped?: string | null;
    /**
     * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
     */
    remainingItemCount?: number | null;
    /**
     * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: string | null;
    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     */
    selfLink?: string | null;
}
/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 */
export interface ManagedFieldsEntry extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     */
    apiVersion?: string | null;
    /**
     * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
     */
    fieldsType?: string | null;
    /**
     * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.The exact format is defined in sigs.k8s.io/structured-merge-diff
     */
    fieldsV1?: FieldsV1 | null;
    /**
     * Manager is an identifier of the workflow managing these fields.
     */
    manager?: string | null;
    /**
     * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     */
    operation?: string | null;
    /**
     * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     */
    subresource?: string | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    time?: Date | null;
}
/**
 * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 */
export interface ObjectMeta extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
     */
    annotations?: ObjectMeta_annotations | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    creationTimestamp?: Date | null;
    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     */
    deletionGracePeriodSeconds?: number | null;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    deletionTimestamp?: Date | null;
    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
     */
    finalizers?: string[] | null;
    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.If this field is specified and the generated name exists, the server will return a 409.Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string | null;
    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     */
    generation?: number | null;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
     */
    labels?: ObjectMeta_labels | null;
    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
     */
    managedFields?: ManagedFieldsEntry[] | null;
    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
     */
    name?: string | null;
    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
     */
    namespace?: string | null;
    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
     */
    ownerReferences?: OwnerReference[] | null;
    /**
     * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: string | null;
    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     */
    selfLink?: string | null;
    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     */
    uid?: string | null;
}
/**
 * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
 */
export interface ObjectMeta_annotations extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
 */
export interface ObjectMeta_labels extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 */
export interface OwnerReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * API version of the referent.
     */
    apiVersion?: string | null;
    /**
     * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     */
    blockOwnerDeletion?: boolean | null;
    /**
     * If true, this reference points to the managing controller.
     */
    controller?: boolean | null;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
     */
    name?: string | null;
    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     */
    uid?: string | null;
}
/**
 * Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
 */
export interface Patch extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
 */
export interface Preconditions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies the target ResourceVersion
     */
    resourceVersion?: string | null;
    /**
     * Specifies the target UID.
     */
    uid?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAPIGroup(writer: SerializationWriter, aPIGroup: Partial<APIGroup> | undefined | null = {}) : void {
    if (aPIGroup) {
        writer.writeStringValue("apiVersion", aPIGroup.apiVersion);
        writer.writeStringValue("kind", aPIGroup.kind);
        writer.writeStringValue("name", aPIGroup.name);
        writer.writeObjectValue<GroupVersionForDiscovery>("preferredVersion", aPIGroup.preferredVersion, serializeGroupVersionForDiscovery);
        writer.writeCollectionOfObjectValues<ServerAddressByClientCIDR>("serverAddressByClientCIDRs", aPIGroup.serverAddressByClientCIDRs, serializeServerAddressByClientCIDR);
        writer.writeCollectionOfObjectValues<GroupVersionForDiscovery>("versions", aPIGroup.versions, serializeGroupVersionForDiscovery);
        writer.writeAdditionalData(aPIGroup.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAPIGroupList(writer: SerializationWriter, aPIGroupList: Partial<APIGroupList> | undefined | null = {}) : void {
    if (aPIGroupList) {
        writer.writeStringValue("apiVersion", aPIGroupList.apiVersion);
        writer.writeCollectionOfObjectValues<APIGroup>("groups", aPIGroupList.groups, serializeAPIGroup);
        writer.writeStringValue("kind", aPIGroupList.kind);
        writer.writeAdditionalData(aPIGroupList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAPIResource(writer: SerializationWriter, aPIResource: Partial<APIResource> | undefined | null = {}) : void {
    if (aPIResource) {
        writer.writeCollectionOfPrimitiveValues<string>("categories", aPIResource.categories);
        writer.writeStringValue("group", aPIResource.group);
        writer.writeStringValue("kind", aPIResource.kind);
        writer.writeStringValue("name", aPIResource.name);
        writer.writeBooleanValue("namespaced", aPIResource.namespaced);
        writer.writeCollectionOfPrimitiveValues<string>("shortNames", aPIResource.shortNames);
        writer.writeStringValue("singularName", aPIResource.singularName);
        writer.writeStringValue("storageVersionHash", aPIResource.storageVersionHash);
        writer.writeCollectionOfPrimitiveValues<string>("verbs", aPIResource.verbs);
        writer.writeStringValue("version", aPIResource.version);
        writer.writeAdditionalData(aPIResource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAPIResourceList(writer: SerializationWriter, aPIResourceList: Partial<APIResourceList> | undefined | null = {}) : void {
    if (aPIResourceList) {
        writer.writeStringValue("apiVersion", aPIResourceList.apiVersion);
        writer.writeStringValue("groupVersion", aPIResourceList.groupVersion);
        writer.writeStringValue("kind", aPIResourceList.kind);
        writer.writeCollectionOfObjectValues<APIResource>("resources", aPIResourceList.resources, serializeAPIResource);
        writer.writeAdditionalData(aPIResourceList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAPIVersions(writer: SerializationWriter, aPIVersions: Partial<APIVersions> | undefined | null = {}) : void {
    if (aPIVersions) {
        writer.writeStringValue("apiVersion", aPIVersions.apiVersion);
        writer.writeStringValue("kind", aPIVersions.kind);
        writer.writeCollectionOfObjectValues<ServerAddressByClientCIDR>("serverAddressByClientCIDRs", aPIVersions.serverAddressByClientCIDRs, serializeServerAddressByClientCIDR);
        writer.writeCollectionOfPrimitiveValues<string>("versions", aPIVersions.versions);
        writer.writeAdditionalData(aPIVersions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCondition(writer: SerializationWriter, condition: Partial<Condition> | undefined | null = {}) : void {
    if (condition) {
        writer.writeDateValue("lastTransitionTime", condition.lastTransitionTime);
        writer.writeStringValue("message", condition.message);
        writer.writeNumberValue("observedGeneration", condition.observedGeneration);
        writer.writeStringValue("reason", condition.reason);
        writer.writeStringValue("status", condition.status);
        writer.writeStringValue("type", condition.type);
        writer.writeAdditionalData(condition.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeleteOptions(writer: SerializationWriter, deleteOptions: Partial<DeleteOptions> | undefined | null = {}) : void {
    if (deleteOptions) {
        writer.writeStringValue("apiVersion", deleteOptions.apiVersion);
        writer.writeCollectionOfPrimitiveValues<string>("dryRun", deleteOptions.dryRun);
        writer.writeNumberValue("gracePeriodSeconds", deleteOptions.gracePeriodSeconds);
        writer.writeBooleanValue("ignoreStoreReadErrorWithClusterBreakingPotential", deleteOptions.ignoreStoreReadErrorWithClusterBreakingPotential);
        writer.writeStringValue("kind", deleteOptions.kind);
        writer.writeBooleanValue("orphanDependents", deleteOptions.orphanDependents);
        writer.writeObjectValue<Preconditions>("preconditions", deleteOptions.preconditions, serializePreconditions);
        writer.writeStringValue("propagationPolicy", deleteOptions.propagationPolicy);
        writer.writeAdditionalData(deleteOptions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFieldSelectorRequirement(writer: SerializationWriter, fieldSelectorRequirement: Partial<FieldSelectorRequirement> | undefined | null = {}) : void {
    if (fieldSelectorRequirement) {
        writer.writeStringValue("key", fieldSelectorRequirement.key);
        writer.writeStringValue("operator", fieldSelectorRequirement.operator);
        writer.writeCollectionOfPrimitiveValues<string>("values", fieldSelectorRequirement.values);
        writer.writeAdditionalData(fieldSelectorRequirement.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFieldsV1(writer: SerializationWriter, fieldsV1: Partial<FieldsV1> | undefined | null = {}) : void {
    if (fieldsV1) {
        writer.writeAdditionalData(fieldsV1.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGroupVersionForDiscovery(writer: SerializationWriter, groupVersionForDiscovery: Partial<GroupVersionForDiscovery> | undefined | null = {}) : void {
    if (groupVersionForDiscovery) {
        writer.writeStringValue("groupVersion", groupVersionForDiscovery.groupVersion);
        writer.writeStringValue("version", groupVersionForDiscovery.version);
        writer.writeAdditionalData(groupVersionForDiscovery.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelSelector(writer: SerializationWriter, labelSelector: Partial<LabelSelector> | undefined | null = {}) : void {
    if (labelSelector) {
        writer.writeCollectionOfObjectValues<LabelSelectorRequirement>("matchExpressions", labelSelector.matchExpressions, serializeLabelSelectorRequirement);
        writer.writeObjectValue<LabelSelector_matchLabels>("matchLabels", labelSelector.matchLabels, serializeLabelSelector_matchLabels);
        writer.writeAdditionalData(labelSelector.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelSelector_matchLabels(writer: SerializationWriter, labelSelector_matchLabels: Partial<LabelSelector_matchLabels> | undefined | null = {}) : void {
    if (labelSelector_matchLabels) {
        writer.writeAdditionalData(labelSelector_matchLabels.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelSelectorRequirement(writer: SerializationWriter, labelSelectorRequirement: Partial<LabelSelectorRequirement> | undefined | null = {}) : void {
    if (labelSelectorRequirement) {
        writer.writeStringValue("key", labelSelectorRequirement.key);
        writer.writeStringValue("operator", labelSelectorRequirement.operator);
        writer.writeCollectionOfPrimitiveValues<string>("values", labelSelectorRequirement.values);
        writer.writeAdditionalData(labelSelectorRequirement.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListMeta(writer: SerializationWriter, listMeta: Partial<ListMeta> | undefined | null = {}) : void {
    if (listMeta) {
        writer.writeStringValue("continue", listMeta.continueEscaped);
        writer.writeNumberValue("remainingItemCount", listMeta.remainingItemCount);
        writer.writeStringValue("resourceVersion", listMeta.resourceVersion);
        writer.writeStringValue("selfLink", listMeta.selfLink);
        writer.writeAdditionalData(listMeta.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeManagedFieldsEntry(writer: SerializationWriter, managedFieldsEntry: Partial<ManagedFieldsEntry> | undefined | null = {}) : void {
    if (managedFieldsEntry) {
        writer.writeStringValue("apiVersion", managedFieldsEntry.apiVersion);
        writer.writeStringValue("fieldsType", managedFieldsEntry.fieldsType);
        writer.writeObjectValue<FieldsV1>("fieldsV1", managedFieldsEntry.fieldsV1, serializeFieldsV1);
        writer.writeStringValue("manager", managedFieldsEntry.manager);
        writer.writeStringValue("operation", managedFieldsEntry.operation);
        writer.writeStringValue("subresource", managedFieldsEntry.subresource);
        writer.writeDateValue("time", managedFieldsEntry.time);
        writer.writeAdditionalData(managedFieldsEntry.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectMeta(writer: SerializationWriter, objectMeta: Partial<ObjectMeta> | undefined | null = {}) : void {
    if (objectMeta) {
        writer.writeObjectValue<ObjectMeta_annotations>("annotations", objectMeta.annotations, serializeObjectMeta_annotations);
        writer.writeDateValue("creationTimestamp", objectMeta.creationTimestamp);
        writer.writeNumberValue("deletionGracePeriodSeconds", objectMeta.deletionGracePeriodSeconds);
        writer.writeDateValue("deletionTimestamp", objectMeta.deletionTimestamp);
        writer.writeCollectionOfPrimitiveValues<string>("finalizers", objectMeta.finalizers);
        writer.writeStringValue("generateName", objectMeta.generateName);
        writer.writeNumberValue("generation", objectMeta.generation);
        writer.writeObjectValue<ObjectMeta_labels>("labels", objectMeta.labels, serializeObjectMeta_labels);
        writer.writeCollectionOfObjectValues<ManagedFieldsEntry>("managedFields", objectMeta.managedFields, serializeManagedFieldsEntry);
        writer.writeStringValue("name", objectMeta.name);
        writer.writeStringValue("namespace", objectMeta.namespace);
        writer.writeCollectionOfObjectValues<OwnerReference>("ownerReferences", objectMeta.ownerReferences, serializeOwnerReference);
        writer.writeStringValue("resourceVersion", objectMeta.resourceVersion);
        writer.writeStringValue("selfLink", objectMeta.selfLink);
        writer.writeStringValue("uid", objectMeta.uid);
        writer.writeAdditionalData(objectMeta.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectMeta_annotations(writer: SerializationWriter, objectMeta_annotations: Partial<ObjectMeta_annotations> | undefined | null = {}) : void {
    if (objectMeta_annotations) {
        writer.writeAdditionalData(objectMeta_annotations.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeObjectMeta_labels(writer: SerializationWriter, objectMeta_labels: Partial<ObjectMeta_labels> | undefined | null = {}) : void {
    if (objectMeta_labels) {
        writer.writeAdditionalData(objectMeta_labels.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOwnerReference(writer: SerializationWriter, ownerReference: Partial<OwnerReference> | undefined | null = {}) : void {
    if (ownerReference) {
        writer.writeStringValue("apiVersion", ownerReference.apiVersion);
        writer.writeBooleanValue("blockOwnerDeletion", ownerReference.blockOwnerDeletion);
        writer.writeBooleanValue("controller", ownerReference.controller);
        writer.writeStringValue("kind", ownerReference.kind);
        writer.writeStringValue("name", ownerReference.name);
        writer.writeStringValue("uid", ownerReference.uid);
        writer.writeAdditionalData(ownerReference.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatch(writer: SerializationWriter, patch: Partial<Patch> | undefined | null = {}) : void {
    if (patch) {
        writer.writeAdditionalData(patch.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreconditions(writer: SerializationWriter, preconditions: Partial<Preconditions> | undefined | null = {}) : void {
    if (preconditions) {
        writer.writeStringValue("resourceVersion", preconditions.resourceVersion);
        writer.writeStringValue("uid", preconditions.uid);
        writer.writeAdditionalData(preconditions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServerAddressByClientCIDR(writer: SerializationWriter, serverAddressByClientCIDR: Partial<ServerAddressByClientCIDR> | undefined | null = {}) : void {
    if (serverAddressByClientCIDR) {
        writer.writeStringValue("clientCIDR", serverAddressByClientCIDR.clientCIDR);
        writer.writeStringValue("serverAddress", serverAddressByClientCIDR.serverAddress);
        writer.writeAdditionalData(serverAddressByClientCIDR.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStatus(writer: SerializationWriter, status: Partial<Status> | undefined | null = {}) : void {
    if (status) {
        writer.writeStringValue("apiVersion", status.apiVersion);
        writer.writeNumberValue("code", status.code);
        writer.writeObjectValue<StatusDetails>("details", status.details, serializeStatusDetails);
        writer.writeStringValue("kind", status.kind);
        writer.writeStringValue("message", status.message);
        writer.writeObjectValue<ListMeta>("metadata", status.metadata, serializeListMeta);
        writer.writeStringValue("reason", status.reason);
        writer.writeStringValue("status", status.status);
        writer.writeAdditionalData(status.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStatusCause(writer: SerializationWriter, statusCause: Partial<StatusCause> | undefined | null = {}) : void {
    if (statusCause) {
        writer.writeStringValue("field", statusCause.field);
        writer.writeStringValue("message", statusCause.message);
        writer.writeStringValue("reason", statusCause.reason);
        writer.writeAdditionalData(statusCause.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStatusDetails(writer: SerializationWriter, statusDetails: Partial<StatusDetails> | undefined | null = {}) : void {
    if (statusDetails) {
        writer.writeCollectionOfObjectValues<StatusCause>("causes", statusDetails.causes, serializeStatusCause);
        writer.writeStringValue("group", statusDetails.group);
        writer.writeStringValue("kind", statusDetails.kind);
        writer.writeStringValue("name", statusDetails.name);
        writer.writeNumberValue("retryAfterSeconds", statusDetails.retryAfterSeconds);
        writer.writeStringValue("uid", statusDetails.uid);
        writer.writeAdditionalData(statusDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWatchEvent(writer: SerializationWriter, watchEvent: Partial<WatchEvent> | undefined | null = {}) : void {
    if (watchEvent) {
        writer.writeObjectValue<RawExtension>("object", watchEvent.object, serializeRawExtension);
        writer.writeStringValue("type", watchEvent.type);
        writer.writeAdditionalData(watchEvent.additionalData);
    }
}
/**
 * ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
 */
export interface ServerAddressByClientCIDR extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The CIDR with which clients can match their IP to figure out the server address that they should use.
     */
    clientCIDR?: string | null;
    /**
     * Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
     */
    serverAddress?: string | null;
}
/**
 * Status is a return value for calls that don't return other objects.
 */
export interface Status extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: string | null;
    /**
     * Suggested HTTP return code for this status, 0 if not set.
     */
    code?: number | null;
    /**
     * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
     */
    details?: StatusDetails | null;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * A human-readable description of the status of this operation.
     */
    message?: string | null;
    /**
     * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
     */
    metadata?: ListMeta | null;
    /**
     * A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
     */
    reason?: string | null;
    /**
     * Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    status?: string | null;
}
/**
 * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
 */
export interface StatusCause extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.Examples:  "name" - the field "name" on the current resource  "items[0].name" - the field "name" on the first array entry in "items"
     */
    field?: string | null;
    /**
     * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
     */
    message?: string | null;
    /**
     * A machine-readable description of the cause of the error. If this value is empty there is no information available.
     */
    reason?: string | null;
}
/**
 * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
 */
export interface StatusDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
     */
    causes?: StatusCause[] | null;
    /**
     * The group attribute of the resource associated with the status StatusReason.
     */
    group?: string | null;
    /**
     * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: string | null;
    /**
     * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
     */
    name?: string | null;
    /**
     * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
     */
    retryAfterSeconds?: number | null;
    /**
     * UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     */
    uid?: string | null;
}
/**
 * Event represents a single event to a watched resource.
 */
export interface WatchEvent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.Object `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.RawExtension `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// On the wire, the JSON will look something like this:{"kind":"MyAPIObject","apiVersion":"v1","myPlugin": {"kind":"PluginA","aOption":"foo",},}So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
     */
    object?: RawExtension | null;
    /**
     * The type property
     */
    type?: string | null;
}
/* tslint:enable */
/* eslint-enable */
