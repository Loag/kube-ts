/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RawExtension}
 */
// @ts-ignore
export function createRawExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRawExtension;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRawExtension(rawExtension: Partial<RawExtension> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.Object `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:",inline"`MyPlugin runtime.RawExtension `json:"myPlugin"`}type PluginA struct {AOption string `json:"aOption"`}// On the wire, the JSON will look something like this:{"kind":"MyAPIObject","apiVersion":"v1","myPlugin": {"kind":"PluginA","aOption":"foo",},}So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
 */
export interface RawExtension extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRawExtension(writer: SerializationWriter, rawExtension: Partial<RawExtension> | undefined | null = {}) : void {
    if (rawExtension) {
        writer.writeAdditionalData(rawExtension.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
